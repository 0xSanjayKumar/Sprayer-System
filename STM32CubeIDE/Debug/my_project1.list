
my_project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009404  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080095a4  080095a4  0000a5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096f8  080096f8  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  080096f8  080096f8  0000a6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009700  08009700  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009700  08009700  0000a700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009704  08009704  0000a704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009708  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aa4  20000060  08009768  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b04  08009768  0000bb04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b47  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e60  00000000  00000000  0002ebd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df8  00000000  00000000  00033a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000173f  00000000  00000000  00035830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028870  00000000  00000000  00036f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026806  00000000  00000000  0005f7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9928  00000000  00000000  00085fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017f90d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080cc  00000000  00000000  0017f950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00187a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800958c 	.word	0x0800958c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800958c 	.word	0x0800958c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d6:	463b      	mov	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
 80004e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e6:	4b55      	ldr	r3, [pc, #340]	@ (800063c <MX_ADC1_Init+0x16c>)
 80004e8:	4a55      	ldr	r2, [pc, #340]	@ (8000640 <MX_ADC1_Init+0x170>)
 80004ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80004ec:	4b53      	ldr	r3, [pc, #332]	@ (800063c <MX_ADC1_Init+0x16c>)
 80004ee:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 80004f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f4:	4b51      	ldr	r3, [pc, #324]	@ (800063c <MX_ADC1_Init+0x16c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fa:	4b50      	ldr	r3, [pc, #320]	@ (800063c <MX_ADC1_Init+0x16c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000500:	4b4e      	ldr	r3, [pc, #312]	@ (800063c <MX_ADC1_Init+0x16c>)
 8000502:	2201      	movs	r2, #1
 8000504:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000506:	4b4d      	ldr	r3, [pc, #308]	@ (800063c <MX_ADC1_Init+0x16c>)
 8000508:	2208      	movs	r2, #8
 800050a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800050c:	4b4b      	ldr	r3, [pc, #300]	@ (800063c <MX_ADC1_Init+0x16c>)
 800050e:	2200      	movs	r2, #0
 8000510:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000512:	4b4a      	ldr	r3, [pc, #296]	@ (800063c <MX_ADC1_Init+0x16c>)
 8000514:	2200      	movs	r2, #0
 8000516:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 7;
 8000518:	4b48      	ldr	r3, [pc, #288]	@ (800063c <MX_ADC1_Init+0x16c>)
 800051a:	2207      	movs	r2, #7
 800051c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800051e:	4b47      	ldr	r3, [pc, #284]	@ (800063c <MX_ADC1_Init+0x16c>)
 8000520:	2200      	movs	r2, #0
 8000522:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000526:	4b45      	ldr	r3, [pc, #276]	@ (800063c <MX_ADC1_Init+0x16c>)
 8000528:	2200      	movs	r2, #0
 800052a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800052c:	4b43      	ldr	r3, [pc, #268]	@ (800063c <MX_ADC1_Init+0x16c>)
 800052e:	2200      	movs	r2, #0
 8000530:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000532:	4b42      	ldr	r3, [pc, #264]	@ (800063c <MX_ADC1_Init+0x16c>)
 8000534:	2201      	movs	r2, #1
 8000536:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800053a:	4b40      	ldr	r3, [pc, #256]	@ (800063c <MX_ADC1_Init+0x16c>)
 800053c:	2200      	movs	r2, #0
 800053e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000540:	4b3e      	ldr	r3, [pc, #248]	@ (800063c <MX_ADC1_Init+0x16c>)
 8000542:	2200      	movs	r2, #0
 8000544:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000548:	483c      	ldr	r0, [pc, #240]	@ (800063c <MX_ADC1_Init+0x16c>)
 800054a:	f001 fd1b 	bl	8001f84 <HAL_ADC_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000554:	f000 ff90 	bl	8001478 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000558:	4b3a      	ldr	r3, [pc, #232]	@ (8000644 <MX_ADC1_Init+0x174>)
 800055a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800055c:	2306      	movs	r3, #6
 800055e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000560:	2302      	movs	r3, #2
 8000562:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000564:	237f      	movs	r3, #127	@ 0x7f
 8000566:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000568:	2304      	movs	r3, #4
 800056a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000570:	463b      	mov	r3, r7
 8000572:	4619      	mov	r1, r3
 8000574:	4831      	ldr	r0, [pc, #196]	@ (800063c <MX_ADC1_Init+0x16c>)
 8000576:	f001 fee3 	bl	8002340 <HAL_ADC_ConfigChannel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000580:	f000 ff7a 	bl	8001478 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000584:	4b30      	ldr	r3, [pc, #192]	@ (8000648 <MX_ADC1_Init+0x178>)
 8000586:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000588:	230c      	movs	r3, #12
 800058a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058c:	463b      	mov	r3, r7
 800058e:	4619      	mov	r1, r3
 8000590:	482a      	ldr	r0, [pc, #168]	@ (800063c <MX_ADC1_Init+0x16c>)
 8000592:	f001 fed5 	bl	8002340 <HAL_ADC_ConfigChannel>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800059c:	f000 ff6c 	bl	8001478 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005a0:	4b2a      	ldr	r3, [pc, #168]	@ (800064c <MX_ADC1_Init+0x17c>)
 80005a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005a4:	2312      	movs	r3, #18
 80005a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	4619      	mov	r1, r3
 80005ac:	4823      	ldr	r0, [pc, #140]	@ (800063c <MX_ADC1_Init+0x16c>)
 80005ae:	f001 fec7 	bl	8002340 <HAL_ADC_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80005b8:	f000 ff5e 	bl	8001478 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005bc:	4b24      	ldr	r3, [pc, #144]	@ (8000650 <MX_ADC1_Init+0x180>)
 80005be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005c0:	2318      	movs	r3, #24
 80005c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	4619      	mov	r1, r3
 80005c8:	481c      	ldr	r0, [pc, #112]	@ (800063c <MX_ADC1_Init+0x16c>)
 80005ca:	f001 feb9 	bl	8002340 <HAL_ADC_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80005d4:	f000 ff50 	bl	8001478 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000654 <MX_ADC1_Init+0x184>)
 80005da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80005dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	4619      	mov	r1, r3
 80005e6:	4815      	ldr	r0, [pc, #84]	@ (800063c <MX_ADC1_Init+0x16c>)
 80005e8:	f001 feaa 	bl	8002340 <HAL_ADC_ConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80005f2:	f000 ff41 	bl	8001478 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80005f6:	4b18      	ldr	r3, [pc, #96]	@ (8000658 <MX_ADC1_Init+0x188>)
 80005f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80005fa:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80005fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	480d      	ldr	r0, [pc, #52]	@ (800063c <MX_ADC1_Init+0x16c>)
 8000606:	f001 fe9b 	bl	8002340 <HAL_ADC_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000610:	f000 ff32 	bl	8001478 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <MX_ADC1_Init+0x18c>)
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000618:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800061c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	4619      	mov	r1, r3
 8000622:	4806      	ldr	r0, [pc, #24]	@ (800063c <MX_ADC1_Init+0x16c>)
 8000624:	f001 fe8c 	bl	8002340 <HAL_ADC_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 800062e:	f000 ff23 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000080 	.word	0x20000080
 8000640:	50040000 	.word	0x50040000
 8000644:	2e300800 	.word	0x2e300800
 8000648:	04300002 	.word	0x04300002
 800064c:	08600004 	.word	0x08600004
 8000650:	0c900008 	.word	0x0c900008
 8000654:	32601000 	.word	0x32601000
 8000658:	3ef08000 	.word	0x3ef08000
 800065c:	43210000 	.word	0x43210000

08000660 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0a6      	sub	sp, #152	@ 0x98
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	2268      	movs	r2, #104	@ 0x68
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f008 fea9 	bl	80093d8 <memset>
  if(adcHandle->Instance==ADC1)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a58      	ldr	r2, [pc, #352]	@ (80007ec <HAL_ADC_MspInit+0x18c>)
 800068c:	4293      	cmp	r3, r2
 800068e:	f040 80a9 	bne.w	80007e4 <HAL_ADC_MspInit+0x184>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000692:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000696:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000698:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800069c:	67bb      	str	r3, [r7, #120]	@ 0x78
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800069e:	2302      	movs	r3, #2
 80006a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006a6:	2308      	movs	r3, #8
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006aa:	2307      	movs	r3, #7
 80006ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 80006b2:	2308      	movs	r3, #8
 80006b4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80006ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 fea5 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006cc:	f000 fed4 	bl	8001478 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006d0:	4b47      	ldr	r3, [pc, #284]	@ (80007f0 <HAL_ADC_MspInit+0x190>)
 80006d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d4:	4a46      	ldr	r2, [pc, #280]	@ (80007f0 <HAL_ADC_MspInit+0x190>)
 80006d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006dc:	4b44      	ldr	r3, [pc, #272]	@ (80007f0 <HAL_ADC_MspInit+0x190>)
 80006de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006e4:	61bb      	str	r3, [r7, #24]
 80006e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e8:	4b41      	ldr	r3, [pc, #260]	@ (80007f0 <HAL_ADC_MspInit+0x190>)
 80006ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ec:	4a40      	ldr	r2, [pc, #256]	@ (80007f0 <HAL_ADC_MspInit+0x190>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f4:	4b3e      	ldr	r3, [pc, #248]	@ (80007f0 <HAL_ADC_MspInit+0x190>)
 80006f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	4b3b      	ldr	r3, [pc, #236]	@ (80007f0 <HAL_ADC_MspInit+0x190>)
 8000702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000704:	4a3a      	ldr	r2, [pc, #232]	@ (80007f0 <HAL_ADC_MspInit+0x190>)
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070c:	4b38      	ldr	r3, [pc, #224]	@ (80007f0 <HAL_ADC_MspInit+0x190>)
 800070e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000718:	4b35      	ldr	r3, [pc, #212]	@ (80007f0 <HAL_ADC_MspInit+0x190>)
 800071a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071c:	4a34      	ldr	r2, [pc, #208]	@ (80007f0 <HAL_ADC_MspInit+0x190>)
 800071e:	f043 0302 	orr.w	r3, r3, #2
 8000722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000724:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <HAL_ADC_MspInit+0x190>)
 8000726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000728:	f003 0302 	and.w	r3, r3, #2
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = pcbTempMon_Pin|pcbVoltageMon5_Pin|pcbVoltageMon3_Pin;
 8000730:	2307      	movs	r3, #7
 8000732:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000736:	230b      	movs	r3, #11
 8000738:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000742:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000746:	4619      	mov	r1, r3
 8000748:	482a      	ldr	r0, [pc, #168]	@ (80007f4 <HAL_ADC_MspInit+0x194>)
 800074a:	f003 fcb7 	bl	80040bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = proximityMinTop_Pin|proximityMaxTop_Pin;
 800074e:	23c0      	movs	r3, #192	@ 0xc0
 8000750:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000754:	230b      	movs	r3, #11
 8000756:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000760:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000764:	4619      	mov	r1, r3
 8000766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076a:	f003 fca7 	bl	80040bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = proximityMinBase_Pin|proximityMaxBase_Pin;
 800076e:	2303      	movs	r3, #3
 8000770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000774:	230b      	movs	r3, #11
 8000776:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000784:	4619      	mov	r1, r3
 8000786:	481c      	ldr	r0, [pc, #112]	@ (80007f8 <HAL_ADC_MspInit+0x198>)
 8000788:	f003 fc98 	bl	80040bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800078c:	4b1b      	ldr	r3, [pc, #108]	@ (80007fc <HAL_ADC_MspInit+0x19c>)
 800078e:	4a1c      	ldr	r2, [pc, #112]	@ (8000800 <HAL_ADC_MspInit+0x1a0>)
 8000790:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000792:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <HAL_ADC_MspInit+0x19c>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000798:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <HAL_ADC_MspInit+0x19c>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800079e:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <HAL_ADC_MspInit+0x19c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <HAL_ADC_MspInit+0x19c>)
 80007a6:	2280      	movs	r2, #128	@ 0x80
 80007a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007aa:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <HAL_ADC_MspInit+0x19c>)
 80007ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007b2:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <HAL_ADC_MspInit+0x19c>)
 80007b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <HAL_ADC_MspInit+0x19c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <HAL_ADC_MspInit+0x19c>)
 80007c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007c8:	480c      	ldr	r0, [pc, #48]	@ (80007fc <HAL_ADC_MspInit+0x19c>)
 80007ca:	f003 fa01 	bl	8003bd0 <HAL_DMA_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 80007d4:	f000 fe50 	bl	8001478 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <HAL_ADC_MspInit+0x19c>)
 80007dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80007de:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <HAL_ADC_MspInit+0x19c>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007e4:	bf00      	nop
 80007e6:	3798      	adds	r7, #152	@ 0x98
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	50040000 	.word	0x50040000
 80007f0:	40021000 	.word	0x40021000
 80007f4:	48000800 	.word	0x48000800
 80007f8:	48000400 	.word	0x48000400
 80007fc:	200000e8 	.word	0x200000e8
 8000800:	40020008 	.word	0x40020008

08000804 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <MX_CAN1_Init+0x9c>)
 800080c:	4a25      	ldr	r2, [pc, #148]	@ (80008a4 <MX_CAN1_Init+0xa0>)
 800080e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16; // prescaler for 400kbs
 8000810:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <MX_CAN1_Init+0x9c>)
 8000812:	2210      	movs	r2, #16
 8000814:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000816:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <MX_CAN1_Init+0x9c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <MX_CAN1_Init+0x9c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000822:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <MX_CAN1_Init+0x9c>)
 8000824:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000828:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800082a:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <MX_CAN1_Init+0x9c>)
 800082c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000830:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000832:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <MX_CAN1_Init+0x9c>)
 8000834:	2200      	movs	r2, #0
 8000836:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <MX_CAN1_Init+0x9c>)
 800083a:	2200      	movs	r2, #0
 800083c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800083e:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <MX_CAN1_Init+0x9c>)
 8000840:	2200      	movs	r2, #0
 8000842:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000844:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_CAN1_Init+0x9c>)
 8000846:	2200      	movs	r2, #0
 8000848:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <MX_CAN1_Init+0x9c>)
 800084c:	2200      	movs	r2, #0
 800084e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000850:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <MX_CAN1_Init+0x9c>)
 8000852:	2200      	movs	r2, #0
 8000854:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000856:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <MX_CAN1_Init+0x9c>)
 8000858:	f002 fa88 	bl	8002d6c <HAL_CAN_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000862:	f000 fe09 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000;
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0000;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;
 800088a:	230e      	movs	r3, #14
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800088e:	463b      	mov	r3, r7
 8000890:	4619      	mov	r1, r3
 8000892:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <MX_CAN1_Init+0x9c>)
 8000894:	f002 fb65 	bl	8002f62 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	@ 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000158 	.word	0x20000158
 80008a4:	40006400 	.word	0x40006400

080008a8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000934 <HAL_CAN_MspInit+0x8c>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d130      	bne.n	800092c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <HAL_CAN_MspInit+0x90>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000938 <HAL_CAN_MspInit+0x90>)
 80008d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <HAL_CAN_MspInit+0x90>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <HAL_CAN_MspInit+0x90>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a14      	ldr	r2, [pc, #80]	@ (8000938 <HAL_CAN_MspInit+0x90>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_CAN_MspInit+0x90>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800090c:	2309      	movs	r3, #9
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	4809      	ldr	r0, [pc, #36]	@ (800093c <HAL_CAN_MspInit+0x94>)
 8000918:	f003 fbd0 	bl	80040bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2101      	movs	r1, #1
 8000920:	2014      	movs	r0, #20
 8000922:	f003 f92b 	bl	8003b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000926:	2014      	movs	r0, #20
 8000928:	f003 f944 	bl	8003bb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	@ 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40006400 	.word	0x40006400
 8000938:	40021000 	.word	0x40021000
 800093c:	48000400 	.word	0x48000400

08000940 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000948:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800094a:	4a0c      	ldr	r2, [pc, #48]	@ (800097c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800094c:	2100      	movs	r1, #0
 800094e:	480c      	ldr	r0, [pc, #48]	@ (8000980 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000950:	f002 fce5 	bl	800331e <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 8){
 8000954:	4b09      	ldr	r3, [pc, #36]	@ (800097c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000956:	691b      	ldr	r3, [r3, #16]
 8000958:	2b08      	cmp	r3, #8
 800095a:	d108      	bne.n	800096e <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
		if(RxHeader.StdId == 0x00000762){
 800095c:	4b07      	ldr	r3, [pc, #28]	@ (800097c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f240 7262 	movw	r2, #1890	@ 0x762
 8000964:	4293      	cmp	r3, r2
 8000966:	d102      	bne.n	800096e <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
			sprayerSystemDataFlag = 1;
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800096a:	2201      	movs	r2, #1
 800096c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000014c 	.word	0x2000014c
 800097c:	20000130 	.word	0x20000130
 8000980:	20000158 	.word	0x20000158
 8000984:	20000154 	.word	0x20000154

08000988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800098e:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_DMA_Init+0x58>)
 8000990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000992:	4a13      	ldr	r2, [pc, #76]	@ (80009e0 <MX_DMA_Init+0x58>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6493      	str	r3, [r2, #72]	@ 0x48
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_DMA_Init+0x58>)
 800099c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	200b      	movs	r0, #11
 80009ac:	f003 f8e6 	bl	8003b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009b0:	200b      	movs	r0, #11
 80009b2:	f003 f8ff 	bl	8003bb4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2105      	movs	r1, #5
 80009ba:	200c      	movs	r0, #12
 80009bc:	f003 f8de 	bl	8003b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009c0:	200c      	movs	r0, #12
 80009c2:	f003 f8f7 	bl	8003bb4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2105      	movs	r1, #5
 80009ca:	200d      	movs	r0, #13
 80009cc:	f003 f8d6 	bl	8003b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009d0:	200d      	movs	r0, #13
 80009d2:	f003 f8ef 	bl	8003bb4 <HAL_NVIC_EnableIRQ>

}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000

080009e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <vApplicationGetIdleTaskMemory+0x2c>)
 80009f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	4a06      	ldr	r2, [pc, #24]	@ (8000a14 <vApplicationGetIdleTaskMemory+0x30>)
 80009fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2280      	movs	r2, #128	@ 0x80
 8000a00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	200001c8 	.word	0x200001c8
 8000a14:	20000268 	.word	0x20000268

08000a18 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a18:	b5b0      	push	{r4, r5, r7, lr}
 8000a1a:	b0aa      	sub	sp, #168	@ 0xa8
 8000a1c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b14 <MX_FREERTOS_Init+0xfc>)
 8000a20:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8000a24:	461d      	mov	r5, r3
 8000a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a32:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f007 f9fb 	bl	8007e34 <osThreadCreate>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4a35      	ldr	r2, [pc, #212]	@ (8000b18 <MX_FREERTOS_Init+0x100>)
 8000a42:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(monitoringTask, StartMonitoringTask, osPriorityNormal, 0, 128);
 8000a44:	4b35      	ldr	r3, [pc, #212]	@ (8000b1c <MX_FREERTOS_Init+0x104>)
 8000a46:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000a4a:	461d      	mov	r5, r3
 8000a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  monitoringTaskHandle = osThreadCreate(osThread(monitoringTask), NULL);
 8000a58:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f007 f9e8 	bl	8007e34 <osThreadCreate>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4a2e      	ldr	r2, [pc, #184]	@ (8000b20 <MX_FREERTOS_Init+0x108>)
 8000a68:	6013      	str	r3, [r2, #0]
  osThreadDef(motorControlTask, StartMotorControlTask, osPriorityNormal, 0, 128);
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b24 <MX_FREERTOS_Init+0x10c>)
 8000a6c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000a70:	461d      	mov	r5, r3
 8000a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorControlTaskHandle = osThreadCreate(osThread(motorControlTask), NULL);
 8000a7e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f007 f9d5 	bl	8007e34 <osThreadCreate>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4a26      	ldr	r2, [pc, #152]	@ (8000b28 <MX_FREERTOS_Init+0x110>)
 8000a8e:	6013      	str	r3, [r2, #0]
  osThreadDef(canTask, StartCanTask, osPriorityNormal, 0, 128);
 8000a90:	4b26      	ldr	r3, [pc, #152]	@ (8000b2c <MX_FREERTOS_Init+0x114>)
 8000a92:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000a96:	461d      	mov	r5, r3
 8000a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canTaskHandle = osThreadCreate(osThread(canTask), NULL);
 8000aa4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f007 f9c2 	bl	8007e34 <osThreadCreate>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b30 <MX_FREERTOS_Init+0x118>)
 8000ab4:	6013      	str	r3, [r2, #0]
  osThreadDef(sensorTask, StartSensorTask, osPriorityNormal, 0, 128);
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <MX_FREERTOS_Init+0x11c>)
 8000ab8:	f107 041c 	add.w	r4, r7, #28
 8000abc:	461d      	mov	r5, r3
 8000abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ac6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f007 f9af 	bl	8007e34 <osThreadCreate>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a17      	ldr	r2, [pc, #92]	@ (8000b38 <MX_FREERTOS_Init+0x120>)
 8000ada:	6013      	str	r3, [r2, #0]
  osThreadDef(switchMonitoringTask, StartSwitchMonitoringTask, osPriorityAboveNormal, 0, 128);
 8000adc:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <MX_FREERTOS_Init+0x124>)
 8000ade:	463c      	mov	r4, r7
 8000ae0:	461d      	mov	r5, r3
 8000ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  switchMonitoringTaskHandle = osThreadCreate(osThread(switchMonitoringTask), NULL);
 8000aee:	463b      	mov	r3, r7
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f007 f99e 	bl	8007e34 <osThreadCreate>
 8000af8:	4603      	mov	r3, r0
 8000afa:	4a11      	ldr	r2, [pc, #68]	@ (8000b40 <MX_FREERTOS_Init+0x128>)
 8000afc:	6013      	str	r3, [r2, #0]
  if (switchMonitoringTaskHandle == NULL) {
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <MX_FREERTOS_Init+0x128>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <MX_FREERTOS_Init+0xf2>
      Error_Handler(); // Handle task creation error
 8000b06:	f000 fcb7 	bl	8001478 <Error_Handler>
  }
  /* USER CODE END RTOS_THREADS */

}
 8000b0a:	bf00      	nop
 8000b0c:	37a8      	adds	r7, #168	@ 0xa8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bdb0      	pop	{r4, r5, r7, pc}
 8000b12:	bf00      	nop
 8000b14:	080095b0 	.word	0x080095b0
 8000b18:	200001c4 	.word	0x200001c4
 8000b1c:	080095dc 	.word	0x080095dc
 8000b20:	200001b0 	.word	0x200001b0
 8000b24:	0800960c 	.word	0x0800960c
 8000b28:	200001b4 	.word	0x200001b4
 8000b2c:	08009630 	.word	0x08009630
 8000b30:	200001b8 	.word	0x200001b8
 8000b34:	08009658 	.word	0x08009658
 8000b38:	200001bc 	.word	0x200001bc
 8000b3c:	0800968c 	.word	0x0800968c
 8000b40:	200001c0 	.word	0x200001c0

08000b44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8000b4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b50:	f007 f9bc 	bl	8007ecc <osDelay>
 8000b54:	e7fa      	b.n	8000b4c <StartDefaultTask+0x8>
	...

08000b58 <SendFeedbackDataOverCAN>:
  /* USER CODE END StartDefaultTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void SendFeedbackDataOverCAN(void) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
  uint8_t feedbackData[8];
  // Pack feedback data into CAN message
  feedbackData[0] = (uint8_t)(motorBasePosition >> 8); // High byte of motor base position
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <SendFeedbackDataOverCAN+0x8c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	121b      	asrs	r3, r3, #8
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	f887 3020 	strb.w	r3, [r7, #32]
  feedbackData[1] = (uint8_t)(motorBasePosition & 0xFF); // Low byte of motor base position
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000be4 <SendFeedbackDataOverCAN+0x8c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  feedbackData[2] = (uint8_t)(motorTopPosition >> 8); // High byte of motor top position
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <SendFeedbackDataOverCAN+0x90>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	121b      	asrs	r3, r3, #8
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  feedbackData[3] = (uint8_t)(motorTopPosition & 0xFF); // Low byte of motor top position
 8000b80:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <SendFeedbackDataOverCAN+0x90>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  feedbackData[4] = (uint8_t)pumpStatus; // Pump status
 8000b8a:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <SendFeedbackDataOverCAN+0x94>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  feedbackData[5] = (uint8_t)blowerStatus; // Blower status
 8000b94:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <SendFeedbackDataOverCAN+0x98>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  feedbackData[6] = 0; // Reserved
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  feedbackData[7] = 0; // Reserved
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  // Send CAN message
  CAN_TxHeaderTypeDef TxHeader;
  uint32_t TxMailbox;
  TxHeader.StdId = 0x00000764;
 8000baa:	f240 7364 	movw	r3, #1892	@ 0x764
 8000bae:	60bb      	str	r3, [r7, #8]
  TxHeader.ExtId = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  TxHeader.RTR = CAN_RTR_DATA;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  TxHeader.IDE = CAN_ID_STD;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  TxHeader.DLC = 8; // Data length code (8 bytes)
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	61bb      	str	r3, [r7, #24]

  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, feedbackData, &TxMailbox) != HAL_OK) {
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	f107 0220 	add.w	r2, r7, #32
 8000bc6:	f107 0108 	add.w	r1, r7, #8
 8000bca:	480a      	ldr	r0, [pc, #40]	@ (8000bf4 <SendFeedbackDataOverCAN+0x9c>)
 8000bcc:	f002 fad7 	bl	800317e <HAL_CAN_AddTxMessage>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SendFeedbackDataOverCAN+0x82>
    // Transmission Error
    Error_Handler();
 8000bd6:	f000 fc4f 	bl	8001478 <Error_Handler>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	@ 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000188 	.word	0x20000188
 8000be8:	20000184 	.word	0x20000184
 8000bec:	2000018c 	.word	0x2000018c
 8000bf0:	20000190 	.word	0x20000190
 8000bf4:	20000158 	.word	0x20000158

08000bf8 <SendADCDataOverCAN>:

void SendADCDataOverCAN(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08c      	sub	sp, #48	@ 0x30
 8000bfc:	af00      	add	r7, sp, #0
  uint8_t adcData[8];
  // Pack ADC data into CAN message
  adcData[0] = (uint8_t)(temperature * 10); // Temperature (scaled by 10)
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb0 <SendADCDataOverCAN+0xb8>)
 8000c00:	edd3 7a00 	vldr	s15, [r3]
 8000c04:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c10:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c14:	793b      	ldrb	r3, [r7, #4]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  adcData[1] = (uint8_t)(voltage_5v * 100); // 5V voltage (scaled by 100)
 8000c1c:	4b25      	ldr	r3, [pc, #148]	@ (8000cb4 <SendADCDataOverCAN+0xbc>)
 8000c1e:	edd3 7a00 	vldr	s15, [r3]
 8000c22:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000cb8 <SendADCDataOverCAN+0xc0>
 8000c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c2e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c32:	793b      	ldrb	r3, [r7, #4]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  adcData[2] = (uint8_t)(voltage_3v3 * 100); // 3.3V voltage (scaled by 100)
 8000c3a:	4b20      	ldr	r3, [pc, #128]	@ (8000cbc <SendADCDataOverCAN+0xc4>)
 8000c3c:	edd3 7a00 	vldr	s15, [r3]
 8000c40:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000cb8 <SendADCDataOverCAN+0xc0>
 8000c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c4c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c50:	793b      	ldrb	r3, [r7, #4]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  adcData[3] = 0; // Reserved
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  adcData[4] = 0; // Reserved
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  adcData[5] = 0; // Reserved
 8000c64:	2300      	movs	r3, #0
 8000c66:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  adcData[6] = 0; // Reserved
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  adcData[7] = 0; // Reserved
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  // Send CAN message
  CAN_TxHeaderTypeDef TxHeader;
  uint32_t TxMailbox;
  TxHeader.StdId = 0x00000765;
 8000c76:	f240 7365 	movw	r3, #1893	@ 0x765
 8000c7a:	613b      	str	r3, [r7, #16]
  TxHeader.ExtId = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  TxHeader.RTR = CAN_RTR_DATA;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
  TxHeader.IDE = CAN_ID_STD;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
  TxHeader.DLC = 8; // Data length code (8 bytes)
 8000c88:	2308      	movs	r3, #8
 8000c8a:	623b      	str	r3, [r7, #32]

  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, adcData, &TxMailbox) != HAL_OK) {
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000c94:	f107 0110 	add.w	r1, r7, #16
 8000c98:	4809      	ldr	r0, [pc, #36]	@ (8000cc0 <SendADCDataOverCAN+0xc8>)
 8000c9a:	f002 fa70 	bl	800317e <HAL_CAN_AddTxMessage>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SendADCDataOverCAN+0xb0>
    // Transmission Error
    Error_Handler();
 8000ca4:	f000 fbe8 	bl	8001478 <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3730      	adds	r7, #48	@ 0x30
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200001a4 	.word	0x200001a4
 8000cb4:	200001a8 	.word	0x200001a8
 8000cb8:	42c80000 	.word	0x42c80000
 8000cbc:	200001ac 	.word	0x200001ac
 8000cc0:	20000158 	.word	0x20000158

08000cc4 <processADCData>:

void processADCData(void) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  // Example: Convert ADC values to temperature, 5V, and 3.3V
  temperature = (float)adc_data[0] * 0.1f; // Example conversion
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <processADCData+0x5c>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	ee07 3a90 	vmov	s15, r3
 8000cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd4:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000d24 <processADCData+0x60>
 8000cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <processADCData+0x64>)
 8000cde:	edc3 7a00 	vstr	s15, [r3]
  voltage_5v = (float)adc_data[1] * 0.01f; // Example conversion
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <processADCData+0x5c>)
 8000ce4:	885b      	ldrh	r3, [r3, #2]
 8000ce6:	ee07 3a90 	vmov	s15, r3
 8000cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cee:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000d2c <processADCData+0x68>
 8000cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <processADCData+0x6c>)
 8000cf8:	edc3 7a00 	vstr	s15, [r3]
  voltage_3v3 = (float)adc_data[2] * 0.01f; // Example conversion
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <processADCData+0x5c>)
 8000cfe:	889b      	ldrh	r3, [r3, #4]
 8000d00:	ee07 3a90 	vmov	s15, r3
 8000d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d08:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000d2c <processADCData+0x68>
 8000d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <processADCData+0x70>)
 8000d12:	edc3 7a00 	vstr	s15, [r3]
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	20000194 	.word	0x20000194
 8000d24:	3dcccccd 	.word	0x3dcccccd
 8000d28:	200001a4 	.word	0x200001a4
 8000d2c:	3c23d70a 	.word	0x3c23d70a
 8000d30:	200001a8 	.word	0x200001a8
 8000d34:	200001ac 	.word	0x200001ac

08000d38 <StartMonitoringTask>:

void StartMonitoringTask(void const * argument)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_ADC_Start_DMA(&hadc1, &adc_data, 7);
 8000d40:	2207      	movs	r2, #7
 8000d42:	490b      	ldr	r1, [pc, #44]	@ (8000d70 <StartMonitoringTask+0x38>)
 8000d44:	480b      	ldr	r0, [pc, #44]	@ (8000d74 <StartMonitoringTask+0x3c>)
 8000d46:	f001 fa63 	bl	8002210 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  for(;;)
  {
	if(isADCFinished == 1){
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <StartMonitoringTask+0x40>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d109      	bne.n	8000d66 <StartMonitoringTask+0x2e>
		isADCFinished = 0;
 8000d52:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <StartMonitoringTask+0x40>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
		processADCData();
 8000d58:	f7ff ffb4 	bl	8000cc4 <processADCData>
		HAL_ADC_Start_DMA(&hadc1, &adc_data, 7);
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	4904      	ldr	r1, [pc, #16]	@ (8000d70 <StartMonitoringTask+0x38>)
 8000d60:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <StartMonitoringTask+0x3c>)
 8000d62:	f001 fa55 	bl	8002210 <HAL_ADC_Start_DMA>
	}

    osDelay(500);
 8000d66:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d6a:	f007 f8af 	bl	8007ecc <osDelay>
	if(isADCFinished == 1){
 8000d6e:	e7ec      	b.n	8000d4a <StartMonitoringTask+0x12>
 8000d70:	20000194 	.word	0x20000194
 8000d74:	20000080 	.word	0x20000080
 8000d78:	2000007c 	.word	0x2000007c

08000d7c <StartMotorControlTask>:
  }
}

void StartMotorControlTask(void const * argument)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  if (servo_move_flag == 1)
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <StartMotorControlTask+0x48>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d115      	bne.n	8000db8 <StartMotorControlTask+0x3c>
	  {
		  servo_move_flag = 0; // Reset the flag
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <StartMotorControlTask+0x48>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
		  uint32_t num_steps = (uint32_t)(motorTopPosition / STEP_ANGLE);
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <StartMotorControlTask+0x4c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d9e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8000dcc <StartMotorControlTask+0x50>
 8000da2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000daa:	ee17 3a90 	vmov	r3, s15
 8000dae:	60fb      	str	r3, [r7, #12]

		   // Move the motor to the target angle
		  Generate_Steps(num_steps, 1);
 8000db0:	2101      	movs	r1, #1
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f000 fb12 	bl	80013dc <Generate_Steps>
	   }
    osDelay(500);
 8000db8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dbc:	f007 f886 	bl	8007ecc <osDelay>
	  if (servo_move_flag == 1)
 8000dc0:	e7e0      	b.n	8000d84 <StartMotorControlTask+0x8>
 8000dc2:	bf00      	nop
 8000dc4:	20000180 	.word	0x20000180
 8000dc8:	20000184 	.word	0x20000184
 8000dcc:	3fe66666 	.word	0x3fe66666

08000dd0 <StartCanTask>:
  }
}

void StartCanTask(void const * argument)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  HAL_CAN_Start(&hcan1);
 8000dd8:	4828      	ldr	r0, [pc, #160]	@ (8000e7c <StartCanTask+0xac>)
 8000dda:	f002 f98c 	bl	80030f6 <HAL_CAN_Start>
  //Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000dde:	2102      	movs	r1, #2
 8000de0:	4826      	ldr	r0, [pc, #152]	@ (8000e7c <StartCanTask+0xac>)
 8000de2:	f002 fbbe 	bl	8003562 <HAL_CAN_ActivateNotification>
  /* Infinite loop */
  for(;;)
  {
	if(sprayerSystemDataFlag == 1)
 8000de6:	4b26      	ldr	r3, [pc, #152]	@ (8000e80 <StartCanTask+0xb0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d11f      	bne.n	8000e2e <StartCanTask+0x5e>
	{
		motorBasePosition = (RxData[0]<<8) | RxData[1];
 8000dee:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <StartCanTask+0xb4>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	4a23      	ldr	r2, [pc, #140]	@ (8000e84 <StartCanTask+0xb4>)
 8000df6:	7852      	ldrb	r2, [r2, #1]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	4a23      	ldr	r2, [pc, #140]	@ (8000e88 <StartCanTask+0xb8>)
 8000dfc:	6013      	str	r3, [r2, #0]
		motorTopPosition = (RxData[2] << 8) | RxData[3];
 8000dfe:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <StartCanTask+0xb4>)
 8000e00:	789b      	ldrb	r3, [r3, #2]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	4a1f      	ldr	r2, [pc, #124]	@ (8000e84 <StartCanTask+0xb4>)
 8000e06:	78d2      	ldrb	r2, [r2, #3]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	4a20      	ldr	r2, [pc, #128]	@ (8000e8c <StartCanTask+0xbc>)
 8000e0c:	6013      	str	r3, [r2, #0]
		pumpStatus = RxData[4];
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <StartCanTask+0xb4>)
 8000e10:	791b      	ldrb	r3, [r3, #4]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <StartCanTask+0xc0>)
 8000e16:	601a      	str	r2, [r3, #0]
		blowerStatus = RxData[5];
 8000e18:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <StartCanTask+0xb4>)
 8000e1a:	795b      	ldrb	r3, [r3, #5]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <StartCanTask+0xc4>)
 8000e20:	601a      	str	r2, [r3, #0]
		servo_move_flag = 1;
 8000e22:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <StartCanTask+0xc8>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	601a      	str	r2, [r3, #0]
		sprayerSystemDataFlag = 0;
 8000e28:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <StartCanTask+0xb0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
	}

    static uint32_t lastFeedbackTime = 0;
    if (osKernelSysTick() - lastFeedbackTime >= 30000) {
 8000e2e:	f006 fff1 	bl	8007e14 <osKernelSysTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <StartCanTask+0xcc>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d906      	bls.n	8000e50 <StartCanTask+0x80>
      SendFeedbackDataOverCAN();
 8000e42:	f7ff fe89 	bl	8000b58 <SendFeedbackDataOverCAN>
      lastFeedbackTime = osKernelSysTick();
 8000e46:	f006 ffe5 	bl	8007e14 <osKernelSysTick>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a13      	ldr	r2, [pc, #76]	@ (8000e9c <StartCanTask+0xcc>)
 8000e4e:	6013      	str	r3, [r2, #0]
    }
	static uint32_t lastADCTime = 0;
	if (osKernelSysTick() - lastADCTime >= 30000){
 8000e50:	f006 ffe0 	bl	8007e14 <osKernelSysTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <StartCanTask+0xd0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d906      	bls.n	8000e72 <StartCanTask+0xa2>
		SendADCDataOverCAN();
 8000e64:	f7ff fec8 	bl	8000bf8 <SendADCDataOverCAN>
		lastADCTime = osKernelSysTick();
 8000e68:	f006 ffd4 	bl	8007e14 <osKernelSysTick>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea0 <StartCanTask+0xd0>)
 8000e70:	6013      	str	r3, [r2, #0]
	}
    osDelay(500);
 8000e72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e76:	f007 f829 	bl	8007ecc <osDelay>
  {
 8000e7a:	e7b4      	b.n	8000de6 <StartCanTask+0x16>
 8000e7c:	20000158 	.word	0x20000158
 8000e80:	20000154 	.word	0x20000154
 8000e84:	2000014c 	.word	0x2000014c
 8000e88:	20000188 	.word	0x20000188
 8000e8c:	20000184 	.word	0x20000184
 8000e90:	2000018c 	.word	0x2000018c
 8000e94:	20000190 	.word	0x20000190
 8000e98:	20000180 	.word	0x20000180
 8000e9c:	20000468 	.word	0x20000468
 8000ea0:	2000046c 	.word	0x2000046c

08000ea4 <StartSensorTask>:
  }
}

void StartSensorTask(void const * argument)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8000eac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000eb0:	f007 f80c 	bl	8007ecc <osDelay>
 8000eb4:	e7fa      	b.n	8000eac <StartSensorTask+0x8>
	...

08000eb8 <StartSwitchMonitoringTask>:
  }
}

void StartSwitchMonitoringTask(void const * argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08e      	sub	sp, #56	@ 0x38
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint8_t switchData[8] = {0}; // CAN message data buffer
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t lastSwitchTime = osKernelSysTick(); // Track last transmission time
 8000ec8:	f006 ffa4 	bl	8007e14 <osKernelSysTick>
 8000ecc:	6378      	str	r0, [r7, #52]	@ 0x34

  for (;;)
  {
    // Read GPIO states
    uint8_t systemSwitch = HAL_GPIO_ReadPin(systemSwitch_GPIO_Port, systemSwitch_Pin);
 8000ece:	2104      	movs	r1, #4
 8000ed0:	483b      	ldr	r0, [pc, #236]	@ (8000fc0 <StartSwitchMonitoringTask+0x108>)
 8000ed2:	f003 fa6d 	bl	80043b0 <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t selectorBypass = HAL_GPIO_ReadPin(bypassSwitch_GPIO_Port, bypassSwitch_Pin);
 8000edc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ee0:	4838      	ldr	r0, [pc, #224]	@ (8000fc4 <StartSwitchMonitoringTask+0x10c>)
 8000ee2:	f003 fa65 	bl	80043b0 <HAL_GPIO_ReadPin>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
//    uint8_t emergencySwitch = HAL_GPIO_ReadPin(emergencySwitch, EMERGENCY_SWITCH_PIN);
    uint8_t dipS1 = HAL_GPIO_ReadPin(dipSwitch1_GPIO_Port, dipSwitch1_Pin);
 8000eec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ef0:	4834      	ldr	r0, [pc, #208]	@ (8000fc4 <StartSwitchMonitoringTask+0x10c>)
 8000ef2:	f003 fa5d 	bl	80043b0 <HAL_GPIO_ReadPin>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    uint8_t dipS2 = HAL_GPIO_ReadPin(dipSwitch2_GPIO_Port, dipSwitch2_Pin);
 8000efc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f04:	f003 fa54 	bl	80043b0 <HAL_GPIO_ReadPin>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    uint8_t alarmStatusBase = HAL_GPIO_ReadPin(alarmSigBase_GPIO_Port, alarmSigBase_Pin);
 8000f0e:	2120      	movs	r1, #32
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f14:	f003 fa4c 	bl	80043b0 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t alarmStatusTop = HAL_GPIO_ReadPin(alarmSigTop_GPIO_Port, alarmSigTop_Pin);
 8000f1e:	2110      	movs	r1, #16
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f24:	f003 fa44 	bl	80043b0 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Pack switch states into CAN message
    switchData[0] = systemSwitch;
 8000f2e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f32:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    switchData[1] = selectorBypass;
 8000f36:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000f3a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    switchData[2] = 0; //Reserved Emergency Switch
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switchData[3] = dipS1;
 8000f44:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    switchData[4] = dipS2;
 8000f4c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000f50:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    switchData[5] = alarmStatusBase;
 8000f54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f58:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    switchData[6] = alarmStatusTop;
 8000f5c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000f60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    switchData[7] = 0; // Reserved
 8000f64:	2300      	movs	r3, #0
 8000f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    // Send CAN message every 1 second
    if (osKernelSysTick() - lastSwitchTime >= 5000) // Check if 1 second has passed
 8000f6a:	f006 ff53 	bl	8007e14 <osKernelSysTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d91b      	bls.n	8000fb4 <StartSwitchMonitoringTask+0xfc>
    {
      CAN_TxHeaderTypeDef TxHeader;
      uint32_t TxMailbox;
      TxHeader.StdId = 0x766; // CAN ID for switch monitoring data
 8000f7c:	f240 7366 	movw	r3, #1894	@ 0x766
 8000f80:	60fb      	str	r3, [r7, #12]
      TxHeader.ExtId = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
      TxHeader.RTR = CAN_RTR_DATA;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
      TxHeader.IDE = CAN_ID_STD;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
      TxHeader.DLC = 8; // Data length code (8 bytes)
 8000f8e:	2308      	movs	r3, #8
 8000f90:	61fb      	str	r3, [r7, #28]

      if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, switchData, &TxMailbox) != HAL_OK)
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000f9a:	f107 010c 	add.w	r1, r7, #12
 8000f9e:	480a      	ldr	r0, [pc, #40]	@ (8000fc8 <StartSwitchMonitoringTask+0x110>)
 8000fa0:	f002 f8ed 	bl	800317e <HAL_CAN_AddTxMessage>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <StartSwitchMonitoringTask+0xf6>
      {
        Error_Handler(); // Handle transmission error
 8000faa:	f000 fa65 	bl	8001478 <Error_Handler>
      }

      lastSwitchTime = osKernelSysTick(); // Update last transmission time
 8000fae:	f006 ff31 	bl	8007e14 <osKernelSysTick>
 8000fb2:	6378      	str	r0, [r7, #52]	@ 0x34
    }

    osDelay(500); // Delay to avoid busy-waiting
 8000fb4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fb8:	f006 ff88 	bl	8007ecc <osDelay>
  {
 8000fbc:	e787      	b.n	8000ece <StartSwitchMonitoringTask+0x16>
 8000fbe:	bf00      	nop
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	20000158 	.word	0x20000158

08000fcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b4d      	ldr	r3, [pc, #308]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	4a4c      	ldr	r2, [pc, #304]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fee:	4b4a      	ldr	r3, [pc, #296]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffa:	4b47      	ldr	r3, [pc, #284]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a46      	ldr	r2, [pc, #280]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b44      	ldr	r3, [pc, #272]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b41      	ldr	r3, [pc, #260]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a40      	ldr	r2, [pc, #256]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b3e      	ldr	r3, [pc, #248]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	4b3b      	ldr	r3, [pc, #236]	@ (8001118 <MX_GPIO_Init+0x14c>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	4a3a      	ldr	r2, [pc, #232]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001036:	4b38      	ldr	r3, [pc, #224]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|servoDirTop_Pin|servoDirBase_Pin|led1_Pin
 8001042:	2200      	movs	r2, #0
 8001044:	f240 610e 	movw	r1, #1550	@ 0x60e
 8001048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104c:	f003 f9c8 	bl	80043e0 <HAL_GPIO_WritePin>
                          |led2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, servoEnableTop_Pin|servoEnableBase_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001056:	4831      	ldr	r0, [pc, #196]	@ (800111c <MX_GPIO_Init+0x150>)
 8001058:	f003 f9c2 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, solenoidTop_Pin|solenoidBase_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	21c0      	movs	r1, #192	@ 0xc0
 8001060:	482f      	ldr	r0, [pc, #188]	@ (8001120 <MX_GPIO_Init+0x154>)
 8001062:	f003 f9bd 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 servoDirTop_Pin servoDirBase_Pin led1_Pin
                           led2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|servoDirTop_Pin|servoDirBase_Pin|led1_Pin
 8001066:	f240 630e 	movw	r3, #1550	@ 0x60e
 800106a:	617b      	str	r3, [r7, #20]
                          |led2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001082:	f003 f81b 	bl	80040bc <HAL_GPIO_Init>

  /*Configure GPIO pins : alarmSigTop_Pin alarmSigBase_Pin dipSwitch2_Pin */
  GPIO_InitStruct.Pin = alarmSigTop_Pin|alarmSigBase_Pin|dipSwitch2_Pin;
 8001086:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109e:	f003 f80d 	bl	80040bc <HAL_GPIO_Init>

  /*Configure GPIO pin : systemSwitch_Pin */
  GPIO_InitStruct.Pin = systemSwitch_Pin;
 80010a2:	2304      	movs	r3, #4
 80010a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(systemSwitch_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4819      	ldr	r0, [pc, #100]	@ (800111c <MX_GPIO_Init+0x150>)
 80010b6:	f003 f801 	bl	80040bc <HAL_GPIO_Init>

  /*Configure GPIO pins : servoEnableTop_Pin servoEnableBase_Pin */
  GPIO_InitStruct.Pin = servoEnableTop_Pin|servoEnableBase_Pin;
 80010ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4812      	ldr	r0, [pc, #72]	@ (800111c <MX_GPIO_Init+0x150>)
 80010d4:	f002 fff2 	bl	80040bc <HAL_GPIO_Init>

  /*Configure GPIO pins : solenoidTop_Pin solenoidBase_Pin */
  GPIO_InitStruct.Pin = solenoidTop_Pin|solenoidBase_Pin;
 80010d8:	23c0      	movs	r3, #192	@ 0xc0
 80010da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	480c      	ldr	r0, [pc, #48]	@ (8001120 <MX_GPIO_Init+0x154>)
 80010f0:	f002 ffe4 	bl	80040bc <HAL_GPIO_Init>

  /*Configure GPIO pins : bypassSwitch_Pin dipSwitch1_Pin */
  GPIO_InitStruct.Pin = bypassSwitch_Pin|dipSwitch1_Pin;
 80010f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_GPIO_Init+0x154>)
 800110a:	f002 ffd7 	bl	80040bc <HAL_GPIO_Init>

}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	@ 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	48000400 	.word	0x48000400
 8001120:	48000800 	.word	0x48000800

08001124 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <MX_I2C1_Init+0x74>)
 800112a:	4a1c      	ldr	r2, [pc, #112]	@ (800119c <MX_I2C1_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800112e:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001130:	4a1b      	ldr	r2, [pc, #108]	@ (80011a0 <MX_I2C1_Init+0x7c>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001134:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <MX_I2C1_Init+0x74>)
 800113c:	2201      	movs	r2, #1
 800113e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001140:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001146:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001158:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <MX_I2C1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115e:	480e      	ldr	r0, [pc, #56]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001160:	f003 f956 	bl	8004410 <HAL_I2C_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800116a:	f000 f985 	bl	8001478 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800116e:	2100      	movs	r1, #0
 8001170:	4809      	ldr	r0, [pc, #36]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001172:	f003 f9e8 	bl	8004546 <HAL_I2CEx_ConfigAnalogFilter>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800117c:	f000 f97c 	bl	8001478 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001180:	2100      	movs	r1, #0
 8001182:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001184:	f003 fa2a 	bl	80045dc <HAL_I2CEx_ConfigDigitalFilter>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800118e:	f000 f973 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000470 	.word	0x20000470
 800119c:	40005400 	.word	0x40005400
 80011a0:	00b07cb4 	.word	0x00b07cb4

080011a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0a4      	sub	sp, #144	@ 0x90
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2268      	movs	r2, #104	@ 0x68
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f008 f907 	bl	80093d8 <memset>
  if(i2cHandle->Instance==I2C1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a20      	ldr	r2, [pc, #128]	@ (8001250 <HAL_I2C_MspInit+0xac>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d139      	bne.n	8001248 <HAL_I2C_MspInit+0xa4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011d4:	2340      	movs	r3, #64	@ 0x40
 80011d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011d8:	2300      	movs	r3, #0
 80011da:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 f915 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011ec:	f000 f944 	bl	8001478 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <HAL_I2C_MspInit+0xb0>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	4a17      	ldr	r2, [pc, #92]	@ (8001254 <HAL_I2C_MspInit+0xb0>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fc:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <HAL_I2C_MspInit+0xb0>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001208:	23c0      	movs	r3, #192	@ 0xc0
 800120a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120c:	2312      	movs	r3, #18
 800120e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121e:	2304      	movs	r3, #4
 8001220:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001228:	4619      	mov	r1, r3
 800122a:	480b      	ldr	r0, [pc, #44]	@ (8001258 <HAL_I2C_MspInit+0xb4>)
 800122c:	f002 ff46 	bl	80040bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001230:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <HAL_I2C_MspInit+0xb0>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001234:	4a07      	ldr	r2, [pc, #28]	@ (8001254 <HAL_I2C_MspInit+0xb0>)
 8001236:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800123a:	6593      	str	r3, [r2, #88]	@ 0x58
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <HAL_I2C_MspInit+0xb0>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001248:	bf00      	nop
 800124a:	3790      	adds	r7, #144	@ 0x90
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40005400 	.word	0x40005400
 8001254:	40021000 	.word	0x40021000
 8001258:	48000400 	.word	0x48000400

0800125c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001260:	f000 fc5a 	bl	8001b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001264:	f000 f816 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001268:	f7ff feb0 	bl	8000fcc <MX_GPIO_Init>
  MX_DMA_Init();
 800126c:	f7ff fb8c 	bl	8000988 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001270:	f000 fb24 	bl	80018bc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001274:	f7ff f92c 	bl	80004d0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001278:	f7ff fac4 	bl	8000804 <MX_CAN1_Init>
  MX_I2C1_Init();
 800127c:	f7ff ff52 	bl	8001124 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001280:	f000 f900 	bl	8001484 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001284:	f000 fa70 	bl	8001768 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001288:	f7ff fbc6 	bl	8000a18 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800128c:	f006 fdbb 	bl	8007e06 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <main+0x34>

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b096      	sub	sp, #88	@ 0x58
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	2244      	movs	r2, #68	@ 0x44
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f008 f898 	bl	80093d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012ba:	f003 f9e9 	bl	8004690 <HAL_PWREx_ControlVoltageScaling>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012c4:	f000 f8d8 	bl	8001478 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c8:	2302      	movs	r3, #2
 80012ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80012d2:	2340      	movs	r3, #64	@ 0x40
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d6:	2302      	movs	r3, #2
 80012d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012da:	2302      	movs	r3, #2
 80012dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80012e2:	2310      	movs	r3, #16
 80012e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012e6:	2307      	movs	r3, #7
 80012e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012ea:	2302      	movs	r3, #2
 80012ec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80012ee:	2304      	movs	r3, #4
 80012f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 fa20 	bl	800473c <HAL_RCC_OscConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001302:	f000 f8b9 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001306:	230f      	movs	r3, #15
 8001308:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130a:	2303      	movs	r3, #3
 800130c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001318:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800131c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	2103      	movs	r1, #3
 8001322:	4618      	mov	r0, r3
 8001324:	f003 fe1e 	bl	8004f64 <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800132e:	f000 f8a3 	bl	8001478 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3758      	adds	r7, #88	@ 0x58
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <Set_Motor_Direction>:

/* USER CODE BEGIN 4 */

void Set_Motor_Direction(uint8_t direction) {
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
    if (direction == 1) {
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d10c      	bne.n	8001364 <Set_Motor_Direction+0x2a>
        HAL_GPIO_WritePin(servoDirTop_GPIO_Port, servoDirTop_Pin, GPIO_PIN_SET); // Forward
 800134a:	2201      	movs	r2, #1
 800134c:	2104      	movs	r1, #4
 800134e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001352:	f003 f845 	bl	80043e0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(servoDirBase_GPIO_Port, servoDirBase_Pin, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	2108      	movs	r1, #8
 800135a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800135e:	f003 f83f 	bl	80043e0 <HAL_GPIO_WritePin>
 8001362:	e00b      	b.n	800137c <Set_Motor_Direction+0x42>
    } else {
        HAL_GPIO_WritePin(servoDirTop_GPIO_Port, servoDirTop_Pin, GPIO_PIN_SET); // Forward
 8001364:	2201      	movs	r2, #1
 8001366:	2104      	movs	r1, #4
 8001368:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136c:	f003 f838 	bl	80043e0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(servoDirBase_GPIO_Port, servoDirBase_Pin, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2108      	movs	r1, #8
 8001374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001378:	f003 f832 	bl	80043e0 <HAL_GPIO_WritePin>
    }
    HAL_Delay(1); // Wait for at least 5 µs (adjust as needed)
 800137c:	2001      	movs	r0, #1
 800137e:	f000 fc03 	bl	8001b88 <HAL_Delay>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <Enable_Motor>:

void Enable_Motor(uint8_t enable) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
    if (enable == 1) {
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d10c      	bne.n	80013b6 <Enable_Motor+0x2a>
        HAL_GPIO_WritePin(servoEnableTop_GPIO_Port, servoEnableTop_Pin, GPIO_PIN_SET); // Enable motor
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013a2:	480d      	ldr	r0, [pc, #52]	@ (80013d8 <Enable_Motor+0x4c>)
 80013a4:	f003 f81c 	bl	80043e0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(servoEnableBase_GPIO_Port, servoEnableBase_Pin, GPIO_PIN_SET); // Enable motor
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013ae:	480a      	ldr	r0, [pc, #40]	@ (80013d8 <Enable_Motor+0x4c>)
 80013b0:	f003 f816 	bl	80043e0 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(servoEnableTop_GPIO_Port, servoEnableTop_Pin, GPIO_PIN_RESET); // Enable motor
        HAL_GPIO_WritePin(servoEnableBase_GPIO_Port, servoEnableBase_Pin, GPIO_PIN_RESET); // Enable motor
    }
}
 80013b4:	e00b      	b.n	80013ce <Enable_Motor+0x42>
        HAL_GPIO_WritePin(servoEnableTop_GPIO_Port, servoEnableTop_Pin, GPIO_PIN_RESET); // Enable motor
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013bc:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <Enable_Motor+0x4c>)
 80013be:	f003 f80f 	bl	80043e0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(servoEnableBase_GPIO_Port, servoEnableBase_Pin, GPIO_PIN_RESET); // Enable motor
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013c8:	4803      	ldr	r0, [pc, #12]	@ (80013d8 <Enable_Motor+0x4c>)
 80013ca:	f003 f809 	bl	80043e0 <HAL_GPIO_WritePin>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	48000400 	.word	0x48000400

080013dc <Generate_Steps>:

void Generate_Steps(uint32_t num_steps, uint8_t direction) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
    // Set the direction
    Set_Motor_Direction(direction);
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ffa5 	bl	800133a <Set_Motor_Direction>

    // Enable the motor
    Enable_Motor(1);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff ffcb 	bl	800138c <Enable_Motor>

    // Enable PWM
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013f6:	2100      	movs	r1, #0
 80013f8:	480d      	ldr	r0, [pc, #52]	@ (8001430 <Generate_Steps+0x54>)
 80013fa:	f004 fd1f 	bl	8005e3c <HAL_TIM_PWM_Start>

    // Generate the required number of steps
    for (uint32_t i = 0; i < num_steps; i++) {
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	e005      	b.n	8001410 <Generate_Steps+0x34>
        // Wait for the pulse width (10 µs)
        HAL_Delay(1); // Adjust delay as needed
 8001404:	2001      	movs	r0, #1
 8001406:	f000 fbbf 	bl	8001b88 <HAL_Delay>
    for (uint32_t i = 0; i < num_steps; i++) {
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3301      	adds	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3f5      	bcc.n	8001404 <Generate_Steps+0x28>
    }

    // Disable PWM
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001418:	2100      	movs	r1, #0
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <Generate_Steps+0x54>)
 800141c:	f004 fdf4 	bl	8006008 <HAL_TIM_PWM_Stop>

    // Disable the motor (optional)
    Enable_Motor(0);
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff ffb3 	bl	800138c <Enable_Motor>
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000574 	.word	0x20000574

08001434 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	isADCFinished = 1;
 800143c:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <HAL_ADC_ConvCpltCallback+0x1c>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	2000007c 	.word	0x2000007c

08001454 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d101      	bne.n	800146a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001466:	f000 fb6f 	bl	8001b48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40012c00 	.word	0x40012c00

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <Error_Handler+0x8>

08001484 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <MX_SPI2_Init+0x74>)
 800148a:	4a1c      	ldr	r2, [pc, #112]	@ (80014fc <MX_SPI2_Init+0x78>)
 800148c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_SPI2_Init+0x74>)
 8001490:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001494:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001496:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <MX_SPI2_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <MX_SPI2_Init+0x74>)
 800149e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a4:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <MX_SPI2_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014aa:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <MX_SPI2_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <MX_SPI2_Init+0x74>)
 80014b2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <MX_SPI2_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <MX_SPI2_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <MX_SPI2_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <MX_SPI2_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <MX_SPI2_Init+0x74>)
 80014d2:	2207      	movs	r2, #7
 80014d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <MX_SPI2_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <MX_SPI2_Init+0x74>)
 80014de:	2208      	movs	r2, #8
 80014e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_SPI2_Init+0x74>)
 80014e4:	f004 faf2 	bl	8005acc <HAL_SPI_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80014ee:	f7ff ffc3 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200004c4 	.word	0x200004c4
 80014fc:	40003800 	.word	0x40003800

08001500 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a17      	ldr	r2, [pc, #92]	@ (800157c <HAL_SPI_MspInit+0x7c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d128      	bne.n	8001574 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001522:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <HAL_SPI_MspInit+0x80>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001526:	4a16      	ldr	r2, [pc, #88]	@ (8001580 <HAL_SPI_MspInit+0x80>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800152c:	6593      	str	r3, [r2, #88]	@ 0x58
 800152e:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <HAL_SPI_MspInit+0x80>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <HAL_SPI_MspInit+0x80>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	4a10      	ldr	r2, [pc, #64]	@ (8001580 <HAL_SPI_MspInit+0x80>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <HAL_SPI_MspInit+0x80>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = canSpiNss_Pin|canSpiSck_Pin|canSpiMiso_Pin|canSpiMosi_Pin;
 8001552:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001564:	2305      	movs	r3, #5
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <HAL_SPI_MspInit+0x84>)
 8001570:	f002 fda4 	bl	80040bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	@ 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40003800 	.word	0x40003800
 8001580:	40021000 	.word	0x40021000
 8001584:	48000400 	.word	0x48000400

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_MspInit+0x4c>)
 8001590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001592:	4a10      	ldr	r2, [pc, #64]	@ (80015d4 <HAL_MspInit+0x4c>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6613      	str	r3, [r2, #96]	@ 0x60
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <HAL_MspInit+0x4c>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015aa:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	210f      	movs	r1, #15
 80015c2:	f06f 0001 	mvn.w	r0, #1
 80015c6:	f002 fad9 	bl	8003b7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000

080015d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	@ 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015e6:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <HAL_InitTick+0xcc>)
 80015e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ea:	4a2e      	ldr	r2, [pc, #184]	@ (80016a4 <HAL_InitTick+0xcc>)
 80015ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015f2:	4b2c      	ldr	r3, [pc, #176]	@ (80016a4 <HAL_InitTick+0xcc>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015fe:	f107 020c 	add.w	r2, r7, #12
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fe6f 	bl	80052ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800160e:	f003 fe57 	bl	80052c0 <HAL_RCC_GetPCLK2Freq>
 8001612:	4603      	mov	r3, r0
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800161a:	4a23      	ldr	r2, [pc, #140]	@ (80016a8 <HAL_InitTick+0xd0>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9b      	lsrs	r3, r3, #18
 8001622:	3b01      	subs	r3, #1
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001626:	4b21      	ldr	r3, [pc, #132]	@ (80016ac <HAL_InitTick+0xd4>)
 8001628:	4a21      	ldr	r2, [pc, #132]	@ (80016b0 <HAL_InitTick+0xd8>)
 800162a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800162c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <HAL_InitTick+0xd4>)
 800162e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001632:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001634:	4a1d      	ldr	r2, [pc, #116]	@ (80016ac <HAL_InitTick+0xd4>)
 8001636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001638:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800163a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <HAL_InitTick+0xd4>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <HAL_InitTick+0xd4>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <HAL_InitTick+0xd4>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800164c:	4817      	ldr	r0, [pc, #92]	@ (80016ac <HAL_InitTick+0xd4>)
 800164e:	f004 fae0 	bl	8005c12 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001658:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800165c:	2b00      	cmp	r3, #0
 800165e:	d11b      	bne.n	8001698 <HAL_InitTick+0xc0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001660:	4812      	ldr	r0, [pc, #72]	@ (80016ac <HAL_InitTick+0xd4>)
 8001662:	f004 fb37 	bl	8005cd4 <HAL_TIM_Base_Start_IT>
 8001666:	4603      	mov	r3, r0
 8001668:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800166c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001670:	2b00      	cmp	r3, #0
 8001672:	d111      	bne.n	8001698 <HAL_InitTick+0xc0>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001674:	2019      	movs	r0, #25
 8001676:	f002 fa9d 	bl	8003bb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d808      	bhi.n	8001692 <HAL_InitTick+0xba>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	2019      	movs	r0, #25
 8001686:	f002 fa79 	bl	8003b7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800168a:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <HAL_InitTick+0xdc>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	e002      	b.n	8001698 <HAL_InitTick+0xc0>
      }
      else
      {
        status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001698:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800169c:	4618      	mov	r0, r3
 800169e:	3730      	adds	r7, #48	@ 0x30
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000
 80016a8:	431bde83 	.word	0x431bde83
 80016ac:	20000528 	.word	0x20000528
 80016b0:	40012c00 	.word	0x40012c00
 80016b4:	20000004 	.word	0x20000004

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <NMI_Handler+0x4>

080016c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <MemManage_Handler+0x4>

080016d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <UsageFault_Handler+0x4>

080016e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <DMA1_Channel1_IRQHandler+0x10>)
 80016f6:	f002 fc02 	bl	8003efe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200000e8 	.word	0x200000e8

08001704 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <DMA1_Channel2_IRQHandler+0x10>)
 800170a:	f002 fbf8 	bl	8003efe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000690 	.word	0x20000690

08001718 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <DMA1_Channel3_IRQHandler+0x10>)
 800171e:	f002 fbee 	bl	8003efe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000648 	.word	0x20000648

0800172c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <CAN1_RX0_IRQHandler+0x10>)
 8001732:	f001 ff3c 	bl	80035ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000158 	.word	0x20000158

08001740 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001746:	f004 fce7 	bl	8006118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000528 	.word	0x20000528

08001754 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <USART3_IRQHandler+0x10>)
 800175a:	f005 fb19 	bl	8006d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200005c0 	.word	0x200005c0

08001768 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	@ 0x28
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177a:	463b      	mov	r3, r7
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
 8001788:	615a      	str	r2, [r3, #20]
 800178a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800178c:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <MX_TIM2_Init+0xac>)
 800178e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001794:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <MX_TIM2_Init+0xac>)
 8001796:	223f      	movs	r2, #63	@ 0x3f
 8001798:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179a:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <MX_TIM2_Init+0xac>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80017a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <MX_TIM2_Init+0xac>)
 80017a2:	2209      	movs	r2, #9
 80017a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <MX_TIM2_Init+0xac>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <MX_TIM2_Init+0xac>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017b2:	4818      	ldr	r0, [pc, #96]	@ (8001814 <MX_TIM2_Init+0xac>)
 80017b4:	f004 faea 	bl	8005d8c <HAL_TIM_PWM_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80017be:	f7ff fe5b 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	4810      	ldr	r0, [pc, #64]	@ (8001814 <MX_TIM2_Init+0xac>)
 80017d2:	f005 fa03 	bl	8006bdc <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80017dc:	f7ff fe4c 	bl	8001478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e0:	2360      	movs	r3, #96	@ 0x60
 80017e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5; //Set 5 for 50% duty cycle
 80017e4:	2305      	movs	r3, #5
 80017e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f0:	463b      	mov	r3, r7
 80017f2:	2200      	movs	r2, #0
 80017f4:	4619      	mov	r1, r3
 80017f6:	4807      	ldr	r0, [pc, #28]	@ (8001814 <MX_TIM2_Init+0xac>)
 80017f8:	f004 fd96 	bl	8006328 <HAL_TIM_PWM_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001802:	f7ff fe39 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001806:	4803      	ldr	r0, [pc, #12]	@ (8001814 <MX_TIM2_Init+0xac>)
 8001808:	f000 f824 	bl	8001854 <HAL_TIM_MspPostInit>

}
 800180c:	bf00      	nop
 800180e:	3728      	adds	r7, #40	@ 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000574 	.word	0x20000574

08001818 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001828:	d10b      	bne.n	8001842 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800182a:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <HAL_TIM_PWM_MspInit+0x38>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182e:	4a08      	ldr	r2, [pc, #32]	@ (8001850 <HAL_TIM_PWM_MspInit+0x38>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6593      	str	r3, [r2, #88]	@ 0x58
 8001836:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_TIM_PWM_MspInit+0x38>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000

08001854 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001874:	d11c      	bne.n	80018b0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <HAL_TIM_MspPostInit+0x64>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187a:	4a0f      	ldr	r2, [pc, #60]	@ (80018b8 <HAL_TIM_MspPostInit+0x64>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <HAL_TIM_MspPostInit+0x64>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800188e:	2301      	movs	r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800189e:	2301      	movs	r3, #1
 80018a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ac:	f002 fc06 	bl	80040bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000

080018bc <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <MX_USART3_UART_Init+0x58>)
 80018c2:	4a15      	ldr	r2, [pc, #84]	@ (8001918 <MX_USART3_UART_Init+0x5c>)
 80018c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <MX_USART3_UART_Init+0x58>)
 80018c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_USART3_UART_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <MX_USART3_UART_Init+0x58>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_USART3_UART_Init+0x58>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_USART3_UART_Init+0x58>)
 80018e2:	220c      	movs	r2, #12
 80018e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <MX_USART3_UART_Init+0x58>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_USART3_UART_Init+0x58>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <MX_USART3_UART_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_USART3_UART_Init+0x58>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_USART3_UART_Init+0x58>)
 8001900:	f005 f9f8 	bl	8006cf4 <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800190a:	f7ff fdb5 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200005c0 	.word	0x200005c0
 8001918:	40004800 	.word	0x40004800

0800191c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b0a4      	sub	sp, #144	@ 0x90
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2268      	movs	r2, #104	@ 0x68
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f007 fd4b 	bl	80093d8 <memset>
  if(uartHandle->Instance==USART3)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a4f      	ldr	r2, [pc, #316]	@ (8001a84 <HAL_UART_MspInit+0x168>)
 8001948:	4293      	cmp	r3, r2
 800194a:	f040 8096 	bne.w	8001a7a <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800194e:	2304      	movs	r3, #4
 8001950:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001952:	2300      	movs	r3, #0
 8001954:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fd58 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001966:	f7ff fd87 	bl	8001478 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800196a:	4b47      	ldr	r3, [pc, #284]	@ (8001a88 <HAL_UART_MspInit+0x16c>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196e:	4a46      	ldr	r2, [pc, #280]	@ (8001a88 <HAL_UART_MspInit+0x16c>)
 8001970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001974:	6593      	str	r3, [r2, #88]	@ 0x58
 8001976:	4b44      	ldr	r3, [pc, #272]	@ (8001a88 <HAL_UART_MspInit+0x16c>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	4b41      	ldr	r3, [pc, #260]	@ (8001a88 <HAL_UART_MspInit+0x16c>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001986:	4a40      	ldr	r2, [pc, #256]	@ (8001a88 <HAL_UART_MspInit+0x16c>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800198e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a88 <HAL_UART_MspInit+0x16c>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800199a:	2330      	movs	r3, #48	@ 0x30
 800199c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019b0:	2307      	movs	r3, #7
 80019b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80019ba:	4619      	mov	r1, r3
 80019bc:	4833      	ldr	r0, [pc, #204]	@ (8001a8c <HAL_UART_MspInit+0x170>)
 80019be:	f002 fb7d 	bl	80040bc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80019c2:	4b33      	ldr	r3, [pc, #204]	@ (8001a90 <HAL_UART_MspInit+0x174>)
 80019c4:	4a33      	ldr	r2, [pc, #204]	@ (8001a94 <HAL_UART_MspInit+0x178>)
 80019c6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 80019c8:	4b31      	ldr	r3, [pc, #196]	@ (8001a90 <HAL_UART_MspInit+0x174>)
 80019ca:	2202      	movs	r2, #2
 80019cc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ce:	4b30      	ldr	r3, [pc, #192]	@ (8001a90 <HAL_UART_MspInit+0x174>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a90 <HAL_UART_MspInit+0x174>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019da:	4b2d      	ldr	r3, [pc, #180]	@ (8001a90 <HAL_UART_MspInit+0x174>)
 80019dc:	2280      	movs	r2, #128	@ 0x80
 80019de:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a90 <HAL_UART_MspInit+0x174>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <HAL_UART_MspInit+0x174>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80019ec:	4b28      	ldr	r3, [pc, #160]	@ (8001a90 <HAL_UART_MspInit+0x174>)
 80019ee:	2220      	movs	r2, #32
 80019f0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019f2:	4b27      	ldr	r3, [pc, #156]	@ (8001a90 <HAL_UART_MspInit+0x174>)
 80019f4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80019f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80019fa:	4825      	ldr	r0, [pc, #148]	@ (8001a90 <HAL_UART_MspInit+0x174>)
 80019fc:	f002 f8e8 	bl	8003bd0 <HAL_DMA_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8001a06:	f7ff fd37 	bl	8001478 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a20      	ldr	r2, [pc, #128]	@ (8001a90 <HAL_UART_MspInit+0x174>)
 8001a0e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001a10:	4a1f      	ldr	r2, [pc, #124]	@ (8001a90 <HAL_UART_MspInit+0x174>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001a16:	4b20      	ldr	r3, [pc, #128]	@ (8001a98 <HAL_UART_MspInit+0x17c>)
 8001a18:	4a20      	ldr	r2, [pc, #128]	@ (8001a9c <HAL_UART_MspInit+0x180>)
 8001a1a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <HAL_UART_MspInit+0x17c>)
 8001a1e:	2202      	movs	r2, #2
 8001a20:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a22:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <HAL_UART_MspInit+0x17c>)
 8001a24:	2210      	movs	r2, #16
 8001a26:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <HAL_UART_MspInit+0x17c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <HAL_UART_MspInit+0x17c>)
 8001a30:	2280      	movs	r2, #128	@ 0x80
 8001a32:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a34:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <HAL_UART_MspInit+0x17c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <HAL_UART_MspInit+0x17c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001a40:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <HAL_UART_MspInit+0x17c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a46:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <HAL_UART_MspInit+0x17c>)
 8001a48:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001a4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001a4e:	4812      	ldr	r0, [pc, #72]	@ (8001a98 <HAL_UART_MspInit+0x17c>)
 8001a50:	f002 f8be 	bl	8003bd0 <HAL_DMA_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8001a5a:	f7ff fd0d 	bl	8001478 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a0d      	ldr	r2, [pc, #52]	@ (8001a98 <HAL_UART_MspInit+0x17c>)
 8001a62:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a64:	4a0c      	ldr	r2, [pc, #48]	@ (8001a98 <HAL_UART_MspInit+0x17c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2105      	movs	r1, #5
 8001a6e:	2027      	movs	r0, #39	@ 0x27
 8001a70:	f002 f884 	bl	8003b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a74:	2027      	movs	r0, #39	@ 0x27
 8001a76:	f002 f89d 	bl	8003bb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	3790      	adds	r7, #144	@ 0x90
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40004800 	.word	0x40004800
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	20000648 	.word	0x20000648
 8001a94:	40020030 	.word	0x40020030
 8001a98:	20000690 	.word	0x20000690
 8001a9c:	4002001c 	.word	0x4002001c

08001aa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ad8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa4:	f000 f826 	bl	8001af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa8:	480c      	ldr	r0, [pc, #48]	@ (8001adc <LoopForever+0x6>)
  ldr r1, =_edata
 8001aaa:	490d      	ldr	r1, [pc, #52]	@ (8001ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <LoopForever+0xe>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8001aec <LoopForever+0x16>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ace:	f007 fce1 	bl	8009494 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ad2:	f7ff fbc3 	bl	800125c <main>

08001ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad6:	e7fe      	b.n	8001ad6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ae4:	08009708 	.word	0x08009708
  ldr r2, =_sbss
 8001ae8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001aec:	20001b04 	.word	0x20001b04

08001af0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC1_IRQHandler>
	...

08001af4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <SystemInit+0x20>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <SystemInit+0x20>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b22:	2003      	movs	r0, #3
 8001b24:	f002 f81f 	bl	8003b66 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b28:	200f      	movs	r0, #15
 8001b2a:	f7ff fd55 	bl	80015d8 <HAL_InitTick>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	71fb      	strb	r3, [r7, #7]
 8001b38:	e001      	b.n	8001b3e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b3a:	f7ff fd25 	bl	8001588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_IncTick+0x20>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <HAL_IncTick+0x24>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <HAL_IncTick+0x24>)
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	200006d8 	.word	0x200006d8

08001b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b03      	ldr	r3, [pc, #12]	@ (8001b84 <HAL_GetTick+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	200006d8 	.word	0x200006d8

08001b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff ffee 	bl	8001b70 <HAL_GetTick>
 8001b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d005      	beq.n	8001bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <HAL_Delay+0x44>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bae:	bf00      	nop
 8001bb0:	f7ff ffde 	bl	8001b70 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d8f7      	bhi.n	8001bb0 <HAL_Delay+0x28>
  {
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	609a      	str	r2, [r3, #8]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3360      	adds	r3, #96	@ 0x60
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <LL_ADC_SetOffset+0x44>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c70:	bf00      	nop
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	03fff000 	.word	0x03fff000

08001c80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3360      	adds	r3, #96	@ 0x60
 8001c8e:	461a      	mov	r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3360      	adds	r3, #96	@ 0x60
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	615a      	str	r2, [r3, #20]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b087      	sub	sp, #28
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3330      	adds	r3, #48	@ 0x30
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	4413      	add	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	211f      	movs	r1, #31
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	401a      	ands	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	0e9b      	lsrs	r3, r3, #26
 8001d66:	f003 011f 	and.w	r1, r3, #31
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	431a      	orrs	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d7a:	bf00      	nop
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b087      	sub	sp, #28
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3314      	adds	r3, #20
 8001d96:	461a      	mov	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	0e5b      	lsrs	r3, r3, #25
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	4413      	add	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	0d1b      	lsrs	r3, r3, #20
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	2107      	movs	r1, #7
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	401a      	ands	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	0d1b      	lsrs	r3, r3, #20
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dd0:	bf00      	nop
 8001dd2:	371c      	adds	r7, #28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df4:	43db      	mvns	r3, r3
 8001df6:	401a      	ands	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 0318 	and.w	r3, r3, #24
 8001dfe:	4908      	ldr	r1, [pc, #32]	@ (8001e20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e00:	40d9      	lsrs	r1, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	400b      	ands	r3, r1
 8001e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	0007ffff 	.word	0x0007ffff

08001e24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6093      	str	r3, [r2, #8]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e5c:	d101      	bne.n	8001e62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001eac:	d101      	bne.n	8001eb2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ed0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <LL_ADC_IsEnabled+0x18>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <LL_ADC_IsEnabled+0x1a>
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f22:	f043 0204 	orr.w	r2, r3, #4
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d101      	bne.n	8001f74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e129      	b.n	80021f2 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7fe fb57 	bl	8000660 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff3f 	bl	8001e48 <LL_ADC_IsDeepPowerDownEnabled>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d004      	beq.n	8001fda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff25 	bl	8001e24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff5a 	bl	8001e98 <LL_ADC_IsInternalRegulatorEnabled>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d115      	bne.n	8002016 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff3e 	bl	8001e70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ff4:	4b81      	ldr	r3, [pc, #516]	@ (80021fc <HAL_ADC_Init+0x278>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	099b      	lsrs	r3, r3, #6
 8001ffa:	4a81      	ldr	r2, [pc, #516]	@ (8002200 <HAL_ADC_Init+0x27c>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	099b      	lsrs	r3, r3, #6
 8002002:	3301      	adds	r3, #1
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002008:	e002      	b.n	8002010 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3b01      	subs	r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f9      	bne.n	800200a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ff3c 	bl	8001e98 <LL_ADC_IsInternalRegulatorEnabled>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10d      	bne.n	8002042 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff75 	bl	8001f36 <LL_ADC_REG_IsConversionOngoing>
 800204c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 80c2 	bne.w	80021e0 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 80be 	bne.w	80021e0 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002068:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800206c:	f043 0202 	orr.w	r2, r3, #2
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff35 	bl	8001ee8 <LL_ADC_IsEnabled>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10b      	bne.n	800209c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002084:	485f      	ldr	r0, [pc, #380]	@ (8002204 <HAL_ADC_Init+0x280>)
 8002086:	f7ff ff2f 	bl	8001ee8 <LL_ADC_IsEnabled>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4619      	mov	r1, r3
 8002096:	485c      	ldr	r0, [pc, #368]	@ (8002208 <HAL_ADC_Init+0x284>)
 8002098:	f7ff fd9a 	bl	8001bd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7e5b      	ldrb	r3, [r3, #25]
 80020a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d106      	bne.n	80020d8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ce:	3b01      	subs	r3, #1
 80020d0:	045b      	lsls	r3, r3, #17
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d009      	beq.n	80020f4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	4b44      	ldr	r3, [pc, #272]	@ (800220c <HAL_ADC_Init+0x288>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	69b9      	ldr	r1, [r7, #24]
 8002104:	430b      	orrs	r3, r1
 8002106:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff25 	bl	8001f5c <LL_ADC_INJ_IsConversionOngoing>
 8002112:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d140      	bne.n	800219c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d13d      	bne.n	800219c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7e1b      	ldrb	r3, [r3, #24]
 8002128:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800212a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002132:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002142:	f023 0306 	bic.w	r3, r3, #6
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	430b      	orrs	r3, r1
 800214e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002156:	2b01      	cmp	r3, #1
 8002158:	d118      	bne.n	800218c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002170:	4311      	orrs	r1, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002176:	4311      	orrs	r1, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800217c:	430a      	orrs	r2, r1
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0201 	orr.w	r2, r2, #1
 8002188:	611a      	str	r2, [r3, #16]
 800218a:	e007      	b.n	800219c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d10c      	bne.n	80021be <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f023 010f 	bic.w	r1, r3, #15
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	1e5a      	subs	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80021bc:	e007      	b.n	80021ce <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 020f 	bic.w	r2, r2, #15
 80021cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80021de:	e007      	b.n	80021f0 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e4:	f043 0210 	orr.w	r2, r3, #16
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000000 	.word	0x20000000
 8002200:	053e2d63 	.word	0x053e2d63
 8002204:	50040000 	.word	0x50040000
 8002208:	50040300 	.word	0x50040300
 800220c:	fff0c007 	.word	0xfff0c007

08002210 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fe88 	bl	8001f36 <LL_ADC_REG_IsConversionOngoing>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d167      	bne.n	80022fc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_ADC_Start_DMA+0x2a>
 8002236:	2302      	movs	r3, #2
 8002238:	e063      	b.n	8002302 <HAL_ADC_Start_DMA+0xf2>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 fc78 	bl	8002b38 <ADC_Enable>
 8002248:	4603      	mov	r3, r0
 800224a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800224c:	7dfb      	ldrb	r3, [r7, #23]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d14f      	bne.n	80022f2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002256:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	f023 0206 	bic.w	r2, r3, #6
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800227e:	e002      	b.n	8002286 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800228a:	4a20      	ldr	r2, [pc, #128]	@ (800230c <HAL_ADC_Start_DMA+0xfc>)
 800228c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002292:	4a1f      	ldr	r2, [pc, #124]	@ (8002310 <HAL_ADC_Start_DMA+0x100>)
 8002294:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800229a:	4a1e      	ldr	r2, [pc, #120]	@ (8002314 <HAL_ADC_Start_DMA+0x104>)
 800229c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	221c      	movs	r2, #28
 80022a4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0210 	orr.w	r2, r2, #16
 80022bc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0201 	orr.w	r2, r2, #1
 80022cc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	3340      	adds	r3, #64	@ 0x40
 80022d8:	4619      	mov	r1, r3
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f001 fd2f 	bl	8003d40 <HAL_DMA_Start_IT>
 80022e2:	4603      	mov	r3, r0
 80022e4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fe0f 	bl	8001f0e <LL_ADC_REG_StartConversion>
 80022f0:	e006      	b.n	8002300 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80022fa:	e001      	b.n	8002300 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
 80022fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002300:	7dfb      	ldrb	r3, [r7, #23]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	08002c45 	.word	0x08002c45
 8002310:	08002d1d 	.word	0x08002d1d
 8002314:	08002d39 	.word	0x08002d39

08002318 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0b6      	sub	sp, #216	@ 0xd8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x22>
 800235e:	2302      	movs	r3, #2
 8002360:	e3d5      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x7ce>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fde1 	bl	8001f36 <LL_ADC_REG_IsConversionOngoing>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 83ba 	bne.w	8002af0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d824      	bhi.n	80023d6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	3b02      	subs	r3, #2
 8002392:	2b03      	cmp	r3, #3
 8002394:	d81b      	bhi.n	80023ce <HAL_ADC_ConfigChannel+0x8e>
 8002396:	a201      	add	r2, pc, #4	@ (adr r2, 800239c <HAL_ADC_ConfigChannel+0x5c>)
 8002398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239c:	080023ad 	.word	0x080023ad
 80023a0:	080023b5 	.word	0x080023b5
 80023a4:	080023bd 	.word	0x080023bd
 80023a8:	080023c5 	.word	0x080023c5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80023ac:	230c      	movs	r3, #12
 80023ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023b2:	e010      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80023b4:	2312      	movs	r3, #18
 80023b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023ba:	e00c      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80023bc:	2318      	movs	r3, #24
 80023be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023c2:	e008      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80023c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023cc:	e003      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80023ce:	2306      	movs	r3, #6
 80023d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023d4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80023e4:	f7ff fca3 	bl	8001d2e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fda2 	bl	8001f36 <LL_ADC_REG_IsConversionOngoing>
 80023f2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fdae 	bl	8001f5c <LL_ADC_INJ_IsConversionOngoing>
 8002400:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002404:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002408:	2b00      	cmp	r3, #0
 800240a:	f040 81bf 	bne.w	800278c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800240e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 81ba 	bne.w	800278c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002420:	d10f      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2200      	movs	r2, #0
 800242c:	4619      	mov	r1, r3
 800242e:	f7ff fcaa 	bl	8001d86 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fc51 	bl	8001ce2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002440:	e00e      	b.n	8002460 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6819      	ldr	r1, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	461a      	mov	r2, r3
 8002450:	f7ff fc99 	bl	8001d86 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fc41 	bl	8001ce2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	08db      	lsrs	r3, r3, #3
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b04      	cmp	r3, #4
 8002480:	d00a      	beq.n	8002498 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6919      	ldr	r1, [r3, #16]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002492:	f7ff fbd1 	bl	8001c38 <LL_ADC_SetOffset>
 8002496:	e179      	b.n	800278c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fbee 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10a      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x184>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fbe3 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 80024ba:	4603      	mov	r3, r0
 80024bc:	0e9b      	lsrs	r3, r3, #26
 80024be:	f003 021f 	and.w	r2, r3, #31
 80024c2:	e01e      	b.n	8002502 <HAL_ADC_ConfigChannel+0x1c2>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fbd8 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80024f2:	2320      	movs	r3, #32
 80024f4:	e004      	b.n	8002500 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80024f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250a:	2b00      	cmp	r3, #0
 800250c:	d105      	bne.n	800251a <HAL_ADC_ConfigChannel+0x1da>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	0e9b      	lsrs	r3, r3, #26
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	e018      	b.n	800254c <HAL_ADC_ConfigChannel+0x20c>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800252e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002532:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002536:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800253e:	2320      	movs	r3, #32
 8002540:	e004      	b.n	800254c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002542:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800254c:	429a      	cmp	r2, r3
 800254e:	d106      	bne.n	800255e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2200      	movs	r2, #0
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fba7 	bl	8001cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2101      	movs	r1, #1
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fb8b 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10a      	bne.n	800258a <HAL_ADC_ConfigChannel+0x24a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fb80 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	0e9b      	lsrs	r3, r3, #26
 8002584:	f003 021f 	and.w	r2, r3, #31
 8002588:	e01e      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x288>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2101      	movs	r1, #1
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fb75 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80025a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80025b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e004      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80025bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d105      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x2a0>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0e9b      	lsrs	r3, r3, #26
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	e018      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2d2>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80025f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80025fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002604:	2320      	movs	r3, #32
 8002606:	e004      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002608:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002612:	429a      	cmp	r2, r3
 8002614:	d106      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2200      	movs	r2, #0
 800261c:	2101      	movs	r1, #1
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fb44 	bl	8001cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2102      	movs	r1, #2
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fb28 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002630:	4603      	mov	r3, r0
 8002632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10a      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x310>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2102      	movs	r1, #2
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fb1d 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002646:	4603      	mov	r3, r0
 8002648:	0e9b      	lsrs	r3, r3, #26
 800264a:	f003 021f 	and.w	r2, r3, #31
 800264e:	e01e      	b.n	800268e <HAL_ADC_ConfigChannel+0x34e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2102      	movs	r1, #2
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fb12 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 800265c:	4603      	mov	r3, r0
 800265e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800266e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002672:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002676:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e004      	b.n	800268c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002696:	2b00      	cmp	r3, #0
 8002698:	d105      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x366>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0e9b      	lsrs	r3, r3, #26
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	e014      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x390>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80026b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80026ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80026c2:	2320      	movs	r3, #32
 80026c4:	e004      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80026c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d106      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2200      	movs	r2, #0
 80026da:	2102      	movs	r1, #2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fae5 	bl	8001cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2103      	movs	r1, #3
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fac9 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10a      	bne.n	800270e <HAL_ADC_ConfigChannel+0x3ce>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2103      	movs	r1, #3
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fabe 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002704:	4603      	mov	r3, r0
 8002706:	0e9b      	lsrs	r3, r3, #26
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	e017      	b.n	800273e <HAL_ADC_ConfigChannel+0x3fe>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2103      	movs	r1, #3
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fab3 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002726:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002728:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800272a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002730:	2320      	movs	r3, #32
 8002732:	e003      	b.n	800273c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002734:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002746:	2b00      	cmp	r3, #0
 8002748:	d105      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x416>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0e9b      	lsrs	r3, r3, #26
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	e011      	b.n	800277a <HAL_ADC_ConfigChannel+0x43a>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002764:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002766:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e003      	b.n	800277a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002772:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800277a:	429a      	cmp	r2, r3
 800277c:	d106      	bne.n	800278c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	2103      	movs	r1, #3
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fa90 	bl	8001cac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fba9 	bl	8001ee8 <LL_ADC_IsEnabled>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	f040 813f 	bne.w	8002a1c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6819      	ldr	r1, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	461a      	mov	r2, r3
 80027ac:	f7ff fb16 	bl	8001ddc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4a8e      	ldr	r2, [pc, #568]	@ (80029f0 <HAL_ADC_ConfigChannel+0x6b0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	f040 8130 	bne.w	8002a1c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10b      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x4a4>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0e9b      	lsrs	r3, r3, #26
 80027d2:	3301      	adds	r3, #1
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2b09      	cmp	r3, #9
 80027da:	bf94      	ite	ls
 80027dc:	2301      	movls	r3, #1
 80027de:	2300      	movhi	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	e019      	b.n	8002818 <HAL_ADC_ConfigChannel+0x4d8>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80027f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80027f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80027fc:	2320      	movs	r3, #32
 80027fe:	e003      	b.n	8002808 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002800:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	3301      	adds	r3, #1
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	2b09      	cmp	r3, #9
 8002810:	bf94      	ite	ls
 8002812:	2301      	movls	r3, #1
 8002814:	2300      	movhi	r3, #0
 8002816:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002818:	2b00      	cmp	r3, #0
 800281a:	d079      	beq.n	8002910 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002824:	2b00      	cmp	r3, #0
 8002826:	d107      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x4f8>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	0e9b      	lsrs	r3, r3, #26
 800282e:	3301      	adds	r3, #1
 8002830:	069b      	lsls	r3, r3, #26
 8002832:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002836:	e015      	b.n	8002864 <HAL_ADC_ConfigChannel+0x524>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002848:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800284a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002850:	2320      	movs	r3, #32
 8002852:	e003      	b.n	800285c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	3301      	adds	r3, #1
 800285e:	069b      	lsls	r3, r3, #26
 8002860:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x544>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0e9b      	lsrs	r3, r3, #26
 8002876:	3301      	adds	r3, #1
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	2101      	movs	r1, #1
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	e017      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x574>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002894:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e003      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80028a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	3301      	adds	r3, #1
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	ea42 0103 	orr.w	r1, r2, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <HAL_ADC_ConfigChannel+0x59a>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0e9b      	lsrs	r3, r3, #26
 80028ca:	3301      	adds	r3, #1
 80028cc:	f003 021f 	and.w	r2, r3, #31
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	051b      	lsls	r3, r3, #20
 80028d8:	e018      	b.n	800290c <HAL_ADC_ConfigChannel+0x5cc>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80028e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80028ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80028f2:	2320      	movs	r3, #32
 80028f4:	e003      	b.n	80028fe <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80028f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	f003 021f 	and.w	r2, r3, #31
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800290c:	430b      	orrs	r3, r1
 800290e:	e080      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002918:	2b00      	cmp	r3, #0
 800291a:	d107      	bne.n	800292c <HAL_ADC_ConfigChannel+0x5ec>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0e9b      	lsrs	r3, r3, #26
 8002922:	3301      	adds	r3, #1
 8002924:	069b      	lsls	r3, r3, #26
 8002926:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800292a:	e015      	b.n	8002958 <HAL_ADC_ConfigChannel+0x618>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800293e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002944:	2320      	movs	r3, #32
 8002946:	e003      	b.n	8002950 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	3301      	adds	r3, #1
 8002952:	069b      	lsls	r3, r3, #26
 8002954:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d109      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x638>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	3301      	adds	r3, #1
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	2101      	movs	r1, #1
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	e017      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x668>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	61bb      	str	r3, [r7, #24]
  return result;
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002990:	2320      	movs	r3, #32
 8002992:	e003      	b.n	800299c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	3301      	adds	r3, #1
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	2101      	movs	r1, #1
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	ea42 0103 	orr.w	r1, r2, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10d      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x694>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0e9b      	lsrs	r3, r3, #26
 80029be:	3301      	adds	r3, #1
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	3b1e      	subs	r3, #30
 80029cc:	051b      	lsls	r3, r3, #20
 80029ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	e01d      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x6d0>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	60fb      	str	r3, [r7, #12]
  return result;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d103      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e005      	b.n	80029fc <HAL_ADC_ConfigChannel+0x6bc>
 80029f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	f003 021f 	and.w	r2, r3, #31
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	3b1e      	subs	r3, #30
 8002a0a:	051b      	lsls	r3, r3, #20
 8002a0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a10:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7ff f9b5 	bl	8001d86 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b3d      	ldr	r3, [pc, #244]	@ (8002b18 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d06c      	beq.n	8002b02 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a28:	483c      	ldr	r0, [pc, #240]	@ (8002b1c <HAL_ADC_ConfigChannel+0x7dc>)
 8002a2a:	f7ff f8f7 	bl	8001c1c <LL_ADC_GetCommonPathInternalCh>
 8002a2e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a3a      	ldr	r2, [pc, #232]	@ (8002b20 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d127      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d121      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a35      	ldr	r2, [pc, #212]	@ (8002b24 <HAL_ADC_ConfigChannel+0x7e4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d157      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	482f      	ldr	r0, [pc, #188]	@ (8002b1c <HAL_ADC_ConfigChannel+0x7dc>)
 8002a5e:	f7ff f8ca 	bl	8001bf6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a62:	4b31      	ldr	r3, [pc, #196]	@ (8002b28 <HAL_ADC_ConfigChannel+0x7e8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	099b      	lsrs	r3, r3, #6
 8002a68:	4a30      	ldr	r2, [pc, #192]	@ (8002b2c <HAL_ADC_ConfigChannel+0x7ec>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	099b      	lsrs	r3, r3, #6
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	4613      	mov	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a7c:	e002      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f9      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a8a:	e03a      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a27      	ldr	r2, [pc, #156]	@ (8002b30 <HAL_ADC_ConfigChannel+0x7f0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d113      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10d      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8002b24 <HAL_ADC_ConfigChannel+0x7e4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d12a      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ab0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4819      	ldr	r0, [pc, #100]	@ (8002b1c <HAL_ADC_ConfigChannel+0x7dc>)
 8002ab8:	f7ff f89d 	bl	8001bf6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002abc:	e021      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b34 <HAL_ADC_ConfigChannel+0x7f4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d11c      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ac8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002acc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d116      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a12      	ldr	r2, [pc, #72]	@ (8002b24 <HAL_ADC_ConfigChannel+0x7e4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d111      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ade:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ae2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	480c      	ldr	r0, [pc, #48]	@ (8002b1c <HAL_ADC_ConfigChannel+0x7dc>)
 8002aea:	f7ff f884 	bl	8001bf6 <LL_ADC_SetCommonPathInternalCh>
 8002aee:	e008      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002b0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	37d8      	adds	r7, #216	@ 0xd8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	80080000 	.word	0x80080000
 8002b1c:	50040300 	.word	0x50040300
 8002b20:	c7520000 	.word	0xc7520000
 8002b24:	50040000 	.word	0x50040000
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	053e2d63 	.word	0x053e2d63
 8002b30:	cb840000 	.word	0xcb840000
 8002b34:	80000001 	.word	0x80000001

08002b38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff f9cd 	bl	8001ee8 <LL_ADC_IsEnabled>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d169      	bne.n	8002c28 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	4b36      	ldr	r3, [pc, #216]	@ (8002c34 <ADC_Enable+0xfc>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00d      	beq.n	8002b7e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b66:	f043 0210 	orr.w	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e055      	b.n	8002c2a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f99c 	bl	8001ec0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b88:	482b      	ldr	r0, [pc, #172]	@ (8002c38 <ADC_Enable+0x100>)
 8002b8a:	f7ff f847 	bl	8001c1c <LL_ADC_GetCommonPathInternalCh>
 8002b8e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d013      	beq.n	8002bc0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b98:	4b28      	ldr	r3, [pc, #160]	@ (8002c3c <ADC_Enable+0x104>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	099b      	lsrs	r3, r3, #6
 8002b9e:	4a28      	ldr	r2, [pc, #160]	@ (8002c40 <ADC_Enable+0x108>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	4613      	mov	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bb2:	e002      	b.n	8002bba <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f9      	bne.n	8002bb4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002bc0:	f7fe ffd6 	bl	8001b70 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bc6:	e028      	b.n	8002c1a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff f98b 	bl	8001ee8 <LL_ADC_IsEnabled>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d104      	bne.n	8002be2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff f96f 	bl	8001ec0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002be2:	f7fe ffc5 	bl	8001b70 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d914      	bls.n	8002c1a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d00d      	beq.n	8002c1a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c02:	f043 0210 	orr.w	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0e:	f043 0201 	orr.w	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e007      	b.n	8002c2a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d1cf      	bne.n	8002bc8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	8000003f 	.word	0x8000003f
 8002c38:	50040300 	.word	0x50040300
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	053e2d63 	.word	0x053e2d63

08002c44 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c56:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d14b      	bne.n	8002cf6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c62:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d021      	beq.n	8002cbc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff f843 	bl	8001d08 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d032      	beq.n	8002cee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d12b      	bne.n	8002cee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d11f      	bne.n	8002cee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb2:	f043 0201 	orr.w	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cba:	e018      	b.n	8002cee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d111      	bne.n	8002cee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d105      	bne.n	8002cee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f7fe fba0 	bl	8001434 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cf4:	e00e      	b.n	8002d14 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f7ff fb12 	bl	800232c <HAL_ADC_ErrorCallback>
}
 8002d08:	e004      	b.n	8002d14 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f7ff faf4 	bl	8002318 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d44:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d56:	f043 0204 	orr.w	r2, r3, #4
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f7ff fae4 	bl	800232c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e0ed      	b.n	8002f5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd fd8c 	bl	80008a8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002da0:	f7fe fee6 	bl	8001b70 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002da6:	e012      	b.n	8002dce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002da8:	f7fe fee2 	bl	8001b70 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b0a      	cmp	r3, #10
 8002db4:	d90b      	bls.n	8002dce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2205      	movs	r2, #5
 8002dc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0c5      	b.n	8002f5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0e5      	beq.n	8002da8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0202 	bic.w	r2, r2, #2
 8002dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dec:	f7fe fec0 	bl	8001b70 <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002df2:	e012      	b.n	8002e1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002df4:	f7fe febc 	bl	8001b70 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b0a      	cmp	r3, #10
 8002e00:	d90b      	bls.n	8002e1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2205      	movs	r2, #5
 8002e12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e09f      	b.n	8002f5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e5      	bne.n	8002df4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7e1b      	ldrb	r3, [r3, #24]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d108      	bne.n	8002e42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	e007      	b.n	8002e52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7e5b      	ldrb	r3, [r3, #25]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d108      	bne.n	8002e6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e007      	b.n	8002e7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	7e9b      	ldrb	r3, [r3, #26]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d108      	bne.n	8002e96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0220 	orr.w	r2, r2, #32
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e007      	b.n	8002ea6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0220 	bic.w	r2, r2, #32
 8002ea4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	7edb      	ldrb	r3, [r3, #27]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d108      	bne.n	8002ec0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0210 	bic.w	r2, r2, #16
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	e007      	b.n	8002ed0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0210 	orr.w	r2, r2, #16
 8002ece:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7f1b      	ldrb	r3, [r3, #28]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d108      	bne.n	8002eea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0208 	orr.w	r2, r2, #8
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	e007      	b.n	8002efa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0208 	bic.w	r2, r2, #8
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7f5b      	ldrb	r3, [r3, #29]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d108      	bne.n	8002f14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0204 	orr.w	r2, r2, #4
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	e007      	b.n	8002f24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0204 	bic.w	r2, r2, #4
 8002f22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	ea42 0103 	orr.w	r1, r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	1e5a      	subs	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b087      	sub	sp, #28
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f78:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002f7a:	7cfb      	ldrb	r3, [r7, #19]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d003      	beq.n	8002f88 <HAL_CAN_ConfigFilter+0x26>
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	f040 80aa 	bne.w	80030dc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002f8e:	f043 0201 	orr.w	r2, r3, #1
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d123      	bne.n	800300a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	401a      	ands	r2, r3
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002fe4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	3248      	adds	r2, #72	@ 0x48
 8002fea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ffe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003000:	6979      	ldr	r1, [r7, #20]
 8003002:	3348      	adds	r3, #72	@ 0x48
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d122      	bne.n	8003058 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	431a      	orrs	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003032:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	3248      	adds	r2, #72	@ 0x48
 8003038:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800304c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800304e:	6979      	ldr	r1, [r7, #20]
 8003050:	3348      	adds	r3, #72	@ 0x48
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	440b      	add	r3, r1
 8003056:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	43db      	mvns	r3, r3
 800306a:	401a      	ands	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003072:	e007      	b.n	8003084 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	431a      	orrs	r2, r3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d109      	bne.n	80030a0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43db      	mvns	r3, r3
 8003096:	401a      	ands	r2, r3
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800309e:	e007      	b.n	80030b0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d107      	bne.n	80030c8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80030ce:	f023 0201 	bic.w	r2, r3, #1
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e006      	b.n	80030ea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d12e      	bne.n	8003168 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2202      	movs	r2, #2
 800310e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003122:	f7fe fd25 	bl	8001b70 <HAL_GetTick>
 8003126:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003128:	e012      	b.n	8003150 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800312a:	f7fe fd21 	bl	8001b70 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b0a      	cmp	r3, #10
 8003136:	d90b      	bls.n	8003150 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2205      	movs	r2, #5
 8003148:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e012      	b.n	8003176 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1e5      	bne.n	800312a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	e006      	b.n	8003176 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800317e:	b480      	push	{r7}
 8003180:	b089      	sub	sp, #36	@ 0x24
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003192:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800319c:	7ffb      	ldrb	r3, [r7, #31]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d003      	beq.n	80031aa <HAL_CAN_AddTxMessage+0x2c>
 80031a2:	7ffb      	ldrb	r3, [r7, #31]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	f040 80ad 	bne.w	8003304 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d105      	bne.n	80031ca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8095 	beq.w	80032f4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	0e1b      	lsrs	r3, r3, #24
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80031d4:	2201      	movs	r2, #1
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	409a      	lsls	r2, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10d      	bne.n	8003202 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031f0:	68f9      	ldr	r1, [r7, #12]
 80031f2:	6809      	ldr	r1, [r1, #0]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	3318      	adds	r3, #24
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	440b      	add	r3, r1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e00f      	b.n	8003222 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800320c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003212:	68f9      	ldr	r1, [r7, #12]
 8003214:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003216:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	3318      	adds	r3, #24
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	440b      	add	r3, r1
 8003220:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6819      	ldr	r1, [r3, #0]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	3318      	adds	r3, #24
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	440b      	add	r3, r1
 8003232:	3304      	adds	r3, #4
 8003234:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	7d1b      	ldrb	r3, [r3, #20]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d111      	bne.n	8003262 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	3318      	adds	r3, #24
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	4413      	add	r3, r2
 800324a:	3304      	adds	r3, #4
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	6811      	ldr	r1, [r2, #0]
 8003252:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	3318      	adds	r3, #24
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	440b      	add	r3, r1
 800325e:	3304      	adds	r3, #4
 8003260:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3307      	adds	r3, #7
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	061a      	lsls	r2, r3, #24
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3306      	adds	r3, #6
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3305      	adds	r3, #5
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	4313      	orrs	r3, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	3204      	adds	r2, #4
 8003282:	7812      	ldrb	r2, [r2, #0]
 8003284:	4610      	mov	r0, r2
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	6811      	ldr	r1, [r2, #0]
 800328a:	ea43 0200 	orr.w	r2, r3, r0
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	440b      	add	r3, r1
 8003294:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003298:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3303      	adds	r3, #3
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	061a      	lsls	r2, r3, #24
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3302      	adds	r3, #2
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	041b      	lsls	r3, r3, #16
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3301      	adds	r3, #1
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	4313      	orrs	r3, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	7812      	ldrb	r2, [r2, #0]
 80032ba:	4610      	mov	r0, r2
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	6811      	ldr	r1, [r2, #0]
 80032c0:	ea43 0200 	orr.w	r2, r3, r0
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	440b      	add	r3, r1
 80032ca:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80032ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3318      	adds	r3, #24
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	4413      	add	r3, r2
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	6811      	ldr	r1, [r2, #0]
 80032e2:	f043 0201 	orr.w	r2, r3, #1
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	3318      	adds	r3, #24
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	440b      	add	r3, r1
 80032ee:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e00e      	b.n	8003312 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e006      	b.n	8003312 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	3724      	adds	r7, #36	@ 0x24
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800331e:	b480      	push	{r7}
 8003320:	b087      	sub	sp, #28
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003332:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d003      	beq.n	8003342 <HAL_CAN_GetRxMessage+0x24>
 800333a:	7dfb      	ldrb	r3, [r7, #23]
 800333c:	2b02      	cmp	r3, #2
 800333e:	f040 8103 	bne.w	8003548 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10e      	bne.n	8003366 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d116      	bne.n	8003384 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e0f7      	b.n	8003556 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d107      	bne.n	8003384 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0e8      	b.n	8003556 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	331b      	adds	r3, #27
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	4413      	add	r3, r2
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0204 	and.w	r2, r3, #4
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10c      	bne.n	80033bc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	331b      	adds	r3, #27
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	4413      	add	r3, r2
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	0d5b      	lsrs	r3, r3, #21
 80033b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	e00b      	b.n	80033d4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	331b      	adds	r3, #27
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	4413      	add	r3, r2
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	08db      	lsrs	r3, r3, #3
 80033cc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	331b      	adds	r3, #27
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	4413      	add	r3, r2
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0202 	and.w	r2, r3, #2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	331b      	adds	r3, #27
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	4413      	add	r3, r2
 80033f6:	3304      	adds	r3, #4
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2208      	movs	r2, #8
 8003406:	611a      	str	r2, [r3, #16]
 8003408:	e00b      	b.n	8003422 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	331b      	adds	r3, #27
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	4413      	add	r3, r2
 8003416:	3304      	adds	r3, #4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 020f 	and.w	r2, r3, #15
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	331b      	adds	r3, #27
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	4413      	add	r3, r2
 800342e:	3304      	adds	r3, #4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	b2da      	uxtb	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	331b      	adds	r3, #27
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	4413      	add	r3, r2
 8003446:	3304      	adds	r3, #4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	0c1b      	lsrs	r3, r3, #16
 800344c:	b29a      	uxth	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	4413      	add	r3, r2
 800345c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	4413      	add	r3, r2
 8003472:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	0a1a      	lsrs	r2, r3, #8
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	4413      	add	r3, r2
 800348c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	0c1a      	lsrs	r2, r3, #16
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	3302      	adds	r3, #2
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	0e1a      	lsrs	r2, r3, #24
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	3303      	adds	r3, #3
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	4413      	add	r3, r2
 80034c0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	3304      	adds	r3, #4
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	0a1a      	lsrs	r2, r3, #8
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	3305      	adds	r3, #5
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	0c1a      	lsrs	r2, r3, #16
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	3306      	adds	r3, #6
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	4413      	add	r3, r2
 800350c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	0e1a      	lsrs	r2, r3, #24
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	3307      	adds	r3, #7
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d108      	bne.n	8003534 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0220 	orr.w	r2, r2, #32
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	e007      	b.n	8003544 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0220 	orr.w	r2, r2, #32
 8003542:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	e006      	b.n	8003556 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003572:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d002      	beq.n	8003580 <HAL_CAN_ActivateNotification+0x1e>
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d109      	bne.n	8003594 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6959      	ldr	r1, [r3, #20]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	e006      	b.n	80035a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b08a      	sub	sp, #40	@ 0x28
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d07c      	beq.n	80036ee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d023      	beq.n	8003646 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2201      	movs	r2, #1
 8003604:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f983 	bl	800391c <HAL_CAN_TxMailbox0CompleteCallback>
 8003616:	e016      	b.n	8003646 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003628:	627b      	str	r3, [r7, #36]	@ 0x24
 800362a:	e00c      	b.n	8003646 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d004      	beq.n	8003640 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800363c:	627b      	str	r3, [r7, #36]	@ 0x24
 800363e:	e002      	b.n	8003646 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f989 	bl	8003958 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d024      	beq.n	800369a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003658:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f963 	bl	8003930 <HAL_CAN_TxMailbox1CompleteCallback>
 800366a:	e016      	b.n	800369a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003672:	2b00      	cmp	r3, #0
 8003674:	d004      	beq.n	8003680 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
 800367e:	e00c      	b.n	800369a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24
 8003692:	e002      	b.n	800369a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f969 	bl	800396c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d024      	beq.n	80036ee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80036ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f943 	bl	8003944 <HAL_CAN_TxMailbox2CompleteCallback>
 80036be:	e016      	b.n	80036ee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d2:	e00c      	b.n	80036ee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e6:	e002      	b.n	80036ee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f949 	bl	8003980 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00c      	beq.n	8003712 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003704:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003708:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2210      	movs	r2, #16
 8003710:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d006      	beq.n	8003734 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2208      	movs	r2, #8
 800372c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f930 	bl	8003994 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7fd f8f7 	bl	8000940 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00c      	beq.n	8003776 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2210      	movs	r2, #16
 8003774:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d006      	beq.n	8003798 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2208      	movs	r2, #8
 8003790:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f912 	bl	80039bc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f8f9 	bl	80039a8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00b      	beq.n	80037d8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d006      	beq.n	80037d8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2210      	movs	r2, #16
 80037d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f8fc 	bl	80039d0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00b      	beq.n	80037fa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d006      	beq.n	80037fa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2208      	movs	r2, #8
 80037f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f8f5 	bl	80039e4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d07b      	beq.n	80038fc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d072      	beq.n	80038f4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800383e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003840:	f043 0302 	orr.w	r3, r3, #2
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	f043 0304 	orr.w	r3, r3, #4
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003868:	2b00      	cmp	r3, #0
 800386a:	d043      	beq.n	80038f4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003872:	2b00      	cmp	r3, #0
 8003874:	d03e      	beq.n	80038f4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800387c:	2b60      	cmp	r3, #96	@ 0x60
 800387e:	d02b      	beq.n	80038d8 <HAL_CAN_IRQHandler+0x32a>
 8003880:	2b60      	cmp	r3, #96	@ 0x60
 8003882:	d82e      	bhi.n	80038e2 <HAL_CAN_IRQHandler+0x334>
 8003884:	2b50      	cmp	r3, #80	@ 0x50
 8003886:	d022      	beq.n	80038ce <HAL_CAN_IRQHandler+0x320>
 8003888:	2b50      	cmp	r3, #80	@ 0x50
 800388a:	d82a      	bhi.n	80038e2 <HAL_CAN_IRQHandler+0x334>
 800388c:	2b40      	cmp	r3, #64	@ 0x40
 800388e:	d019      	beq.n	80038c4 <HAL_CAN_IRQHandler+0x316>
 8003890:	2b40      	cmp	r3, #64	@ 0x40
 8003892:	d826      	bhi.n	80038e2 <HAL_CAN_IRQHandler+0x334>
 8003894:	2b30      	cmp	r3, #48	@ 0x30
 8003896:	d010      	beq.n	80038ba <HAL_CAN_IRQHandler+0x30c>
 8003898:	2b30      	cmp	r3, #48	@ 0x30
 800389a:	d822      	bhi.n	80038e2 <HAL_CAN_IRQHandler+0x334>
 800389c:	2b10      	cmp	r3, #16
 800389e:	d002      	beq.n	80038a6 <HAL_CAN_IRQHandler+0x2f8>
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d005      	beq.n	80038b0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80038a4:	e01d      	b.n	80038e2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	f043 0308 	orr.w	r3, r3, #8
 80038ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80038ae:	e019      	b.n	80038e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	f043 0310 	orr.w	r3, r3, #16
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80038b8:	e014      	b.n	80038e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	f043 0320 	orr.w	r3, r3, #32
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80038c2:	e00f      	b.n	80038e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80038cc:	e00a      	b.n	80038e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80038d6:	e005      	b.n	80038e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80038e0:	e000      	b.n	80038e4 <HAL_CAN_IRQHandler+0x336>
            break;
 80038e2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80038f2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2204      	movs	r2, #4
 80038fa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f872 	bl	80039f8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003914:	bf00      	nop
 8003916:	3728      	adds	r7, #40	@ 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a50 <__NVIC_SetPriorityGrouping+0x44>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a28:	4013      	ands	r3, r2
 8003a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a3e:	4a04      	ldr	r2, [pc, #16]	@ (8003a50 <__NVIC_SetPriorityGrouping+0x44>)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	60d3      	str	r3, [r2, #12]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a58:	4b04      	ldr	r3, [pc, #16]	@ (8003a6c <__NVIC_GetPriorityGrouping+0x18>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	0a1b      	lsrs	r3, r3, #8
 8003a5e:	f003 0307 	and.w	r3, r3, #7
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	e000ed00 	.word	0xe000ed00

08003a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	db0b      	blt.n	8003a9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	f003 021f 	and.w	r2, r3, #31
 8003a88:	4907      	ldr	r1, [pc, #28]	@ (8003aa8 <__NVIC_EnableIRQ+0x38>)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	2001      	movs	r0, #1
 8003a92:	fa00 f202 	lsl.w	r2, r0, r2
 8003a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	e000e100 	.word	0xe000e100

08003aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	6039      	str	r1, [r7, #0]
 8003ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	db0a      	blt.n	8003ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	490c      	ldr	r1, [pc, #48]	@ (8003af8 <__NVIC_SetPriority+0x4c>)
 8003ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aca:	0112      	lsls	r2, r2, #4
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	440b      	add	r3, r1
 8003ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ad4:	e00a      	b.n	8003aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	4908      	ldr	r1, [pc, #32]	@ (8003afc <__NVIC_SetPriority+0x50>)
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	3b04      	subs	r3, #4
 8003ae4:	0112      	lsls	r2, r2, #4
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	440b      	add	r3, r1
 8003aea:	761a      	strb	r2, [r3, #24]
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	e000e100 	.word	0xe000e100
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b089      	sub	sp, #36	@ 0x24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f1c3 0307 	rsb	r3, r3, #7
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	bf28      	it	cs
 8003b1e:	2304      	movcs	r3, #4
 8003b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	3304      	adds	r3, #4
 8003b26:	2b06      	cmp	r3, #6
 8003b28:	d902      	bls.n	8003b30 <NVIC_EncodePriority+0x30>
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3b03      	subs	r3, #3
 8003b2e:	e000      	b.n	8003b32 <NVIC_EncodePriority+0x32>
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b34:	f04f 32ff 	mov.w	r2, #4294967295
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43da      	mvns	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	401a      	ands	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b48:	f04f 31ff 	mov.w	r1, #4294967295
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b52:	43d9      	mvns	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b58:	4313      	orrs	r3, r2
         );
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3724      	adds	r7, #36	@ 0x24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ff4c 	bl	8003a0c <__NVIC_SetPriorityGrouping>
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b8e:	f7ff ff61 	bl	8003a54 <__NVIC_GetPriorityGrouping>
 8003b92:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	6978      	ldr	r0, [r7, #20]
 8003b9a:	f7ff ffb1 	bl	8003b00 <NVIC_EncodePriority>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff ff80 	bl	8003aac <__NVIC_SetPriority>
}
 8003bac:	bf00      	nop
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff ff54 	bl	8003a70 <__NVIC_EnableIRQ>
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e098      	b.n	8003d14 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	4b4d      	ldr	r3, [pc, #308]	@ (8003d20 <HAL_DMA_Init+0x150>)
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d80f      	bhi.n	8003c0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8003d24 <HAL_DMA_Init+0x154>)
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8003d28 <HAL_DMA_Init+0x158>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	009a      	lsls	r2, r3, #2
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a48      	ldr	r2, [pc, #288]	@ (8003d2c <HAL_DMA_Init+0x15c>)
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c0c:	e00e      	b.n	8003c2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b46      	ldr	r3, [pc, #280]	@ (8003d30 <HAL_DMA_Init+0x160>)
 8003c16:	4413      	add	r3, r2
 8003c18:	4a43      	ldr	r2, [pc, #268]	@ (8003d28 <HAL_DMA_Init+0x158>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	009a      	lsls	r2, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a42      	ldr	r2, [pc, #264]	@ (8003d34 <HAL_DMA_Init+0x164>)
 8003c2a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c86:	d039      	beq.n	8003cfc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	4a27      	ldr	r2, [pc, #156]	@ (8003d2c <HAL_DMA_Init+0x15c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d11a      	bne.n	8003cc8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c92:	4b29      	ldr	r3, [pc, #164]	@ (8003d38 <HAL_DMA_Init+0x168>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9a:	f003 031c 	and.w	r3, r3, #28
 8003c9e:	210f      	movs	r1, #15
 8003ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	4924      	ldr	r1, [pc, #144]	@ (8003d38 <HAL_DMA_Init+0x168>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003cac:	4b22      	ldr	r3, [pc, #136]	@ (8003d38 <HAL_DMA_Init+0x168>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb8:	f003 031c 	and.w	r3, r3, #28
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	491d      	ldr	r1, [pc, #116]	@ (8003d38 <HAL_DMA_Init+0x168>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]
 8003cc6:	e019      	b.n	8003cfc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d3c <HAL_DMA_Init+0x16c>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd0:	f003 031c 	and.w	r3, r3, #28
 8003cd4:	210f      	movs	r1, #15
 8003cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	4917      	ldr	r1, [pc, #92]	@ (8003d3c <HAL_DMA_Init+0x16c>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ce2:	4b16      	ldr	r3, [pc, #88]	@ (8003d3c <HAL_DMA_Init+0x16c>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6859      	ldr	r1, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	f003 031c 	and.w	r3, r3, #28
 8003cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf6:	4911      	ldr	r1, [pc, #68]	@ (8003d3c <HAL_DMA_Init+0x16c>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40020407 	.word	0x40020407
 8003d24:	bffdfff8 	.word	0xbffdfff8
 8003d28:	cccccccd 	.word	0xcccccccd
 8003d2c:	40020000 	.word	0x40020000
 8003d30:	bffdfbf8 	.word	0xbffdfbf8
 8003d34:	40020400 	.word	0x40020400
 8003d38:	400200a8 	.word	0x400200a8
 8003d3c:	400204a8 	.word	0x400204a8

08003d40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_DMA_Start_IT+0x20>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e04b      	b.n	8003df8 <HAL_DMA_Start_IT+0xb8>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d13a      	bne.n	8003dea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	68b9      	ldr	r1, [r7, #8]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f95f 	bl	800405c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d008      	beq.n	8003db8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 020e 	orr.w	r2, r2, #14
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e00f      	b.n	8003dd8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0204 	bic.w	r2, r2, #4
 8003dc6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 020a 	orr.w	r2, r2, #10
 8003dd6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e005      	b.n	8003df6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
 8003df4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d008      	beq.n	8003e2a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e022      	b.n	8003e70 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 020e 	bic.w	r2, r2, #14
 8003e38:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	f003 021c 	and.w	r2, r3, #28
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	2101      	movs	r1, #1
 8003e58:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d005      	beq.n	8003ea0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2204      	movs	r2, #4
 8003e98:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
 8003e9e:	e029      	b.n	8003ef4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 020e 	bic.w	r2, r2, #14
 8003eae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec4:	f003 021c 	and.w	r2, r3, #28
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	4798      	blx	r3
    }
  }
  return status;
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1a:	f003 031c 	and.w	r3, r3, #28
 8003f1e:	2204      	movs	r2, #4
 8003f20:	409a      	lsls	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d026      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x7a>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d021      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d107      	bne.n	8003f52 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0204 	bic.w	r2, r2, #4
 8003f50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	f003 021c 	and.w	r2, r3, #28
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	2104      	movs	r1, #4
 8003f60:	fa01 f202 	lsl.w	r2, r1, r2
 8003f64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d071      	beq.n	8004052 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f76:	e06c      	b.n	8004052 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7c:	f003 031c 	and.w	r3, r3, #28
 8003f80:	2202      	movs	r2, #2
 8003f82:	409a      	lsls	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d02e      	beq.n	8003fea <HAL_DMA_IRQHandler+0xec>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d029      	beq.n	8003fea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10b      	bne.n	8003fbc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 020a 	bic.w	r2, r2, #10
 8003fb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc0:	f003 021c 	and.w	r2, r3, #28
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	2102      	movs	r1, #2
 8003fca:	fa01 f202 	lsl.w	r2, r1, r2
 8003fce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d038      	beq.n	8004052 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003fe8:	e033      	b.n	8004052 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fee:	f003 031c 	and.w	r3, r3, #28
 8003ff2:	2208      	movs	r2, #8
 8003ff4:	409a      	lsls	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d02a      	beq.n	8004054 <HAL_DMA_IRQHandler+0x156>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b00      	cmp	r3, #0
 8004006:	d025      	beq.n	8004054 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 020e 	bic.w	r2, r2, #14
 8004016:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401c:	f003 021c 	and.w	r2, r3, #28
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	2101      	movs	r1, #1
 8004026:	fa01 f202 	lsl.w	r2, r1, r2
 800402a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004046:	2b00      	cmp	r3, #0
 8004048:	d004      	beq.n	8004054 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004052:	bf00      	nop
 8004054:	bf00      	nop
}
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406e:	f003 021c 	and.w	r2, r3, #28
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	2101      	movs	r1, #1
 8004078:	fa01 f202 	lsl.w	r2, r1, r2
 800407c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b10      	cmp	r3, #16
 800408c:	d108      	bne.n	80040a0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800409e:	e007      	b.n	80040b0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ca:	e154      	b.n	8004376 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	2101      	movs	r1, #1
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	fa01 f303 	lsl.w	r3, r1, r3
 80040d8:	4013      	ands	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 8146 	beq.w	8004370 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d005      	beq.n	80040fc <HAL_GPIO_Init+0x40>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d130      	bne.n	800415e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	2203      	movs	r2, #3
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004132:	2201      	movs	r2, #1
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4013      	ands	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	f003 0201 	and.w	r2, r3, #1
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b03      	cmp	r3, #3
 8004168:	d017      	beq.n	800419a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	2203      	movs	r2, #3
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4013      	ands	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d123      	bne.n	80041ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	08da      	lsrs	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3208      	adds	r2, #8
 80041ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	220f      	movs	r2, #15
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4013      	ands	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	08da      	lsrs	r2, r3, #3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3208      	adds	r2, #8
 80041e8:	6939      	ldr	r1, [r7, #16]
 80041ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	2203      	movs	r2, #3
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4013      	ands	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0203 	and.w	r2, r3, #3
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80a0 	beq.w	8004370 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004230:	4b58      	ldr	r3, [pc, #352]	@ (8004394 <HAL_GPIO_Init+0x2d8>)
 8004232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004234:	4a57      	ldr	r2, [pc, #348]	@ (8004394 <HAL_GPIO_Init+0x2d8>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	6613      	str	r3, [r2, #96]	@ 0x60
 800423c:	4b55      	ldr	r3, [pc, #340]	@ (8004394 <HAL_GPIO_Init+0x2d8>)
 800423e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004248:	4a53      	ldr	r2, [pc, #332]	@ (8004398 <HAL_GPIO_Init+0x2dc>)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	3302      	adds	r3, #2
 8004250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004254:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	220f      	movs	r2, #15
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4013      	ands	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004272:	d019      	beq.n	80042a8 <HAL_GPIO_Init+0x1ec>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a49      	ldr	r2, [pc, #292]	@ (800439c <HAL_GPIO_Init+0x2e0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d013      	beq.n	80042a4 <HAL_GPIO_Init+0x1e8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a48      	ldr	r2, [pc, #288]	@ (80043a0 <HAL_GPIO_Init+0x2e4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00d      	beq.n	80042a0 <HAL_GPIO_Init+0x1e4>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a47      	ldr	r2, [pc, #284]	@ (80043a4 <HAL_GPIO_Init+0x2e8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d007      	beq.n	800429c <HAL_GPIO_Init+0x1e0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a46      	ldr	r2, [pc, #280]	@ (80043a8 <HAL_GPIO_Init+0x2ec>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d101      	bne.n	8004298 <HAL_GPIO_Init+0x1dc>
 8004294:	2304      	movs	r3, #4
 8004296:	e008      	b.n	80042aa <HAL_GPIO_Init+0x1ee>
 8004298:	2307      	movs	r3, #7
 800429a:	e006      	b.n	80042aa <HAL_GPIO_Init+0x1ee>
 800429c:	2303      	movs	r3, #3
 800429e:	e004      	b.n	80042aa <HAL_GPIO_Init+0x1ee>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e002      	b.n	80042aa <HAL_GPIO_Init+0x1ee>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <HAL_GPIO_Init+0x1ee>
 80042a8:	2300      	movs	r3, #0
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	f002 0203 	and.w	r2, r2, #3
 80042b0:	0092      	lsls	r2, r2, #2
 80042b2:	4093      	lsls	r3, r2
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042ba:	4937      	ldr	r1, [pc, #220]	@ (8004398 <HAL_GPIO_Init+0x2dc>)
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	089b      	lsrs	r3, r3, #2
 80042c0:	3302      	adds	r3, #2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042c8:	4b38      	ldr	r3, [pc, #224]	@ (80043ac <HAL_GPIO_Init+0x2f0>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4013      	ands	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042ec:	4a2f      	ldr	r2, [pc, #188]	@ (80043ac <HAL_GPIO_Init+0x2f0>)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042f2:	4b2e      	ldr	r3, [pc, #184]	@ (80043ac <HAL_GPIO_Init+0x2f0>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	43db      	mvns	r3, r3
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4013      	ands	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004316:	4a25      	ldr	r2, [pc, #148]	@ (80043ac <HAL_GPIO_Init+0x2f0>)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800431c:	4b23      	ldr	r3, [pc, #140]	@ (80043ac <HAL_GPIO_Init+0x2f0>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	43db      	mvns	r3, r3
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4013      	ands	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004340:	4a1a      	ldr	r2, [pc, #104]	@ (80043ac <HAL_GPIO_Init+0x2f0>)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004346:	4b19      	ldr	r3, [pc, #100]	@ (80043ac <HAL_GPIO_Init+0x2f0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	43db      	mvns	r3, r3
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800436a:	4a10      	ldr	r2, [pc, #64]	@ (80043ac <HAL_GPIO_Init+0x2f0>)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3301      	adds	r3, #1
 8004374:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	fa22 f303 	lsr.w	r3, r2, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	f47f aea3 	bne.w	80040cc <HAL_GPIO_Init+0x10>
  }
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	40021000 	.word	0x40021000
 8004398:	40010000 	.word	0x40010000
 800439c:	48000400 	.word	0x48000400
 80043a0:	48000800 	.word	0x48000800
 80043a4:	48000c00 	.word	0x48000c00
 80043a8:	48001000 	.word	0x48001000
 80043ac:	40010400 	.word	0x40010400

080043b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	887b      	ldrh	r3, [r7, #2]
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
 80043cc:	e001      	b.n	80043d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	807b      	strh	r3, [r7, #2]
 80043ec:	4613      	mov	r3, r2
 80043ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043f0:	787b      	ldrb	r3, [r7, #1]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043fc:	e002      	b.n	8004404 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043fe:	887a      	ldrh	r2, [r7, #2]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e08d      	b.n	800453e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fc feb4 	bl	80011a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2224      	movs	r2, #36	@ 0x24
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0201 	bic.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004460:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004470:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d107      	bne.n	800448a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	e006      	b.n	8004498 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004496:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d108      	bne.n	80044b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ae:	605a      	str	r2, [r3, #4]
 80044b0:	e007      	b.n	80044c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6812      	ldr	r2, [r2, #0]
 80044cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69d9      	ldr	r1, [r3, #28]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1a      	ldr	r2, [r3, #32]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b20      	cmp	r3, #32
 800455a:	d138      	bne.n	80045ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004566:	2302      	movs	r3, #2
 8004568:	e032      	b.n	80045d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2224      	movs	r2, #36	@ 0x24
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0201 	bic.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004598:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6819      	ldr	r1, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	e000      	b.n	80045d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045ce:	2302      	movs	r3, #2
  }
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d139      	bne.n	8004666 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e033      	b.n	8004668 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2224      	movs	r2, #36	@ 0x24
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800462e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	e000      	b.n	8004668 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004666:	2302      	movs	r3, #2
  }
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004678:	4b04      	ldr	r3, [pc, #16]	@ (800468c <HAL_PWREx_GetVoltageRange+0x18>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40007000 	.word	0x40007000

08004690 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800469e:	d130      	bne.n	8004702 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046a0:	4b23      	ldr	r3, [pc, #140]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ac:	d038      	beq.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ae:	4b20      	ldr	r3, [pc, #128]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046be:	4b1d      	ldr	r3, [pc, #116]	@ (8004734 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2232      	movs	r2, #50	@ 0x32
 80046c4:	fb02 f303 	mul.w	r3, r2, r3
 80046c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	0c9b      	lsrs	r3, r3, #18
 80046d0:	3301      	adds	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046d4:	e002      	b.n	80046dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3b01      	subs	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046dc:	4b14      	ldr	r3, [pc, #80]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046e8:	d102      	bne.n	80046f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f2      	bne.n	80046d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fc:	d110      	bne.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e00f      	b.n	8004722 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004702:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800470e:	d007      	beq.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004710:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004718:	4a05      	ldr	r2, [pc, #20]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800471a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800471e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40007000 	.word	0x40007000
 8004734:	20000000 	.word	0x20000000
 8004738:	431bde83 	.word	0x431bde83

0800473c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f000 bc02 	b.w	8004f54 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004750:	4b96      	ldr	r3, [pc, #600]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 030c 	and.w	r3, r3, #12
 8004758:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800475a:	4b94      	ldr	r3, [pc, #592]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80e4 	beq.w	800493a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d007      	beq.n	8004788 <HAL_RCC_OscConfig+0x4c>
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2b0c      	cmp	r3, #12
 800477c:	f040 808b 	bne.w	8004896 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b01      	cmp	r3, #1
 8004784:	f040 8087 	bne.w	8004896 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004788:	4b88      	ldr	r3, [pc, #544]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_OscConfig+0x64>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e3d9      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1a      	ldr	r2, [r3, #32]
 80047a4:	4b81      	ldr	r3, [pc, #516]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d004      	beq.n	80047ba <HAL_RCC_OscConfig+0x7e>
 80047b0:	4b7e      	ldr	r3, [pc, #504]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047b8:	e005      	b.n	80047c6 <HAL_RCC_OscConfig+0x8a>
 80047ba:	4b7c      	ldr	r3, [pc, #496]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80047bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d223      	bcs.n	8004812 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fdbe 	bl	8005350 <RCC_SetFlashLatencyFromMSIRange>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e3ba      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047de:	4b73      	ldr	r3, [pc, #460]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a72      	ldr	r2, [pc, #456]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80047e4:	f043 0308 	orr.w	r3, r3, #8
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	4b70      	ldr	r3, [pc, #448]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	496d      	ldr	r1, [pc, #436]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047fc:	4b6b      	ldr	r3, [pc, #428]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	4968      	ldr	r1, [pc, #416]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 800480c:	4313      	orrs	r3, r2
 800480e:	604b      	str	r3, [r1, #4]
 8004810:	e025      	b.n	800485e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004812:	4b66      	ldr	r3, [pc, #408]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a65      	ldr	r2, [pc, #404]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 8004818:	f043 0308 	orr.w	r3, r3, #8
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	4b63      	ldr	r3, [pc, #396]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	4960      	ldr	r1, [pc, #384]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004830:	4b5e      	ldr	r3, [pc, #376]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	495b      	ldr	r1, [pc, #364]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d109      	bne.n	800485e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fd7e 	bl	8005350 <RCC_SetFlashLatencyFromMSIRange>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e37a      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800485e:	f000 fc81 	bl	8005164 <HAL_RCC_GetSysClockFreq>
 8004862:	4602      	mov	r2, r0
 8004864:	4b51      	ldr	r3, [pc, #324]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	4950      	ldr	r1, [pc, #320]	@ (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004870:	5ccb      	ldrb	r3, [r1, r3]
 8004872:	f003 031f 	and.w	r3, r3, #31
 8004876:	fa22 f303 	lsr.w	r3, r2, r3
 800487a:	4a4e      	ldr	r2, [pc, #312]	@ (80049b4 <HAL_RCC_OscConfig+0x278>)
 800487c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800487e:	4b4e      	ldr	r3, [pc, #312]	@ (80049b8 <HAL_RCC_OscConfig+0x27c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc fea8 	bl	80015d8 <HAL_InitTick>
 8004888:	4603      	mov	r3, r0
 800488a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d052      	beq.n	8004938 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	e35e      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d032      	beq.n	8004904 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800489e:	4b43      	ldr	r3, [pc, #268]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a42      	ldr	r2, [pc, #264]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048aa:	f7fd f961 	bl	8001b70 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048b2:	f7fd f95d 	bl	8001b70 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e347      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048c4:	4b39      	ldr	r3, [pc, #228]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048d0:	4b36      	ldr	r3, [pc, #216]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a35      	ldr	r2, [pc, #212]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80048d6:	f043 0308 	orr.w	r3, r3, #8
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	4b33      	ldr	r3, [pc, #204]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	4930      	ldr	r1, [pc, #192]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048ee:	4b2f      	ldr	r3, [pc, #188]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	492b      	ldr	r1, [pc, #172]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	604b      	str	r3, [r1, #4]
 8004902:	e01a      	b.n	800493a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004904:	4b29      	ldr	r3, [pc, #164]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a28      	ldr	r2, [pc, #160]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004910:	f7fd f92e 	bl	8001b70 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004918:	f7fd f92a 	bl	8001b70 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e314      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800492a:	4b20      	ldr	r3, [pc, #128]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x1dc>
 8004936:	e000      	b.n	800493a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004938:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d073      	beq.n	8004a2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b08      	cmp	r3, #8
 800494a:	d005      	beq.n	8004958 <HAL_RCC_OscConfig+0x21c>
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b0c      	cmp	r3, #12
 8004950:	d10e      	bne.n	8004970 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d10b      	bne.n	8004970 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004958:	4b14      	ldr	r3, [pc, #80]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d063      	beq.n	8004a2c <HAL_RCC_OscConfig+0x2f0>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d15f      	bne.n	8004a2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e2f1      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004978:	d106      	bne.n	8004988 <HAL_RCC_OscConfig+0x24c>
 800497a:	4b0c      	ldr	r3, [pc, #48]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a0b      	ldr	r2, [pc, #44]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 8004980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	e025      	b.n	80049d4 <HAL_RCC_OscConfig+0x298>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004990:	d114      	bne.n	80049bc <HAL_RCC_OscConfig+0x280>
 8004992:	4b06      	ldr	r3, [pc, #24]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a05      	ldr	r2, [pc, #20]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 8004998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	4b03      	ldr	r3, [pc, #12]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a02      	ldr	r2, [pc, #8]	@ (80049ac <HAL_RCC_OscConfig+0x270>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	e013      	b.n	80049d4 <HAL_RCC_OscConfig+0x298>
 80049ac:	40021000 	.word	0x40021000
 80049b0:	080096b0 	.word	0x080096b0
 80049b4:	20000000 	.word	0x20000000
 80049b8:	20000004 	.word	0x20000004
 80049bc:	4ba0      	ldr	r3, [pc, #640]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a9f      	ldr	r2, [pc, #636]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 80049c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	4b9d      	ldr	r3, [pc, #628]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a9c      	ldr	r2, [pc, #624]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 80049ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d013      	beq.n	8004a04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fd f8c8 	bl	8001b70 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049e4:	f7fd f8c4 	bl	8001b70 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b64      	cmp	r3, #100	@ 0x64
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e2ae      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f6:	4b92      	ldr	r3, [pc, #584]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0x2a8>
 8004a02:	e014      	b.n	8004a2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fd f8b4 	bl	8001b70 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a0c:	f7fd f8b0 	bl	8001b70 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	@ 0x64
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e29a      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a1e:	4b88      	ldr	r3, [pc, #544]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x2d0>
 8004a2a:	e000      	b.n	8004a2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d060      	beq.n	8004afc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_OscConfig+0x310>
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d119      	bne.n	8004a7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d116      	bne.n	8004a7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a4c:	4b7c      	ldr	r3, [pc, #496]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_OscConfig+0x328>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e277      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a64:	4b76      	ldr	r3, [pc, #472]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	061b      	lsls	r3, r3, #24
 8004a72:	4973      	ldr	r1, [pc, #460]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a78:	e040      	b.n	8004afc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d023      	beq.n	8004aca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a82:	4b6f      	ldr	r3, [pc, #444]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a6e      	ldr	r2, [pc, #440]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fd f86f 	bl	8001b70 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a96:	f7fd f86b 	bl	8001b70 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e255      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa8:	4b65      	ldr	r3, [pc, #404]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab4:	4b62      	ldr	r3, [pc, #392]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	495f      	ldr	r1, [pc, #380]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	604b      	str	r3, [r1, #4]
 8004ac8:	e018      	b.n	8004afc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aca:	4b5d      	ldr	r3, [pc, #372]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a5c      	ldr	r2, [pc, #368]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad6:	f7fd f84b 	bl	8001b70 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ade:	f7fd f847 	bl	8001b70 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e231      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004af0:	4b53      	ldr	r3, [pc, #332]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f0      	bne.n	8004ade <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d03c      	beq.n	8004b82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01c      	beq.n	8004b4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b10:	4b4b      	ldr	r3, [pc, #300]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b16:	4a4a      	ldr	r2, [pc, #296]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b20:	f7fd f826 	bl	8001b70 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b28:	f7fd f822 	bl	8001b70 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e20c      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b3a:	4b41      	ldr	r3, [pc, #260]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0ef      	beq.n	8004b28 <HAL_RCC_OscConfig+0x3ec>
 8004b48:	e01b      	b.n	8004b82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b50:	4a3b      	ldr	r2, [pc, #236]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004b52:	f023 0301 	bic.w	r3, r3, #1
 8004b56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5a:	f7fd f809 	bl	8001b70 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b62:	f7fd f805 	bl	8001b70 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e1ef      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b74:	4b32      	ldr	r3, [pc, #200]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1ef      	bne.n	8004b62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 80a6 	beq.w	8004cdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b90:	2300      	movs	r3, #0
 8004b92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b94:	4b2a      	ldr	r3, [pc, #168]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10d      	bne.n	8004bbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba0:	4b27      	ldr	r3, [pc, #156]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba4:	4a26      	ldr	r2, [pc, #152]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004baa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bac:	4b24      	ldr	r3, [pc, #144]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bbc:	4b21      	ldr	r3, [pc, #132]	@ (8004c44 <HAL_RCC_OscConfig+0x508>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d118      	bne.n	8004bfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c44 <HAL_RCC_OscConfig+0x508>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c44 <HAL_RCC_OscConfig+0x508>)
 8004bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd4:	f7fc ffcc 	bl	8001b70 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bdc:	f7fc ffc8 	bl	8001b70 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e1b2      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bee:	4b15      	ldr	r3, [pc, #84]	@ (8004c44 <HAL_RCC_OscConfig+0x508>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d108      	bne.n	8004c14 <HAL_RCC_OscConfig+0x4d8>
 8004c02:	4b0f      	ldr	r3, [pc, #60]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c08:	4a0d      	ldr	r2, [pc, #52]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c12:	e029      	b.n	8004c68 <HAL_RCC_OscConfig+0x52c>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b05      	cmp	r3, #5
 8004c1a:	d115      	bne.n	8004c48 <HAL_RCC_OscConfig+0x50c>
 8004c1c:	4b08      	ldr	r3, [pc, #32]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c22:	4a07      	ldr	r2, [pc, #28]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004c24:	f043 0304 	orr.w	r3, r3, #4
 8004c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c2c:	4b04      	ldr	r3, [pc, #16]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c32:	4a03      	ldr	r2, [pc, #12]	@ (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c3c:	e014      	b.n	8004c68 <HAL_RCC_OscConfig+0x52c>
 8004c3e:	bf00      	nop
 8004c40:	40021000 	.word	0x40021000
 8004c44:	40007000 	.word	0x40007000
 8004c48:	4b9a      	ldr	r3, [pc, #616]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4e:	4a99      	ldr	r2, [pc, #612]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c58:	4b96      	ldr	r3, [pc, #600]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5e:	4a95      	ldr	r2, [pc, #596]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004c60:	f023 0304 	bic.w	r3, r3, #4
 8004c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d016      	beq.n	8004c9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c70:	f7fc ff7e 	bl	8001b70 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c76:	e00a      	b.n	8004c8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c78:	f7fc ff7a 	bl	8001b70 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e162      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c8e:	4b89      	ldr	r3, [pc, #548]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0ed      	beq.n	8004c78 <HAL_RCC_OscConfig+0x53c>
 8004c9c:	e015      	b.n	8004cca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9e:	f7fc ff67 	bl	8001b70 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ca4:	e00a      	b.n	8004cbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca6:	f7fc ff63 	bl	8001b70 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e14b      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cbc:	4b7d      	ldr	r3, [pc, #500]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1ed      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cca:	7ffb      	ldrb	r3, [r7, #31]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d105      	bne.n	8004cdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd0:	4b78      	ldr	r3, [pc, #480]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd4:	4a77      	ldr	r2, [pc, #476]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004cd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d03c      	beq.n	8004d62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01c      	beq.n	8004d2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cf0:	4b70      	ldr	r3, [pc, #448]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cf6:	4a6f      	ldr	r2, [pc, #444]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d00:	f7fc ff36 	bl	8001b70 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d08:	f7fc ff32 	bl	8001b70 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e11c      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d1a:	4b66      	ldr	r3, [pc, #408]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0ef      	beq.n	8004d08 <HAL_RCC_OscConfig+0x5cc>
 8004d28:	e01b      	b.n	8004d62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d2a:	4b62      	ldr	r3, [pc, #392]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d30:	4a60      	ldr	r2, [pc, #384]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3a:	f7fc ff19 	bl	8001b70 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d42:	f7fc ff15 	bl	8001b70 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e0ff      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d54:	4b57      	ldr	r3, [pc, #348]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1ef      	bne.n	8004d42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 80f3 	beq.w	8004f52 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	f040 80c9 	bne.w	8004f08 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d76:	4b4f      	ldr	r3, [pc, #316]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f003 0203 	and.w	r2, r3, #3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d12c      	bne.n	8004de4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d94:	3b01      	subs	r3, #1
 8004d96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d123      	bne.n	8004de4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d11b      	bne.n	8004de4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d113      	bne.n	8004de4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d109      	bne.n	8004de4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	085b      	lsrs	r3, r3, #1
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d06b      	beq.n	8004ebc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b0c      	cmp	r3, #12
 8004de8:	d062      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004dea:	4b32      	ldr	r3, [pc, #200]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e0ac      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004e00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e04:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e06:	f7fc feb3 	bl	8001b70 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e0e:	f7fc feaf 	bl	8001b70 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e099      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e20:	4b24      	ldr	r3, [pc, #144]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1f0      	bne.n	8004e0e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e2c:	4b21      	ldr	r3, [pc, #132]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	4b21      	ldr	r3, [pc, #132]	@ (8004eb8 <HAL_RCC_OscConfig+0x77c>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e3c:	3a01      	subs	r2, #1
 8004e3e:	0112      	lsls	r2, r2, #4
 8004e40:	4311      	orrs	r1, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e46:	0212      	lsls	r2, r2, #8
 8004e48:	4311      	orrs	r1, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e4e:	0852      	lsrs	r2, r2, #1
 8004e50:	3a01      	subs	r2, #1
 8004e52:	0552      	lsls	r2, r2, #21
 8004e54:	4311      	orrs	r1, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e5a:	0852      	lsrs	r2, r2, #1
 8004e5c:	3a01      	subs	r2, #1
 8004e5e:	0652      	lsls	r2, r2, #25
 8004e60:	4311      	orrs	r1, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e66:	06d2      	lsls	r2, r2, #27
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	4912      	ldr	r1, [pc, #72]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e70:	4b10      	ldr	r3, [pc, #64]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a0f      	ldr	r2, [pc, #60]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	4a0c      	ldr	r2, [pc, #48]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e88:	f7fc fe72 	bl	8001b70 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e90:	f7fc fe6e 	bl	8001b70 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e058      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ea2:	4b04      	ldr	r3, [pc, #16]	@ (8004eb4 <HAL_RCC_OscConfig+0x778>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f0      	beq.n	8004e90 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eae:	e050      	b.n	8004f52 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e04f      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ebc:	4b27      	ldr	r3, [pc, #156]	@ (8004f5c <HAL_RCC_OscConfig+0x820>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d144      	bne.n	8004f52 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ec8:	4b24      	ldr	r3, [pc, #144]	@ (8004f5c <HAL_RCC_OscConfig+0x820>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a23      	ldr	r2, [pc, #140]	@ (8004f5c <HAL_RCC_OscConfig+0x820>)
 8004ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ed2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ed4:	4b21      	ldr	r3, [pc, #132]	@ (8004f5c <HAL_RCC_OscConfig+0x820>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4a20      	ldr	r2, [pc, #128]	@ (8004f5c <HAL_RCC_OscConfig+0x820>)
 8004eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ede:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ee0:	f7fc fe46 	bl	8001b70 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee8:	f7fc fe42 	bl	8001b70 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e02c      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efa:	4b18      	ldr	r3, [pc, #96]	@ (8004f5c <HAL_RCC_OscConfig+0x820>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x7ac>
 8004f06:	e024      	b.n	8004f52 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b0c      	cmp	r3, #12
 8004f0c:	d01f      	beq.n	8004f4e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0e:	4b13      	ldr	r3, [pc, #76]	@ (8004f5c <HAL_RCC_OscConfig+0x820>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a12      	ldr	r2, [pc, #72]	@ (8004f5c <HAL_RCC_OscConfig+0x820>)
 8004f14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1a:	f7fc fe29 	bl	8001b70 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f22:	f7fc fe25 	bl	8001b70 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e00f      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f34:	4b09      	ldr	r3, [pc, #36]	@ (8004f5c <HAL_RCC_OscConfig+0x820>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1f0      	bne.n	8004f22 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004f40:	4b06      	ldr	r3, [pc, #24]	@ (8004f5c <HAL_RCC_OscConfig+0x820>)
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	4905      	ldr	r1, [pc, #20]	@ (8004f5c <HAL_RCC_OscConfig+0x820>)
 8004f46:	4b06      	ldr	r3, [pc, #24]	@ (8004f60 <HAL_RCC_OscConfig+0x824>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	60cb      	str	r3, [r1, #12]
 8004f4c:	e001      	b.n	8004f52 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3720      	adds	r7, #32
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	feeefffc 	.word	0xfeeefffc

08004f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0e7      	b.n	8005148 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f78:	4b75      	ldr	r3, [pc, #468]	@ (8005150 <HAL_RCC_ClockConfig+0x1ec>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d910      	bls.n	8004fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f86:	4b72      	ldr	r3, [pc, #456]	@ (8005150 <HAL_RCC_ClockConfig+0x1ec>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f023 0207 	bic.w	r2, r3, #7
 8004f8e:	4970      	ldr	r1, [pc, #448]	@ (8005150 <HAL_RCC_ClockConfig+0x1ec>)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f96:	4b6e      	ldr	r3, [pc, #440]	@ (8005150 <HAL_RCC_ClockConfig+0x1ec>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e0cf      	b.n	8005148 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d010      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	4b66      	ldr	r3, [pc, #408]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d908      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc4:	4b63      	ldr	r3, [pc, #396]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	4960      	ldr	r1, [pc, #384]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d04c      	beq.n	800507c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d107      	bne.n	8004ffa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fea:	4b5a      	ldr	r3, [pc, #360]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d121      	bne.n	800503a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e0a6      	b.n	8005148 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d107      	bne.n	8005012 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005002:	4b54      	ldr	r3, [pc, #336]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d115      	bne.n	800503a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e09a      	b.n	8005148 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d107      	bne.n	800502a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800501a:	4b4e      	ldr	r3, [pc, #312]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e08e      	b.n	8005148 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800502a:	4b4a      	ldr	r3, [pc, #296]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e086      	b.n	8005148 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800503a:	4b46      	ldr	r3, [pc, #280]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f023 0203 	bic.w	r2, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4943      	ldr	r1, [pc, #268]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 8005048:	4313      	orrs	r3, r2
 800504a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504c:	f7fc fd90 	bl	8001b70 <HAL_GetTick>
 8005050:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005052:	e00a      	b.n	800506a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005054:	f7fc fd8c 	bl	8001b70 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e06e      	b.n	8005148 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506a:	4b3a      	ldr	r3, [pc, #232]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 020c 	and.w	r2, r3, #12
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	429a      	cmp	r2, r3
 800507a:	d1eb      	bne.n	8005054 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d010      	beq.n	80050aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	4b31      	ldr	r3, [pc, #196]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005094:	429a      	cmp	r2, r3
 8005096:	d208      	bcs.n	80050aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005098:	4b2e      	ldr	r3, [pc, #184]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	492b      	ldr	r1, [pc, #172]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050aa:	4b29      	ldr	r3, [pc, #164]	@ (8005150 <HAL_RCC_ClockConfig+0x1ec>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d210      	bcs.n	80050da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b8:	4b25      	ldr	r3, [pc, #148]	@ (8005150 <HAL_RCC_ClockConfig+0x1ec>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f023 0207 	bic.w	r2, r3, #7
 80050c0:	4923      	ldr	r1, [pc, #140]	@ (8005150 <HAL_RCC_ClockConfig+0x1ec>)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c8:	4b21      	ldr	r3, [pc, #132]	@ (8005150 <HAL_RCC_ClockConfig+0x1ec>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d001      	beq.n	80050da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e036      	b.n	8005148 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d008      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	4918      	ldr	r1, [pc, #96]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0308 	and.w	r3, r3, #8
 8005100:	2b00      	cmp	r3, #0
 8005102:	d009      	beq.n	8005118 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005104:	4b13      	ldr	r3, [pc, #76]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4910      	ldr	r1, [pc, #64]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 8005114:	4313      	orrs	r3, r2
 8005116:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005118:	f000 f824 	bl	8005164 <HAL_RCC_GetSysClockFreq>
 800511c:	4602      	mov	r2, r0
 800511e:	4b0d      	ldr	r3, [pc, #52]	@ (8005154 <HAL_RCC_ClockConfig+0x1f0>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	091b      	lsrs	r3, r3, #4
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	490b      	ldr	r1, [pc, #44]	@ (8005158 <HAL_RCC_ClockConfig+0x1f4>)
 800512a:	5ccb      	ldrb	r3, [r1, r3]
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
 8005134:	4a09      	ldr	r2, [pc, #36]	@ (800515c <HAL_RCC_ClockConfig+0x1f8>)
 8005136:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005138:	4b09      	ldr	r3, [pc, #36]	@ (8005160 <HAL_RCC_ClockConfig+0x1fc>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f7fc fa4b 	bl	80015d8 <HAL_InitTick>
 8005142:	4603      	mov	r3, r0
 8005144:	72fb      	strb	r3, [r7, #11]

  return status;
 8005146:	7afb      	ldrb	r3, [r7, #11]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40022000 	.word	0x40022000
 8005154:	40021000 	.word	0x40021000
 8005158:	080096b0 	.word	0x080096b0
 800515c:	20000000 	.word	0x20000000
 8005160:	20000004 	.word	0x20000004

08005164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005164:	b480      	push	{r7}
 8005166:	b089      	sub	sp, #36	@ 0x24
 8005168:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005172:	4b3e      	ldr	r3, [pc, #248]	@ (800526c <HAL_RCC_GetSysClockFreq+0x108>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800517c:	4b3b      	ldr	r3, [pc, #236]	@ (800526c <HAL_RCC_GetSysClockFreq+0x108>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_RCC_GetSysClockFreq+0x34>
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2b0c      	cmp	r3, #12
 8005190:	d121      	bne.n	80051d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d11e      	bne.n	80051d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005198:	4b34      	ldr	r3, [pc, #208]	@ (800526c <HAL_RCC_GetSysClockFreq+0x108>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d107      	bne.n	80051b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051a4:	4b31      	ldr	r3, [pc, #196]	@ (800526c <HAL_RCC_GetSysClockFreq+0x108>)
 80051a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051aa:	0a1b      	lsrs	r3, r3, #8
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	e005      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051b4:	4b2d      	ldr	r3, [pc, #180]	@ (800526c <HAL_RCC_GetSysClockFreq+0x108>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80051c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x10c>)
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10d      	bne.n	80051ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051d4:	e00a      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d102      	bne.n	80051e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051dc:	4b25      	ldr	r3, [pc, #148]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x110>)
 80051de:	61bb      	str	r3, [r7, #24]
 80051e0:	e004      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d101      	bne.n	80051ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051e8:	4b23      	ldr	r3, [pc, #140]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x114>)
 80051ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	2b0c      	cmp	r3, #12
 80051f0:	d134      	bne.n	800525c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051f2:	4b1e      	ldr	r3, [pc, #120]	@ (800526c <HAL_RCC_GetSysClockFreq+0x108>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d003      	beq.n	800520a <HAL_RCC_GetSysClockFreq+0xa6>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b03      	cmp	r3, #3
 8005206:	d003      	beq.n	8005210 <HAL_RCC_GetSysClockFreq+0xac>
 8005208:	e005      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800520a:	4b1a      	ldr	r3, [pc, #104]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x110>)
 800520c:	617b      	str	r3, [r7, #20]
      break;
 800520e:	e005      	b.n	800521c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005210:	4b19      	ldr	r3, [pc, #100]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x114>)
 8005212:	617b      	str	r3, [r7, #20]
      break;
 8005214:	e002      	b.n	800521c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	617b      	str	r3, [r7, #20]
      break;
 800521a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800521c:	4b13      	ldr	r3, [pc, #76]	@ (800526c <HAL_RCC_GetSysClockFreq+0x108>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	3301      	adds	r3, #1
 8005228:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800522a:	4b10      	ldr	r3, [pc, #64]	@ (800526c <HAL_RCC_GetSysClockFreq+0x108>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	0a1b      	lsrs	r3, r3, #8
 8005230:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	fb03 f202 	mul.w	r2, r3, r2
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005240:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005242:	4b0a      	ldr	r3, [pc, #40]	@ (800526c <HAL_RCC_GetSysClockFreq+0x108>)
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	0e5b      	lsrs	r3, r3, #25
 8005248:	f003 0303 	and.w	r3, r3, #3
 800524c:	3301      	adds	r3, #1
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	fbb2 f3f3 	udiv	r3, r2, r3
 800525a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800525c:	69bb      	ldr	r3, [r7, #24]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3724      	adds	r7, #36	@ 0x24
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000
 8005270:	080096c8 	.word	0x080096c8
 8005274:	00f42400 	.word	0x00f42400
 8005278:	007a1200 	.word	0x007a1200

0800527c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005280:	4b03      	ldr	r3, [pc, #12]	@ (8005290 <HAL_RCC_GetHCLKFreq+0x14>)
 8005282:	681b      	ldr	r3, [r3, #0]
}
 8005284:	4618      	mov	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20000000 	.word	0x20000000

08005294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005298:	f7ff fff0 	bl	800527c <HAL_RCC_GetHCLKFreq>
 800529c:	4602      	mov	r2, r0
 800529e:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	0a1b      	lsrs	r3, r3, #8
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	4904      	ldr	r1, [pc, #16]	@ (80052bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80052aa:	5ccb      	ldrb	r3, [r1, r3]
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40021000 	.word	0x40021000
 80052bc:	080096c0 	.word	0x080096c0

080052c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052c4:	f7ff ffda 	bl	800527c <HAL_RCC_GetHCLKFreq>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4b06      	ldr	r3, [pc, #24]	@ (80052e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	0adb      	lsrs	r3, r3, #11
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	4904      	ldr	r1, [pc, #16]	@ (80052e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052d6:	5ccb      	ldrb	r3, [r1, r3]
 80052d8:	f003 031f 	and.w	r3, r3, #31
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40021000 	.word	0x40021000
 80052e8:	080096c0 	.word	0x080096c0

080052ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	220f      	movs	r2, #15
 80052fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80052fc:	4b12      	ldr	r3, [pc, #72]	@ (8005348 <HAL_RCC_GetClockConfig+0x5c>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 0203 	and.w	r2, r3, #3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005308:	4b0f      	ldr	r3, [pc, #60]	@ (8005348 <HAL_RCC_GetClockConfig+0x5c>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005314:	4b0c      	ldr	r3, [pc, #48]	@ (8005348 <HAL_RCC_GetClockConfig+0x5c>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005320:	4b09      	ldr	r3, [pc, #36]	@ (8005348 <HAL_RCC_GetClockConfig+0x5c>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	08db      	lsrs	r3, r3, #3
 8005326:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800532e:	4b07      	ldr	r3, [pc, #28]	@ (800534c <HAL_RCC_GetClockConfig+0x60>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0207 	and.w	r2, r3, #7
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	601a      	str	r2, [r3, #0]
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40021000 	.word	0x40021000
 800534c:	40022000 	.word	0x40022000

08005350 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005358:	2300      	movs	r3, #0
 800535a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800535c:	4b2a      	ldr	r3, [pc, #168]	@ (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800535e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005368:	f7ff f984 	bl	8004674 <HAL_PWREx_GetVoltageRange>
 800536c:	6178      	str	r0, [r7, #20]
 800536e:	e014      	b.n	800539a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005370:	4b25      	ldr	r3, [pc, #148]	@ (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005374:	4a24      	ldr	r2, [pc, #144]	@ (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800537a:	6593      	str	r3, [r2, #88]	@ 0x58
 800537c:	4b22      	ldr	r3, [pc, #136]	@ (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800537e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005388:	f7ff f974 	bl	8004674 <HAL_PWREx_GetVoltageRange>
 800538c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800538e:	4b1e      	ldr	r3, [pc, #120]	@ (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005392:	4a1d      	ldr	r2, [pc, #116]	@ (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005394:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005398:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053a0:	d10b      	bne.n	80053ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b80      	cmp	r3, #128	@ 0x80
 80053a6:	d919      	bls.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80053ac:	d902      	bls.n	80053b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053ae:	2302      	movs	r3, #2
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	e013      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053b4:	2301      	movs	r3, #1
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	e010      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b80      	cmp	r3, #128	@ 0x80
 80053be:	d902      	bls.n	80053c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80053c0:	2303      	movs	r3, #3
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	e00a      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b80      	cmp	r3, #128	@ 0x80
 80053ca:	d102      	bne.n	80053d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053cc:	2302      	movs	r3, #2
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	e004      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b70      	cmp	r3, #112	@ 0x70
 80053d6:	d101      	bne.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053d8:	2301      	movs	r3, #1
 80053da:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053dc:	4b0b      	ldr	r3, [pc, #44]	@ (800540c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f023 0207 	bic.w	r2, r3, #7
 80053e4:	4909      	ldr	r1, [pc, #36]	@ (800540c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053ec:	4b07      	ldr	r3, [pc, #28]	@ (800540c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d001      	beq.n	80053fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40021000 	.word	0x40021000
 800540c:	40022000 	.word	0x40022000

08005410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005418:	2300      	movs	r3, #0
 800541a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800541c:	2300      	movs	r3, #0
 800541e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005428:	2b00      	cmp	r3, #0
 800542a:	d031      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005430:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005434:	d01a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005436:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800543a:	d814      	bhi.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800543c:	2b00      	cmp	r3, #0
 800543e:	d009      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005440:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005444:	d10f      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005446:	4b5d      	ldr	r3, [pc, #372]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	4a5c      	ldr	r2, [pc, #368]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005450:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005452:	e00c      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	2100      	movs	r1, #0
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fa44 	bl	80058e8 <RCCEx_PLLSAI1_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005464:	e003      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	74fb      	strb	r3, [r7, #19]
      break;
 800546a:	e000      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800546c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800546e:	7cfb      	ldrb	r3, [r7, #19]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10b      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005474:	4b51      	ldr	r3, [pc, #324]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005482:	494e      	ldr	r1, [pc, #312]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800548a:	e001      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548c:	7cfb      	ldrb	r3, [r7, #19]
 800548e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 809e 	beq.w	80055da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800549e:	2300      	movs	r3, #0
 80054a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054a2:	4b46      	ldr	r3, [pc, #280]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80054b2:	2300      	movs	r3, #0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00d      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054b8:	4b40      	ldr	r3, [pc, #256]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054bc:	4a3f      	ldr	r2, [pc, #252]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80054c4:	4b3d      	ldr	r3, [pc, #244]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054d0:	2301      	movs	r3, #1
 80054d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054d4:	4b3a      	ldr	r3, [pc, #232]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a39      	ldr	r2, [pc, #228]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054e0:	f7fc fb46 	bl	8001b70 <HAL_GetTick>
 80054e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054e6:	e009      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e8:	f7fc fb42 	bl	8001b70 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d902      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	74fb      	strb	r3, [r7, #19]
        break;
 80054fa:	e005      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054fc:	4b30      	ldr	r3, [pc, #192]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0ef      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005508:	7cfb      	ldrb	r3, [r7, #19]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d15a      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800550e:	4b2b      	ldr	r3, [pc, #172]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005514:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005518:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01e      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	429a      	cmp	r2, r3
 8005528:	d019      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800552a:	4b24      	ldr	r3, [pc, #144]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005534:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005536:	4b21      	ldr	r3, [pc, #132]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553c:	4a1f      	ldr	r2, [pc, #124]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800553e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005542:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005546:	4b1d      	ldr	r3, [pc, #116]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800554c:	4a1b      	ldr	r2, [pc, #108]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800554e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005552:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005556:	4a19      	ldr	r2, [pc, #100]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d016      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005568:	f7fc fb02 	bl	8001b70 <HAL_GetTick>
 800556c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800556e:	e00b      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005570:	f7fc fafe 	bl	8001b70 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d902      	bls.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	74fb      	strb	r3, [r7, #19]
            break;
 8005586:	e006      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005588:	4b0c      	ldr	r3, [pc, #48]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800558a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0ec      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005596:	7cfb      	ldrb	r3, [r7, #19]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10b      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800559c:	4b07      	ldr	r3, [pc, #28]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055aa:	4904      	ldr	r1, [pc, #16]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80055b2:	e009      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055b4:	7cfb      	ldrb	r3, [r7, #19]
 80055b6:	74bb      	strb	r3, [r7, #18]
 80055b8:	e006      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80055ba:	bf00      	nop
 80055bc:	40021000 	.word	0x40021000
 80055c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c4:	7cfb      	ldrb	r3, [r7, #19]
 80055c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055c8:	7c7b      	ldrb	r3, [r7, #17]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d105      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ce:	4b9e      	ldr	r3, [pc, #632]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d2:	4a9d      	ldr	r2, [pc, #628]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055e6:	4b98      	ldr	r3, [pc, #608]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ec:	f023 0203 	bic.w	r2, r3, #3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	4994      	ldr	r1, [pc, #592]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005608:	4b8f      	ldr	r3, [pc, #572]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560e:	f023 020c 	bic.w	r2, r3, #12
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	498c      	ldr	r1, [pc, #560]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800562a:	4b87      	ldr	r3, [pc, #540]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005630:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005638:	4983      	ldr	r1, [pc, #524]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800564c:	4b7e      	ldr	r3, [pc, #504]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005652:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	497b      	ldr	r1, [pc, #492]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800566e:	4b76      	ldr	r3, [pc, #472]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005674:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567c:	4972      	ldr	r1, [pc, #456]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005690:	4b6d      	ldr	r3, [pc, #436]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005696:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569e:	496a      	ldr	r1, [pc, #424]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056b2:	4b65      	ldr	r3, [pc, #404]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056c0:	4961      	ldr	r1, [pc, #388]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056d4:	4b5c      	ldr	r3, [pc, #368]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056da:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e2:	4959      	ldr	r1, [pc, #356]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056f6:	4b54      	ldr	r3, [pc, #336]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005704:	4950      	ldr	r1, [pc, #320]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005718:	4b4b      	ldr	r3, [pc, #300]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005726:	4948      	ldr	r1, [pc, #288]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800573a:	4b43      	ldr	r3, [pc, #268]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800573c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005740:	f023 0203 	bic.w	r2, r3, #3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005748:	493f      	ldr	r1, [pc, #252]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d028      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800575c:	4b3a      	ldr	r3, [pc, #232]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005762:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800576a:	4937      	ldr	r1, [pc, #220]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800577a:	d106      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800577c:	4b32      	ldr	r3, [pc, #200]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	4a31      	ldr	r2, [pc, #196]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005786:	60d3      	str	r3, [r2, #12]
 8005788:	e011      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005792:	d10c      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3304      	adds	r3, #4
 8005798:	2101      	movs	r1, #1
 800579a:	4618      	mov	r0, r3
 800579c:	f000 f8a4 	bl	80058e8 <RCCEx_PLLSAI1_Config>
 80057a0:	4603      	mov	r3, r0
 80057a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80057a4:	7cfb      	ldrb	r3, [r7, #19]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80057aa:	7cfb      	ldrb	r3, [r7, #19]
 80057ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d028      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80057ba:	4b23      	ldr	r3, [pc, #140]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c8:	491f      	ldr	r1, [pc, #124]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057d8:	d106      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057da:	4b1b      	ldr	r3, [pc, #108]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	4a1a      	ldr	r2, [pc, #104]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057e4:	60d3      	str	r3, [r2, #12]
 80057e6:	e011      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057f0:	d10c      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3304      	adds	r3, #4
 80057f6:	2101      	movs	r1, #1
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 f875 	bl	80058e8 <RCCEx_PLLSAI1_Config>
 80057fe:	4603      	mov	r3, r0
 8005800:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005802:	7cfb      	ldrb	r3, [r7, #19]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8005808:	7cfb      	ldrb	r3, [r7, #19]
 800580a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d02b      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005818:	4b0b      	ldr	r3, [pc, #44]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005826:	4908      	ldr	r1, [pc, #32]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005832:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005836:	d109      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005838:	4b03      	ldr	r3, [pc, #12]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4a02      	ldr	r2, [pc, #8]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800583e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005842:	60d3      	str	r3, [r2, #12]
 8005844:	e014      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8005846:	bf00      	nop
 8005848:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005850:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005854:	d10c      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3304      	adds	r3, #4
 800585a:	2101      	movs	r1, #1
 800585c:	4618      	mov	r0, r3
 800585e:	f000 f843 	bl	80058e8 <RCCEx_PLLSAI1_Config>
 8005862:	4603      	mov	r3, r0
 8005864:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005866:	7cfb      	ldrb	r3, [r7, #19]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 800586c:	7cfb      	ldrb	r3, [r7, #19]
 800586e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01c      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800587c:	4b19      	ldr	r3, [pc, #100]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005882:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800588a:	4916      	ldr	r1, [pc, #88]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800589a:	d10c      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3304      	adds	r3, #4
 80058a0:	2102      	movs	r1, #2
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 f820 	bl	80058e8 <RCCEx_PLLSAI1_Config>
 80058a8:	4603      	mov	r3, r0
 80058aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058ac:	7cfb      	ldrb	r3, [r7, #19]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80058b2:	7cfb      	ldrb	r3, [r7, #19]
 80058b4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058c2:	4b08      	ldr	r3, [pc, #32]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80058c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d0:	4904      	ldr	r1, [pc, #16]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40021000 	.word	0x40021000

080058e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058f6:	4b74      	ldr	r3, [pc, #464]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d018      	beq.n	8005934 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005902:	4b71      	ldr	r3, [pc, #452]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f003 0203 	and.w	r2, r3, #3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d10d      	bne.n	800592e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
       ||
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800591a:	4b6b      	ldr	r3, [pc, #428]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	091b      	lsrs	r3, r3, #4
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
       ||
 800592a:	429a      	cmp	r2, r3
 800592c:	d047      	beq.n	80059be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
 8005932:	e044      	b.n	80059be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b03      	cmp	r3, #3
 800593a:	d018      	beq.n	800596e <RCCEx_PLLSAI1_Config+0x86>
 800593c:	2b03      	cmp	r3, #3
 800593e:	d825      	bhi.n	800598c <RCCEx_PLLSAI1_Config+0xa4>
 8005940:	2b01      	cmp	r3, #1
 8005942:	d002      	beq.n	800594a <RCCEx_PLLSAI1_Config+0x62>
 8005944:	2b02      	cmp	r3, #2
 8005946:	d009      	beq.n	800595c <RCCEx_PLLSAI1_Config+0x74>
 8005948:	e020      	b.n	800598c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800594a:	4b5f      	ldr	r3, [pc, #380]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d11d      	bne.n	8005992 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800595a:	e01a      	b.n	8005992 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800595c:	4b5a      	ldr	r3, [pc, #360]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005964:	2b00      	cmp	r3, #0
 8005966:	d116      	bne.n	8005996 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800596c:	e013      	b.n	8005996 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800596e:	4b56      	ldr	r3, [pc, #344]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10f      	bne.n	800599a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800597a:	4b53      	ldr	r3, [pc, #332]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800598a:	e006      	b.n	800599a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
      break;
 8005990:	e004      	b.n	800599c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005992:	bf00      	nop
 8005994:	e002      	b.n	800599c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005996:	bf00      	nop
 8005998:	e000      	b.n	800599c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800599a:	bf00      	nop
    }

    if(status == HAL_OK)
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10d      	bne.n	80059be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059a2:	4b49      	ldr	r3, [pc, #292]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6819      	ldr	r1, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	430b      	orrs	r3, r1
 80059b8:	4943      	ldr	r1, [pc, #268]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d17c      	bne.n	8005abe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059c4:	4b40      	ldr	r3, [pc, #256]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a3f      	ldr	r2, [pc, #252]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d0:	f7fc f8ce 	bl	8001b70 <HAL_GetTick>
 80059d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059d6:	e009      	b.n	80059ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059d8:	f7fc f8ca 	bl	8001b70 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d902      	bls.n	80059ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	73fb      	strb	r3, [r7, #15]
        break;
 80059ea:	e005      	b.n	80059f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059ec:	4b36      	ldr	r3, [pc, #216]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1ef      	bne.n	80059d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d15f      	bne.n	8005abe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d110      	bne.n	8005a26 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a04:	4b30      	ldr	r3, [pc, #192]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005a0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6892      	ldr	r2, [r2, #8]
 8005a14:	0211      	lsls	r1, r2, #8
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68d2      	ldr	r2, [r2, #12]
 8005a1a:	06d2      	lsls	r2, r2, #27
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	492a      	ldr	r1, [pc, #168]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	610b      	str	r3, [r1, #16]
 8005a24:	e027      	b.n	8005a76 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d112      	bne.n	8005a52 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a2c:	4b26      	ldr	r3, [pc, #152]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005a34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6892      	ldr	r2, [r2, #8]
 8005a3c:	0211      	lsls	r1, r2, #8
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6912      	ldr	r2, [r2, #16]
 8005a42:	0852      	lsrs	r2, r2, #1
 8005a44:	3a01      	subs	r2, #1
 8005a46:	0552      	lsls	r2, r2, #21
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	491f      	ldr	r1, [pc, #124]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	610b      	str	r3, [r1, #16]
 8005a50:	e011      	b.n	8005a76 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a52:	4b1d      	ldr	r3, [pc, #116]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a5a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6892      	ldr	r2, [r2, #8]
 8005a62:	0211      	lsls	r1, r2, #8
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6952      	ldr	r2, [r2, #20]
 8005a68:	0852      	lsrs	r2, r2, #1
 8005a6a:	3a01      	subs	r2, #1
 8005a6c:	0652      	lsls	r2, r2, #25
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	4915      	ldr	r1, [pc, #84]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a76:	4b14      	ldr	r3, [pc, #80]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a13      	ldr	r2, [pc, #76]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a80:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a82:	f7fc f875 	bl	8001b70 <HAL_GetTick>
 8005a86:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a88:	e009      	b.n	8005a9e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a8a:	f7fc f871 	bl	8001b70 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d902      	bls.n	8005a9e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	73fb      	strb	r3, [r7, #15]
          break;
 8005a9c:	e005      	b.n	8005aaa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0ef      	beq.n	8005a8a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d106      	bne.n	8005abe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ab0:	4b05      	ldr	r3, [pc, #20]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	4903      	ldr	r1, [pc, #12]	@ (8005ac8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40021000 	.word	0x40021000

08005acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e095      	b.n	8005c0a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d108      	bne.n	8005af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005aee:	d009      	beq.n	8005b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	61da      	str	r2, [r3, #28]
 8005af6:	e005      	b.n	8005b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fb fcee 	bl	8001500 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b44:	d902      	bls.n	8005b4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	e002      	b.n	8005b52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005b5a:	d007      	beq.n	8005b6c <HAL_SPI_Init+0xa0>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b64:	d002      	beq.n	8005b6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bae:	ea42 0103 	orr.w	r1, r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	0c1b      	lsrs	r3, r3, #16
 8005bc8:	f003 0204 	and.w	r2, r3, #4
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005be8:	ea42 0103 	orr.w	r1, r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e049      	b.n	8005cb8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f841 	bl	8005cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2202      	movs	r2, #2
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f000 fca5 	bl	80065a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d001      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e040      	b.n	8005d6e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1c      	ldr	r2, [pc, #112]	@ (8005d7c <HAL_TIM_Base_Start_IT+0xa8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00e      	beq.n	8005d2c <HAL_TIM_Base_Start_IT+0x58>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d16:	d009      	beq.n	8005d2c <HAL_TIM_Base_Start_IT+0x58>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a18      	ldr	r2, [pc, #96]	@ (8005d80 <HAL_TIM_Base_Start_IT+0xac>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d004      	beq.n	8005d2c <HAL_TIM_Base_Start_IT+0x58>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a17      	ldr	r2, [pc, #92]	@ (8005d84 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d115      	bne.n	8005d58 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	4b15      	ldr	r3, [pc, #84]	@ (8005d88 <HAL_TIM_Base_Start_IT+0xb4>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b06      	cmp	r3, #6
 8005d3c:	d015      	beq.n	8005d6a <HAL_TIM_Base_Start_IT+0x96>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d44:	d011      	beq.n	8005d6a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0201 	orr.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d56:	e008      	b.n	8005d6a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	e000      	b.n	8005d6c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40012c00 	.word	0x40012c00
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40014000 	.word	0x40014000
 8005d88:	00010007 	.word	0x00010007

08005d8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e049      	b.n	8005e32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7fb fd30 	bl	8001818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	f000 fbe8 	bl	80065a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d109      	bne.n	8005e60 <HAL_TIM_PWM_Start+0x24>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	bf14      	ite	ne
 8005e58:	2301      	movne	r3, #1
 8005e5a:	2300      	moveq	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	e03c      	b.n	8005eda <HAL_TIM_PWM_Start+0x9e>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d109      	bne.n	8005e7a <HAL_TIM_PWM_Start+0x3e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	bf14      	ite	ne
 8005e72:	2301      	movne	r3, #1
 8005e74:	2300      	moveq	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	e02f      	b.n	8005eda <HAL_TIM_PWM_Start+0x9e>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d109      	bne.n	8005e94 <HAL_TIM_PWM_Start+0x58>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	bf14      	ite	ne
 8005e8c:	2301      	movne	r3, #1
 8005e8e:	2300      	moveq	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e022      	b.n	8005eda <HAL_TIM_PWM_Start+0x9e>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b0c      	cmp	r3, #12
 8005e98:	d109      	bne.n	8005eae <HAL_TIM_PWM_Start+0x72>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	bf14      	ite	ne
 8005ea6:	2301      	movne	r3, #1
 8005ea8:	2300      	moveq	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	e015      	b.n	8005eda <HAL_TIM_PWM_Start+0x9e>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d109      	bne.n	8005ec8 <HAL_TIM_PWM_Start+0x8c>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	bf14      	ite	ne
 8005ec0:	2301      	movne	r3, #1
 8005ec2:	2300      	moveq	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	e008      	b.n	8005eda <HAL_TIM_PWM_Start+0x9e>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	bf14      	ite	ne
 8005ed4:	2301      	movne	r3, #1
 8005ed6:	2300      	moveq	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e083      	b.n	8005fea <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <HAL_TIM_PWM_Start+0xb6>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ef0:	e023      	b.n	8005f3a <HAL_TIM_PWM_Start+0xfe>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d104      	bne.n	8005f02 <HAL_TIM_PWM_Start+0xc6>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f00:	e01b      	b.n	8005f3a <HAL_TIM_PWM_Start+0xfe>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d104      	bne.n	8005f12 <HAL_TIM_PWM_Start+0xd6>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f10:	e013      	b.n	8005f3a <HAL_TIM_PWM_Start+0xfe>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b0c      	cmp	r3, #12
 8005f16:	d104      	bne.n	8005f22 <HAL_TIM_PWM_Start+0xe6>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f20:	e00b      	b.n	8005f3a <HAL_TIM_PWM_Start+0xfe>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b10      	cmp	r3, #16
 8005f26:	d104      	bne.n	8005f32 <HAL_TIM_PWM_Start+0xf6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f30:	e003      	b.n	8005f3a <HAL_TIM_PWM_Start+0xfe>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2202      	movs	r2, #2
 8005f36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fe24 	bl	8006b90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a29      	ldr	r2, [pc, #164]	@ (8005ff4 <HAL_TIM_PWM_Start+0x1b8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d009      	beq.n	8005f66 <HAL_TIM_PWM_Start+0x12a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a28      	ldr	r2, [pc, #160]	@ (8005ff8 <HAL_TIM_PWM_Start+0x1bc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <HAL_TIM_PWM_Start+0x12a>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a26      	ldr	r2, [pc, #152]	@ (8005ffc <HAL_TIM_PWM_Start+0x1c0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d101      	bne.n	8005f6a <HAL_TIM_PWM_Start+0x12e>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <HAL_TIM_PWM_Start+0x130>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d007      	beq.n	8005f80 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f7e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff4 <HAL_TIM_PWM_Start+0x1b8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00e      	beq.n	8005fa8 <HAL_TIM_PWM_Start+0x16c>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f92:	d009      	beq.n	8005fa8 <HAL_TIM_PWM_Start+0x16c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a19      	ldr	r2, [pc, #100]	@ (8006000 <HAL_TIM_PWM_Start+0x1c4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <HAL_TIM_PWM_Start+0x16c>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a15      	ldr	r2, [pc, #84]	@ (8005ff8 <HAL_TIM_PWM_Start+0x1bc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d115      	bne.n	8005fd4 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	4b15      	ldr	r3, [pc, #84]	@ (8006004 <HAL_TIM_PWM_Start+0x1c8>)
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b06      	cmp	r3, #6
 8005fb8:	d015      	beq.n	8005fe6 <HAL_TIM_PWM_Start+0x1aa>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc0:	d011      	beq.n	8005fe6 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0201 	orr.w	r2, r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd2:	e008      	b.n	8005fe6 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0201 	orr.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	e000      	b.n	8005fe8 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40012c00 	.word	0x40012c00
 8005ff8:	40014000 	.word	0x40014000
 8005ffc:	40014400 	.word	0x40014400
 8006000:	40000400 	.word	0x40000400
 8006004:	00010007 	.word	0x00010007

08006008 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2200      	movs	r2, #0
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fdb8 	bl	8006b90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a39      	ldr	r2, [pc, #228]	@ (800610c <HAL_TIM_PWM_Stop+0x104>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d009      	beq.n	800603e <HAL_TIM_PWM_Stop+0x36>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a38      	ldr	r2, [pc, #224]	@ (8006110 <HAL_TIM_PWM_Stop+0x108>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d004      	beq.n	800603e <HAL_TIM_PWM_Stop+0x36>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a36      	ldr	r2, [pc, #216]	@ (8006114 <HAL_TIM_PWM_Stop+0x10c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d101      	bne.n	8006042 <HAL_TIM_PWM_Stop+0x3a>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <HAL_TIM_PWM_Stop+0x3c>
 8006042:	2300      	movs	r3, #0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d017      	beq.n	8006078 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6a1a      	ldr	r2, [r3, #32]
 800604e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006052:	4013      	ands	r3, r2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10f      	bne.n	8006078 <HAL_TIM_PWM_Stop+0x70>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6a1a      	ldr	r2, [r3, #32]
 800605e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006062:	4013      	ands	r3, r2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d107      	bne.n	8006078 <HAL_TIM_PWM_Stop+0x70>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006076:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6a1a      	ldr	r2, [r3, #32]
 800607e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006082:	4013      	ands	r3, r2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10f      	bne.n	80060a8 <HAL_TIM_PWM_Stop+0xa0>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6a1a      	ldr	r2, [r3, #32]
 800608e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006092:	4013      	ands	r3, r2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d107      	bne.n	80060a8 <HAL_TIM_PWM_Stop+0xa0>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0201 	bic.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d104      	bne.n	80060b8 <HAL_TIM_PWM_Stop+0xb0>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060b6:	e023      	b.n	8006100 <HAL_TIM_PWM_Stop+0xf8>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d104      	bne.n	80060c8 <HAL_TIM_PWM_Stop+0xc0>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060c6:	e01b      	b.n	8006100 <HAL_TIM_PWM_Stop+0xf8>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d104      	bne.n	80060d8 <HAL_TIM_PWM_Stop+0xd0>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060d6:	e013      	b.n	8006100 <HAL_TIM_PWM_Stop+0xf8>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b0c      	cmp	r3, #12
 80060dc:	d104      	bne.n	80060e8 <HAL_TIM_PWM_Stop+0xe0>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060e6:	e00b      	b.n	8006100 <HAL_TIM_PWM_Stop+0xf8>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b10      	cmp	r3, #16
 80060ec:	d104      	bne.n	80060f8 <HAL_TIM_PWM_Stop+0xf0>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060f6:	e003      	b.n	8006100 <HAL_TIM_PWM_Stop+0xf8>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40012c00 	.word	0x40012c00
 8006110:	40014000 	.word	0x40014000
 8006114:	40014400 	.word	0x40014400

08006118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d020      	beq.n	800617c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01b      	beq.n	800617c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0202 	mvn.w	r2, #2
 800614c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f9fe 	bl	8006564 <HAL_TIM_IC_CaptureCallback>
 8006168:	e005      	b.n	8006176 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f9f0 	bl	8006550 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fa01 	bl	8006578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	d020      	beq.n	80061c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01b      	beq.n	80061c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f06f 0204 	mvn.w	r2, #4
 8006198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2202      	movs	r2, #2
 800619e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f9d8 	bl	8006564 <HAL_TIM_IC_CaptureCallback>
 80061b4:	e005      	b.n	80061c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f9ca 	bl	8006550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f9db 	bl	8006578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d020      	beq.n	8006214 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01b      	beq.n	8006214 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f06f 0208 	mvn.w	r2, #8
 80061e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2204      	movs	r2, #4
 80061ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f9b2 	bl	8006564 <HAL_TIM_IC_CaptureCallback>
 8006200:	e005      	b.n	800620e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f9a4 	bl	8006550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f9b5 	bl	8006578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f003 0310 	and.w	r3, r3, #16
 800621a:	2b00      	cmp	r3, #0
 800621c:	d020      	beq.n	8006260 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01b      	beq.n	8006260 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0210 	mvn.w	r2, #16
 8006230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2208      	movs	r2, #8
 8006236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f98c 	bl	8006564 <HAL_TIM_IC_CaptureCallback>
 800624c:	e005      	b.n	800625a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f97e 	bl	8006550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f98f 	bl	8006578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00c      	beq.n	8006284 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d007      	beq.n	8006284 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0201 	mvn.w	r2, #1
 800627c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fb f8e8 	bl	8001454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800628a:	2b00      	cmp	r3, #0
 800628c:	d104      	bne.n	8006298 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00c      	beq.n	80062b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d007      	beq.n	80062b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80062aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fd0d 	bl	8006ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00c      	beq.n	80062d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80062ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fd05 	bl	8006ce0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00c      	beq.n	80062fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f949 	bl	800658c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00c      	beq.n	800631e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d007      	beq.n	800631e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f06f 0220 	mvn.w	r2, #32
 8006316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fccd 	bl	8006cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800631e:	bf00      	nop
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006342:	2302      	movs	r3, #2
 8006344:	e0ff      	b.n	8006546 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b14      	cmp	r3, #20
 8006352:	f200 80f0 	bhi.w	8006536 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006356:	a201      	add	r2, pc, #4	@ (adr r2, 800635c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	080063b1 	.word	0x080063b1
 8006360:	08006537 	.word	0x08006537
 8006364:	08006537 	.word	0x08006537
 8006368:	08006537 	.word	0x08006537
 800636c:	080063f1 	.word	0x080063f1
 8006370:	08006537 	.word	0x08006537
 8006374:	08006537 	.word	0x08006537
 8006378:	08006537 	.word	0x08006537
 800637c:	08006433 	.word	0x08006433
 8006380:	08006537 	.word	0x08006537
 8006384:	08006537 	.word	0x08006537
 8006388:	08006537 	.word	0x08006537
 800638c:	08006473 	.word	0x08006473
 8006390:	08006537 	.word	0x08006537
 8006394:	08006537 	.word	0x08006537
 8006398:	08006537 	.word	0x08006537
 800639c:	080064b5 	.word	0x080064b5
 80063a0:	08006537 	.word	0x08006537
 80063a4:	08006537 	.word	0x08006537
 80063a8:	08006537 	.word	0x08006537
 80063ac:	080064f5 	.word	0x080064f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 f96c 	bl	8006694 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699a      	ldr	r2, [r3, #24]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0208 	orr.w	r2, r2, #8
 80063ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 0204 	bic.w	r2, r2, #4
 80063da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6999      	ldr	r1, [r3, #24]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	691a      	ldr	r2, [r3, #16]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	619a      	str	r2, [r3, #24]
      break;
 80063ee:	e0a5      	b.n	800653c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 f9c8 	bl	800678c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800640a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	699a      	ldr	r2, [r3, #24]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800641a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6999      	ldr	r1, [r3, #24]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	021a      	lsls	r2, r3, #8
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	619a      	str	r2, [r3, #24]
      break;
 8006430:	e084      	b.n	800653c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fa21 	bl	8006880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69da      	ldr	r2, [r3, #28]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 0208 	orr.w	r2, r2, #8
 800644c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0204 	bic.w	r2, r2, #4
 800645c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69d9      	ldr	r1, [r3, #28]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	61da      	str	r2, [r3, #28]
      break;
 8006470:	e064      	b.n	800653c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	4618      	mov	r0, r3
 800647a:	f000 fa79 	bl	8006970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800648c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69da      	ldr	r2, [r3, #28]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800649c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69d9      	ldr	r1, [r3, #28]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	021a      	lsls	r2, r3, #8
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	61da      	str	r2, [r3, #28]
      break;
 80064b2:	e043      	b.n	800653c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fab6 	bl	8006a2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0208 	orr.w	r2, r2, #8
 80064ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0204 	bic.w	r2, r2, #4
 80064de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	691a      	ldr	r2, [r3, #16]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80064f2:	e023      	b.n	800653c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 faee 	bl	8006adc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800650e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800651e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	021a      	lsls	r2, r3, #8
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006534:	e002      	b.n	800653c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	75fb      	strb	r3, [r7, #23]
      break;
 800653a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop

08006550 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a34      	ldr	r2, [pc, #208]	@ (8006684 <TIM_Base_SetConfig+0xe4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d007      	beq.n	80065c8 <TIM_Base_SetConfig+0x28>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065be:	d003      	beq.n	80065c8 <TIM_Base_SetConfig+0x28>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a31      	ldr	r2, [pc, #196]	@ (8006688 <TIM_Base_SetConfig+0xe8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d108      	bne.n	80065da <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a29      	ldr	r2, [pc, #164]	@ (8006684 <TIM_Base_SetConfig+0xe4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00f      	beq.n	8006602 <TIM_Base_SetConfig+0x62>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e8:	d00b      	beq.n	8006602 <TIM_Base_SetConfig+0x62>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a26      	ldr	r2, [pc, #152]	@ (8006688 <TIM_Base_SetConfig+0xe8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d007      	beq.n	8006602 <TIM_Base_SetConfig+0x62>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a25      	ldr	r2, [pc, #148]	@ (800668c <TIM_Base_SetConfig+0xec>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_Base_SetConfig+0x62>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a24      	ldr	r2, [pc, #144]	@ (8006690 <TIM_Base_SetConfig+0xf0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d108      	bne.n	8006614 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a12      	ldr	r2, [pc, #72]	@ (8006684 <TIM_Base_SetConfig+0xe4>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d007      	beq.n	8006650 <TIM_Base_SetConfig+0xb0>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a12      	ldr	r2, [pc, #72]	@ (800668c <TIM_Base_SetConfig+0xec>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_Base_SetConfig+0xb0>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a11      	ldr	r2, [pc, #68]	@ (8006690 <TIM_Base_SetConfig+0xf0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d103      	bne.n	8006658 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b01      	cmp	r3, #1
 8006668:	d105      	bne.n	8006676 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f023 0201 	bic.w	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	611a      	str	r2, [r3, #16]
  }
}
 8006676:	bf00      	nop
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	40012c00 	.word	0x40012c00
 8006688:	40000400 	.word	0x40000400
 800668c:	40014000 	.word	0x40014000
 8006690:	40014400 	.word	0x40014400

08006694 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	f023 0201 	bic.w	r2, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f023 0302 	bic.w	r3, r3, #2
 80066e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a24      	ldr	r2, [pc, #144]	@ (8006780 <TIM_OC1_SetConfig+0xec>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d007      	beq.n	8006704 <TIM_OC1_SetConfig+0x70>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a23      	ldr	r2, [pc, #140]	@ (8006784 <TIM_OC1_SetConfig+0xf0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d003      	beq.n	8006704 <TIM_OC1_SetConfig+0x70>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a22      	ldr	r2, [pc, #136]	@ (8006788 <TIM_OC1_SetConfig+0xf4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d10c      	bne.n	800671e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f023 0308 	bic.w	r3, r3, #8
 800670a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f023 0304 	bic.w	r3, r3, #4
 800671c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a17      	ldr	r2, [pc, #92]	@ (8006780 <TIM_OC1_SetConfig+0xec>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d007      	beq.n	8006736 <TIM_OC1_SetConfig+0xa2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a16      	ldr	r2, [pc, #88]	@ (8006784 <TIM_OC1_SetConfig+0xf0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d003      	beq.n	8006736 <TIM_OC1_SetConfig+0xa2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a15      	ldr	r2, [pc, #84]	@ (8006788 <TIM_OC1_SetConfig+0xf4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d111      	bne.n	800675a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800673c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	621a      	str	r2, [r3, #32]
}
 8006774:	bf00      	nop
 8006776:	371c      	adds	r7, #28
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	40012c00 	.word	0x40012c00
 8006784:	40014000 	.word	0x40014000
 8006788:	40014400 	.word	0x40014400

0800678c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	f023 0210 	bic.w	r2, r3, #16
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f023 0320 	bic.w	r3, r3, #32
 80067da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a22      	ldr	r2, [pc, #136]	@ (8006874 <TIM_OC2_SetConfig+0xe8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d10d      	bne.n	800680c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800680a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a19      	ldr	r2, [pc, #100]	@ (8006874 <TIM_OC2_SetConfig+0xe8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d007      	beq.n	8006824 <TIM_OC2_SetConfig+0x98>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a18      	ldr	r2, [pc, #96]	@ (8006878 <TIM_OC2_SetConfig+0xec>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d003      	beq.n	8006824 <TIM_OC2_SetConfig+0x98>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a17      	ldr	r2, [pc, #92]	@ (800687c <TIM_OC2_SetConfig+0xf0>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d113      	bne.n	800684c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800682a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	621a      	str	r2, [r3, #32]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	40012c00 	.word	0x40012c00
 8006878:	40014000 	.word	0x40014000
 800687c:	40014400 	.word	0x40014400

08006880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	021b      	lsls	r3, r3, #8
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a21      	ldr	r2, [pc, #132]	@ (8006964 <TIM_OC3_SetConfig+0xe4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d10d      	bne.n	80068fe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	021b      	lsls	r3, r3, #8
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a18      	ldr	r2, [pc, #96]	@ (8006964 <TIM_OC3_SetConfig+0xe4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d007      	beq.n	8006916 <TIM_OC3_SetConfig+0x96>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a17      	ldr	r2, [pc, #92]	@ (8006968 <TIM_OC3_SetConfig+0xe8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d003      	beq.n	8006916 <TIM_OC3_SetConfig+0x96>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a16      	ldr	r2, [pc, #88]	@ (800696c <TIM_OC3_SetConfig+0xec>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d113      	bne.n	800693e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800691c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	621a      	str	r2, [r3, #32]
}
 8006958:	bf00      	nop
 800695a:	371c      	adds	r7, #28
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	40012c00 	.word	0x40012c00
 8006968:	40014000 	.word	0x40014000
 800696c:	40014400 	.word	0x40014400

08006970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800699e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	021b      	lsls	r3, r3, #8
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	031b      	lsls	r3, r3, #12
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a14      	ldr	r2, [pc, #80]	@ (8006a20 <TIM_OC4_SetConfig+0xb0>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d007      	beq.n	80069e4 <TIM_OC4_SetConfig+0x74>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a13      	ldr	r2, [pc, #76]	@ (8006a24 <TIM_OC4_SetConfig+0xb4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d003      	beq.n	80069e4 <TIM_OC4_SetConfig+0x74>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a12      	ldr	r2, [pc, #72]	@ (8006a28 <TIM_OC4_SetConfig+0xb8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d109      	bne.n	80069f8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	019b      	lsls	r3, r3, #6
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	621a      	str	r2, [r3, #32]
}
 8006a12:	bf00      	nop
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	40012c00 	.word	0x40012c00
 8006a24:	40014000 	.word	0x40014000
 8006a28:	40014400 	.word	0x40014400

08006a2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006a70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	041b      	lsls	r3, r3, #16
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a13      	ldr	r2, [pc, #76]	@ (8006ad0 <TIM_OC5_SetConfig+0xa4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d007      	beq.n	8006a96 <TIM_OC5_SetConfig+0x6a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a12      	ldr	r2, [pc, #72]	@ (8006ad4 <TIM_OC5_SetConfig+0xa8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d003      	beq.n	8006a96 <TIM_OC5_SetConfig+0x6a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a11      	ldr	r2, [pc, #68]	@ (8006ad8 <TIM_OC5_SetConfig+0xac>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d109      	bne.n	8006aaa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	021b      	lsls	r3, r3, #8
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	621a      	str	r2, [r3, #32]
}
 8006ac4:	bf00      	nop
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40014000 	.word	0x40014000
 8006ad8:	40014400 	.word	0x40014400

08006adc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	051b      	lsls	r3, r3, #20
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a14      	ldr	r2, [pc, #80]	@ (8006b84 <TIM_OC6_SetConfig+0xa8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d007      	beq.n	8006b48 <TIM_OC6_SetConfig+0x6c>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a13      	ldr	r2, [pc, #76]	@ (8006b88 <TIM_OC6_SetConfig+0xac>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d003      	beq.n	8006b48 <TIM_OC6_SetConfig+0x6c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a12      	ldr	r2, [pc, #72]	@ (8006b8c <TIM_OC6_SetConfig+0xb0>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d109      	bne.n	8006b5c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	029b      	lsls	r3, r3, #10
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	621a      	str	r2, [r3, #32]
}
 8006b76:	bf00      	nop
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40012c00 	.word	0x40012c00
 8006b88:	40014000 	.word	0x40014000
 8006b8c:	40014400 	.word	0x40014400

08006b90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f003 031f 	and.w	r3, r3, #31
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6a1a      	ldr	r2, [r3, #32]
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	43db      	mvns	r3, r3
 8006bb2:	401a      	ands	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1a      	ldr	r2, [r3, #32]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f003 031f 	and.w	r3, r3, #31
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	621a      	str	r2, [r3, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
	...

08006bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e054      	b.n	8006c9e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a24      	ldr	r2, [pc, #144]	@ (8006cac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d108      	bne.n	8006c30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a17      	ldr	r2, [pc, #92]	@ (8006cac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00e      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c5c:	d009      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a13      	ldr	r2, [pc, #76]	@ (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d004      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a11      	ldr	r2, [pc, #68]	@ (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d10c      	bne.n	8006c8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40012c00 	.word	0x40012c00
 8006cb0:	40000400 	.word	0x40000400
 8006cb4:	40014000 	.word	0x40014000

08006cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e040      	b.n	8006d88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d106      	bne.n	8006d1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7fa fe00 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2224      	movs	r2, #36	@ 0x24
 8006d20:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0201 	bic.w	r2, r2, #1
 8006d30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fdd4 	bl	80078e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fb4b 	bl	80073dc <UART_SetConfig>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e01b      	b.n	8006d88 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f042 0201 	orr.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fe53 	bl	8007a2c <UART_CheckIdleState>
 8006d86:	4603      	mov	r3, r0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b0ba      	sub	sp, #232	@ 0xe8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006db6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006dba:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006dc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d115      	bne.n	8006df8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00f      	beq.n	8006df8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ddc:	f003 0320 	and.w	r3, r3, #32
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d009      	beq.n	8006df8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 82ca 	beq.w	8007382 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
      }
      return;
 8006df6:	e2c4      	b.n	8007382 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006df8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 8117 	beq.w	8007030 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006e12:	4b85      	ldr	r3, [pc, #532]	@ (8007028 <HAL_UART_IRQHandler+0x298>)
 8006e14:	4013      	ands	r3, r2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 810a 	beq.w	8007030 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d011      	beq.n	8006e4c <HAL_UART_IRQHandler+0xbc>
 8006e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00b      	beq.n	8006e4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e42:	f043 0201 	orr.w	r2, r3, #1
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d011      	beq.n	8006e7c <HAL_UART_IRQHandler+0xec>
 8006e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00b      	beq.n	8006e7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e72:	f043 0204 	orr.w	r2, r3, #4
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d011      	beq.n	8006eac <HAL_UART_IRQHandler+0x11c>
 8006e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00b      	beq.n	8006eac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2204      	movs	r2, #4
 8006e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ea2:	f043 0202 	orr.w	r2, r3, #2
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb0:	f003 0308 	and.w	r3, r3, #8
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d017      	beq.n	8006ee8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d105      	bne.n	8006ed0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ec8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2208      	movs	r2, #8
 8006ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ede:	f043 0208 	orr.w	r2, r3, #8
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d012      	beq.n	8006f1a <HAL_UART_IRQHandler+0x18a>
 8006ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ef8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00c      	beq.n	8006f1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f10:	f043 0220 	orr.w	r2, r3, #32
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 8230 	beq.w	8007386 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00d      	beq.n	8006f4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f36:	f003 0320 	and.w	r3, r3, #32
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d007      	beq.n	8006f4e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f62:	2b40      	cmp	r3, #64	@ 0x40
 8006f64:	d005      	beq.n	8006f72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d04f      	beq.n	8007012 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fe6f 	bl	8007c56 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f82:	2b40      	cmp	r3, #64	@ 0x40
 8006f84:	d141      	bne.n	800700a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3308      	adds	r3, #8
 8006fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1d9      	bne.n	8006f86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d013      	beq.n	8007002 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fde:	4a13      	ldr	r2, [pc, #76]	@ (800702c <HAL_UART_IRQHandler+0x29c>)
 8006fe0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fc ff48 	bl	8003e7c <HAL_DMA_Abort_IT>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d017      	beq.n	8007022 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007000:	e00f      	b.n	8007022 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f9d4 	bl	80073b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007008:	e00b      	b.n	8007022 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f9d0 	bl	80073b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007010:	e007      	b.n	8007022 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f9cc 	bl	80073b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007020:	e1b1      	b.n	8007386 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007022:	bf00      	nop
    return;
 8007024:	e1af      	b.n	8007386 <HAL_UART_IRQHandler+0x5f6>
 8007026:	bf00      	nop
 8007028:	04000120 	.word	0x04000120
 800702c:	08007d1f 	.word	0x08007d1f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007034:	2b01      	cmp	r3, #1
 8007036:	f040 816a 	bne.w	800730e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800703a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 8163 	beq.w	800730e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800704c:	f003 0310 	and.w	r3, r3, #16
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 815c 	beq.w	800730e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2210      	movs	r2, #16
 800705c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007068:	2b40      	cmp	r3, #64	@ 0x40
 800706a:	f040 80d4 	bne.w	8007216 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800707a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 80ad 	beq.w	80071de <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800708a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800708e:	429a      	cmp	r2, r3
 8007090:	f080 80a5 	bcs.w	80071de <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800709a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 8086 	bne.w	80071bc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80070c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	461a      	mov	r2, r3
 80070d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80070da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80070de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80070e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070ea:	e841 2300 	strex	r3, r2, [r1]
 80070ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80070f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1da      	bne.n	80070b0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3308      	adds	r3, #8
 8007100:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800710a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800710c:	f023 0301 	bic.w	r3, r3, #1
 8007110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3308      	adds	r3, #8
 800711a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800711e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007122:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007124:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007126:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007130:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e1      	bne.n	80070fa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3308      	adds	r3, #8
 800713c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800714c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3308      	adds	r3, #8
 8007156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800715a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800715c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007160:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e3      	bne.n	8007136 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800718a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800718c:	f023 0310 	bic.w	r3, r3, #16
 8007190:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	461a      	mov	r2, r3
 800719a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800719e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e4      	bne.n	800717c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fc fe22 	bl	8003e00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f8f4 	bl	80073c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80071dc:	e0d5      	b.n	800738a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80071e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071e8:	429a      	cmp	r2, r3
 80071ea:	f040 80ce 	bne.w	800738a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b20      	cmp	r3, #32
 80071fc:	f040 80c5 	bne.w	800738a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f8d8 	bl	80073c4 <HAL_UARTEx_RxEventCallback>
      return;
 8007214:	e0b9      	b.n	800738a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007222:	b29b      	uxth	r3, r3
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 80ab 	beq.w	800738e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80a6 	beq.w	800738e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007252:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007256:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007264:	647b      	str	r3, [r7, #68]	@ 0x44
 8007266:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800726a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e4      	bne.n	8007242 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3308      	adds	r3, #8
 800727e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	623b      	str	r3, [r7, #32]
   return(result);
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	f023 0301 	bic.w	r3, r3, #1
 800728e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3308      	adds	r3, #8
 8007298:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800729c:	633a      	str	r2, [r7, #48]	@ 0x30
 800729e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072a4:	e841 2300 	strex	r3, r2, [r1]
 80072a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e3      	bne.n	8007278 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f023 0310 	bic.w	r3, r3, #16
 80072d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80072e6:	61fb      	str	r3, [r7, #28]
 80072e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	69b9      	ldr	r1, [r7, #24]
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	617b      	str	r3, [r7, #20]
   return(result);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e4      	bne.n	80072c4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2202      	movs	r2, #2
 80072fe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f85c 	bl	80073c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800730c:	e03f      	b.n	800738e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800730e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007312:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00e      	beq.n	8007338 <HAL_UART_IRQHandler+0x5a8>
 800731a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800731e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d008      	beq.n	8007338 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800732e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fd34 	bl	8007d9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007336:	e02d      	b.n	8007394 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00e      	beq.n	8007362 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800734c:	2b00      	cmp	r3, #0
 800734e:	d008      	beq.n	8007362 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d01c      	beq.n	8007392 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	4798      	blx	r3
    }
    return;
 8007360:	e017      	b.n	8007392 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	d012      	beq.n	8007394 <HAL_UART_IRQHandler+0x604>
 800736e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00c      	beq.n	8007394 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fce5 	bl	8007d4a <UART_EndTransmit_IT>
    return;
 8007380:	e008      	b.n	8007394 <HAL_UART_IRQHandler+0x604>
      return;
 8007382:	bf00      	nop
 8007384:	e006      	b.n	8007394 <HAL_UART_IRQHandler+0x604>
    return;
 8007386:	bf00      	nop
 8007388:	e004      	b.n	8007394 <HAL_UART_IRQHandler+0x604>
      return;
 800738a:	bf00      	nop
 800738c:	e002      	b.n	8007394 <HAL_UART_IRQHandler+0x604>
      return;
 800738e:	bf00      	nop
 8007390:	e000      	b.n	8007394 <HAL_UART_IRQHandler+0x604>
    return;
 8007392:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007394:	37e8      	adds	r7, #232	@ 0xe8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop

0800739c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e0:	b08a      	sub	sp, #40	@ 0x28
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	431a      	orrs	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	4313      	orrs	r3, r2
 8007402:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	4ba5      	ldr	r3, [pc, #660]	@ (80076a0 <UART_SetConfig+0x2c4>)
 800740c:	4013      	ands	r3, r2
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	6812      	ldr	r2, [r2, #0]
 8007412:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007414:	430b      	orrs	r3, r1
 8007416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	68da      	ldr	r2, [r3, #12]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a9a      	ldr	r2, [pc, #616]	@ (80076a4 <UART_SetConfig+0x2c8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d004      	beq.n	8007448 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007444:	4313      	orrs	r3, r2
 8007446:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007458:	430a      	orrs	r2, r1
 800745a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a91      	ldr	r2, [pc, #580]	@ (80076a8 <UART_SetConfig+0x2cc>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d126      	bne.n	80074b4 <UART_SetConfig+0xd8>
 8007466:	4b91      	ldr	r3, [pc, #580]	@ (80076ac <UART_SetConfig+0x2d0>)
 8007468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	2b03      	cmp	r3, #3
 8007472:	d81b      	bhi.n	80074ac <UART_SetConfig+0xd0>
 8007474:	a201      	add	r2, pc, #4	@ (adr r2, 800747c <UART_SetConfig+0xa0>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	0800748d 	.word	0x0800748d
 8007480:	0800749d 	.word	0x0800749d
 8007484:	08007495 	.word	0x08007495
 8007488:	080074a5 	.word	0x080074a5
 800748c:	2301      	movs	r3, #1
 800748e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007492:	e0d6      	b.n	8007642 <UART_SetConfig+0x266>
 8007494:	2302      	movs	r3, #2
 8007496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800749a:	e0d2      	b.n	8007642 <UART_SetConfig+0x266>
 800749c:	2304      	movs	r3, #4
 800749e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074a2:	e0ce      	b.n	8007642 <UART_SetConfig+0x266>
 80074a4:	2308      	movs	r3, #8
 80074a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074aa:	e0ca      	b.n	8007642 <UART_SetConfig+0x266>
 80074ac:	2310      	movs	r3, #16
 80074ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074b2:	e0c6      	b.n	8007642 <UART_SetConfig+0x266>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a7d      	ldr	r2, [pc, #500]	@ (80076b0 <UART_SetConfig+0x2d4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d138      	bne.n	8007530 <UART_SetConfig+0x154>
 80074be:	4b7b      	ldr	r3, [pc, #492]	@ (80076ac <UART_SetConfig+0x2d0>)
 80074c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c4:	f003 030c 	and.w	r3, r3, #12
 80074c8:	2b0c      	cmp	r3, #12
 80074ca:	d82d      	bhi.n	8007528 <UART_SetConfig+0x14c>
 80074cc:	a201      	add	r2, pc, #4	@ (adr r2, 80074d4 <UART_SetConfig+0xf8>)
 80074ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d2:	bf00      	nop
 80074d4:	08007509 	.word	0x08007509
 80074d8:	08007529 	.word	0x08007529
 80074dc:	08007529 	.word	0x08007529
 80074e0:	08007529 	.word	0x08007529
 80074e4:	08007519 	.word	0x08007519
 80074e8:	08007529 	.word	0x08007529
 80074ec:	08007529 	.word	0x08007529
 80074f0:	08007529 	.word	0x08007529
 80074f4:	08007511 	.word	0x08007511
 80074f8:	08007529 	.word	0x08007529
 80074fc:	08007529 	.word	0x08007529
 8007500:	08007529 	.word	0x08007529
 8007504:	08007521 	.word	0x08007521
 8007508:	2300      	movs	r3, #0
 800750a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800750e:	e098      	b.n	8007642 <UART_SetConfig+0x266>
 8007510:	2302      	movs	r3, #2
 8007512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007516:	e094      	b.n	8007642 <UART_SetConfig+0x266>
 8007518:	2304      	movs	r3, #4
 800751a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800751e:	e090      	b.n	8007642 <UART_SetConfig+0x266>
 8007520:	2308      	movs	r3, #8
 8007522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007526:	e08c      	b.n	8007642 <UART_SetConfig+0x266>
 8007528:	2310      	movs	r3, #16
 800752a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800752e:	e088      	b.n	8007642 <UART_SetConfig+0x266>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a5f      	ldr	r2, [pc, #380]	@ (80076b4 <UART_SetConfig+0x2d8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d125      	bne.n	8007586 <UART_SetConfig+0x1aa>
 800753a:	4b5c      	ldr	r3, [pc, #368]	@ (80076ac <UART_SetConfig+0x2d0>)
 800753c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007540:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007544:	2b30      	cmp	r3, #48	@ 0x30
 8007546:	d016      	beq.n	8007576 <UART_SetConfig+0x19a>
 8007548:	2b30      	cmp	r3, #48	@ 0x30
 800754a:	d818      	bhi.n	800757e <UART_SetConfig+0x1a2>
 800754c:	2b20      	cmp	r3, #32
 800754e:	d00a      	beq.n	8007566 <UART_SetConfig+0x18a>
 8007550:	2b20      	cmp	r3, #32
 8007552:	d814      	bhi.n	800757e <UART_SetConfig+0x1a2>
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <UART_SetConfig+0x182>
 8007558:	2b10      	cmp	r3, #16
 800755a:	d008      	beq.n	800756e <UART_SetConfig+0x192>
 800755c:	e00f      	b.n	800757e <UART_SetConfig+0x1a2>
 800755e:	2300      	movs	r3, #0
 8007560:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007564:	e06d      	b.n	8007642 <UART_SetConfig+0x266>
 8007566:	2302      	movs	r3, #2
 8007568:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800756c:	e069      	b.n	8007642 <UART_SetConfig+0x266>
 800756e:	2304      	movs	r3, #4
 8007570:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007574:	e065      	b.n	8007642 <UART_SetConfig+0x266>
 8007576:	2308      	movs	r3, #8
 8007578:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800757c:	e061      	b.n	8007642 <UART_SetConfig+0x266>
 800757e:	2310      	movs	r3, #16
 8007580:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007584:	e05d      	b.n	8007642 <UART_SetConfig+0x266>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a4b      	ldr	r2, [pc, #300]	@ (80076b8 <UART_SetConfig+0x2dc>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d125      	bne.n	80075dc <UART_SetConfig+0x200>
 8007590:	4b46      	ldr	r3, [pc, #280]	@ (80076ac <UART_SetConfig+0x2d0>)
 8007592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007596:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800759a:	2bc0      	cmp	r3, #192	@ 0xc0
 800759c:	d016      	beq.n	80075cc <UART_SetConfig+0x1f0>
 800759e:	2bc0      	cmp	r3, #192	@ 0xc0
 80075a0:	d818      	bhi.n	80075d4 <UART_SetConfig+0x1f8>
 80075a2:	2b80      	cmp	r3, #128	@ 0x80
 80075a4:	d00a      	beq.n	80075bc <UART_SetConfig+0x1e0>
 80075a6:	2b80      	cmp	r3, #128	@ 0x80
 80075a8:	d814      	bhi.n	80075d4 <UART_SetConfig+0x1f8>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d002      	beq.n	80075b4 <UART_SetConfig+0x1d8>
 80075ae:	2b40      	cmp	r3, #64	@ 0x40
 80075b0:	d008      	beq.n	80075c4 <UART_SetConfig+0x1e8>
 80075b2:	e00f      	b.n	80075d4 <UART_SetConfig+0x1f8>
 80075b4:	2300      	movs	r3, #0
 80075b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ba:	e042      	b.n	8007642 <UART_SetConfig+0x266>
 80075bc:	2302      	movs	r3, #2
 80075be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075c2:	e03e      	b.n	8007642 <UART_SetConfig+0x266>
 80075c4:	2304      	movs	r3, #4
 80075c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ca:	e03a      	b.n	8007642 <UART_SetConfig+0x266>
 80075cc:	2308      	movs	r3, #8
 80075ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075d2:	e036      	b.n	8007642 <UART_SetConfig+0x266>
 80075d4:	2310      	movs	r3, #16
 80075d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075da:	e032      	b.n	8007642 <UART_SetConfig+0x266>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a30      	ldr	r2, [pc, #192]	@ (80076a4 <UART_SetConfig+0x2c8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d12a      	bne.n	800763c <UART_SetConfig+0x260>
 80075e6:	4b31      	ldr	r3, [pc, #196]	@ (80076ac <UART_SetConfig+0x2d0>)
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075f4:	d01a      	beq.n	800762c <UART_SetConfig+0x250>
 80075f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075fa:	d81b      	bhi.n	8007634 <UART_SetConfig+0x258>
 80075fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007600:	d00c      	beq.n	800761c <UART_SetConfig+0x240>
 8007602:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007606:	d815      	bhi.n	8007634 <UART_SetConfig+0x258>
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <UART_SetConfig+0x238>
 800760c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007610:	d008      	beq.n	8007624 <UART_SetConfig+0x248>
 8007612:	e00f      	b.n	8007634 <UART_SetConfig+0x258>
 8007614:	2300      	movs	r3, #0
 8007616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800761a:	e012      	b.n	8007642 <UART_SetConfig+0x266>
 800761c:	2302      	movs	r3, #2
 800761e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007622:	e00e      	b.n	8007642 <UART_SetConfig+0x266>
 8007624:	2304      	movs	r3, #4
 8007626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800762a:	e00a      	b.n	8007642 <UART_SetConfig+0x266>
 800762c:	2308      	movs	r3, #8
 800762e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007632:	e006      	b.n	8007642 <UART_SetConfig+0x266>
 8007634:	2310      	movs	r3, #16
 8007636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800763a:	e002      	b.n	8007642 <UART_SetConfig+0x266>
 800763c:	2310      	movs	r3, #16
 800763e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a17      	ldr	r2, [pc, #92]	@ (80076a4 <UART_SetConfig+0x2c8>)
 8007648:	4293      	cmp	r3, r2
 800764a:	f040 808b 	bne.w	8007764 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800764e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007652:	2b08      	cmp	r3, #8
 8007654:	d834      	bhi.n	80076c0 <UART_SetConfig+0x2e4>
 8007656:	a201      	add	r2, pc, #4	@ (adr r2, 800765c <UART_SetConfig+0x280>)
 8007658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765c:	08007681 	.word	0x08007681
 8007660:	080076c1 	.word	0x080076c1
 8007664:	08007689 	.word	0x08007689
 8007668:	080076c1 	.word	0x080076c1
 800766c:	0800768f 	.word	0x0800768f
 8007670:	080076c1 	.word	0x080076c1
 8007674:	080076c1 	.word	0x080076c1
 8007678:	080076c1 	.word	0x080076c1
 800767c:	08007697 	.word	0x08007697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007680:	f7fd fe08 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 8007684:	61f8      	str	r0, [r7, #28]
        break;
 8007686:	e021      	b.n	80076cc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007688:	4b0c      	ldr	r3, [pc, #48]	@ (80076bc <UART_SetConfig+0x2e0>)
 800768a:	61fb      	str	r3, [r7, #28]
        break;
 800768c:	e01e      	b.n	80076cc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800768e:	f7fd fd69 	bl	8005164 <HAL_RCC_GetSysClockFreq>
 8007692:	61f8      	str	r0, [r7, #28]
        break;
 8007694:	e01a      	b.n	80076cc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800769a:	61fb      	str	r3, [r7, #28]
        break;
 800769c:	e016      	b.n	80076cc <UART_SetConfig+0x2f0>
 800769e:	bf00      	nop
 80076a0:	efff69f3 	.word	0xefff69f3
 80076a4:	40008000 	.word	0x40008000
 80076a8:	40013800 	.word	0x40013800
 80076ac:	40021000 	.word	0x40021000
 80076b0:	40004400 	.word	0x40004400
 80076b4:	40004800 	.word	0x40004800
 80076b8:	40004c00 	.word	0x40004c00
 80076bc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80076ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 80fa 	beq.w	80078c8 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	4613      	mov	r3, r2
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	4413      	add	r3, r2
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d305      	bcc.n	80076f0 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d903      	bls.n	80076f8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80076f6:	e0e7      	b.n	80078c8 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	2200      	movs	r2, #0
 80076fc:	461c      	mov	r4, r3
 80076fe:	4615      	mov	r5, r2
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	f04f 0300 	mov.w	r3, #0
 8007708:	022b      	lsls	r3, r5, #8
 800770a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800770e:	0222      	lsls	r2, r4, #8
 8007710:	68f9      	ldr	r1, [r7, #12]
 8007712:	6849      	ldr	r1, [r1, #4]
 8007714:	0849      	lsrs	r1, r1, #1
 8007716:	2000      	movs	r0, #0
 8007718:	4688      	mov	r8, r1
 800771a:	4681      	mov	r9, r0
 800771c:	eb12 0a08 	adds.w	sl, r2, r8
 8007720:	eb43 0b09 	adc.w	fp, r3, r9
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	607a      	str	r2, [r7, #4]
 800772e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007732:	4650      	mov	r0, sl
 8007734:	4659      	mov	r1, fp
 8007736:	f7f8 fd53 	bl	80001e0 <__aeabi_uldivmod>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4613      	mov	r3, r2
 8007740:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007748:	d308      	bcc.n	800775c <UART_SetConfig+0x380>
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007750:	d204      	bcs.n	800775c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	60da      	str	r2, [r3, #12]
 800775a:	e0b5      	b.n	80078c8 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007762:	e0b1      	b.n	80078c8 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800776c:	d15d      	bne.n	800782a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800776e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007772:	2b08      	cmp	r3, #8
 8007774:	d827      	bhi.n	80077c6 <UART_SetConfig+0x3ea>
 8007776:	a201      	add	r2, pc, #4	@ (adr r2, 800777c <UART_SetConfig+0x3a0>)
 8007778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777c:	080077a1 	.word	0x080077a1
 8007780:	080077a9 	.word	0x080077a9
 8007784:	080077b1 	.word	0x080077b1
 8007788:	080077c7 	.word	0x080077c7
 800778c:	080077b7 	.word	0x080077b7
 8007790:	080077c7 	.word	0x080077c7
 8007794:	080077c7 	.word	0x080077c7
 8007798:	080077c7 	.word	0x080077c7
 800779c:	080077bf 	.word	0x080077bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077a0:	f7fd fd78 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 80077a4:	61f8      	str	r0, [r7, #28]
        break;
 80077a6:	e014      	b.n	80077d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077a8:	f7fd fd8a 	bl	80052c0 <HAL_RCC_GetPCLK2Freq>
 80077ac:	61f8      	str	r0, [r7, #28]
        break;
 80077ae:	e010      	b.n	80077d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077b0:	4b4c      	ldr	r3, [pc, #304]	@ (80078e4 <UART_SetConfig+0x508>)
 80077b2:	61fb      	str	r3, [r7, #28]
        break;
 80077b4:	e00d      	b.n	80077d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077b6:	f7fd fcd5 	bl	8005164 <HAL_RCC_GetSysClockFreq>
 80077ba:	61f8      	str	r0, [r7, #28]
        break;
 80077bc:	e009      	b.n	80077d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077c2:	61fb      	str	r3, [r7, #28]
        break;
 80077c4:	e005      	b.n	80077d2 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80077d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d077      	beq.n	80078c8 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	005a      	lsls	r2, r3, #1
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	085b      	lsrs	r3, r3, #1
 80077e2:	441a      	add	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	2b0f      	cmp	r3, #15
 80077f2:	d916      	bls.n	8007822 <UART_SetConfig+0x446>
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077fa:	d212      	bcs.n	8007822 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f023 030f 	bic.w	r3, r3, #15
 8007804:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	085b      	lsrs	r3, r3, #1
 800780a:	b29b      	uxth	r3, r3
 800780c:	f003 0307 	and.w	r3, r3, #7
 8007810:	b29a      	uxth	r2, r3
 8007812:	8afb      	ldrh	r3, [r7, #22]
 8007814:	4313      	orrs	r3, r2
 8007816:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	8afa      	ldrh	r2, [r7, #22]
 800781e:	60da      	str	r2, [r3, #12]
 8007820:	e052      	b.n	80078c8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007828:	e04e      	b.n	80078c8 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800782a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800782e:	2b08      	cmp	r3, #8
 8007830:	d827      	bhi.n	8007882 <UART_SetConfig+0x4a6>
 8007832:	a201      	add	r2, pc, #4	@ (adr r2, 8007838 <UART_SetConfig+0x45c>)
 8007834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007838:	0800785d 	.word	0x0800785d
 800783c:	08007865 	.word	0x08007865
 8007840:	0800786d 	.word	0x0800786d
 8007844:	08007883 	.word	0x08007883
 8007848:	08007873 	.word	0x08007873
 800784c:	08007883 	.word	0x08007883
 8007850:	08007883 	.word	0x08007883
 8007854:	08007883 	.word	0x08007883
 8007858:	0800787b 	.word	0x0800787b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800785c:	f7fd fd1a 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 8007860:	61f8      	str	r0, [r7, #28]
        break;
 8007862:	e014      	b.n	800788e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007864:	f7fd fd2c 	bl	80052c0 <HAL_RCC_GetPCLK2Freq>
 8007868:	61f8      	str	r0, [r7, #28]
        break;
 800786a:	e010      	b.n	800788e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800786c:	4b1d      	ldr	r3, [pc, #116]	@ (80078e4 <UART_SetConfig+0x508>)
 800786e:	61fb      	str	r3, [r7, #28]
        break;
 8007870:	e00d      	b.n	800788e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007872:	f7fd fc77 	bl	8005164 <HAL_RCC_GetSysClockFreq>
 8007876:	61f8      	str	r0, [r7, #28]
        break;
 8007878:	e009      	b.n	800788e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800787a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800787e:	61fb      	str	r3, [r7, #28]
        break;
 8007880:	e005      	b.n	800788e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800788c:	bf00      	nop
    }

    if (pclk != 0U)
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d019      	beq.n	80078c8 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	085a      	lsrs	r2, r3, #1
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	441a      	add	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2b0f      	cmp	r3, #15
 80078ac:	d909      	bls.n	80078c2 <UART_SetConfig+0x4e6>
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078b4:	d205      	bcs.n	80078c2 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60da      	str	r2, [r3, #12]
 80078c0:	e002      	b.n	80078c8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80078d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3728      	adds	r7, #40	@ 0x28
 80078dc:	46bd      	mov	sp, r7
 80078de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078e2:	bf00      	nop
 80078e4:	00f42400 	.word	0x00f42400

080078e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00a      	beq.n	8007912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00a      	beq.n	8007956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795a:	f003 0304 	and.w	r3, r3, #4
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797c:	f003 0310 	and.w	r3, r3, #16
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00a      	beq.n	800799a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00a      	beq.n	80079bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01a      	beq.n	80079fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079e6:	d10a      	bne.n	80079fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	605a      	str	r2, [r3, #4]
  }
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b098      	sub	sp, #96	@ 0x60
 8007a30:	af02      	add	r7, sp, #8
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a3c:	f7fa f898 	bl	8001b70 <HAL_GetTick>
 8007a40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0308 	and.w	r3, r3, #8
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d12e      	bne.n	8007aae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f88c 	bl	8007b7c <UART_WaitOnFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d021      	beq.n	8007aae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a72:	e853 3f00 	ldrex	r3, [r3]
 8007a76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	461a      	mov	r2, r3
 8007a86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a90:	e841 2300 	strex	r3, r2, [r1]
 8007a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e6      	bne.n	8007a6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e062      	b.n	8007b74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	d149      	bne.n	8007b50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007abc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f856 	bl	8007b7c <UART_WaitOnFlagUntilTimeout>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d03c      	beq.n	8007b50 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007af6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e6      	bne.n	8007ad6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	e853 3f00 	ldrex	r3, [r3]
 8007b16:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0301 	bic.w	r3, r3, #1
 8007b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3308      	adds	r3, #8
 8007b26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b28:	61fa      	str	r2, [r7, #28]
 8007b2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2c:	69b9      	ldr	r1, [r7, #24]
 8007b2e:	69fa      	ldr	r2, [r7, #28]
 8007b30:	e841 2300 	strex	r3, r2, [r1]
 8007b34:	617b      	str	r3, [r7, #20]
   return(result);
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e5      	bne.n	8007b08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e011      	b.n	8007b74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3758      	adds	r7, #88	@ 0x58
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	603b      	str	r3, [r7, #0]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b8c:	e04f      	b.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b94:	d04b      	beq.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b96:	f7f9 ffeb 	bl	8001b70 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d302      	bcc.n	8007bac <UART_WaitOnFlagUntilTimeout+0x30>
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e04e      	b.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0304 	and.w	r3, r3, #4
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d037      	beq.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2b80      	cmp	r3, #128	@ 0x80
 8007bc2:	d034      	beq.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b40      	cmp	r3, #64	@ 0x40
 8007bc8:	d031      	beq.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d110      	bne.n	8007bfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2208      	movs	r2, #8
 8007bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f838 	bl	8007c56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2208      	movs	r2, #8
 8007bea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e029      	b.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c08:	d111      	bne.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 f81e 	bl	8007c56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e00f      	b.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69da      	ldr	r2, [r3, #28]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	4013      	ands	r3, r2
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	bf0c      	ite	eq
 8007c3e:	2301      	moveq	r3, #1
 8007c40:	2300      	movne	r3, #0
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d0a0      	beq.n	8007b8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b095      	sub	sp, #84	@ 0x54
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e6      	bne.n	8007c5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3308      	adds	r3, #8
 8007c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	f023 0301 	bic.w	r3, r3, #1
 8007ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3308      	adds	r3, #8
 8007cae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e5      	bne.n	8007c90 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d118      	bne.n	8007cfe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f023 0310 	bic.w	r3, r3, #16
 8007ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cea:	61bb      	str	r3, [r7, #24]
 8007cec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6979      	ldr	r1, [r7, #20]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e6      	bne.n	8007ccc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007d12:	bf00      	nop
 8007d14:	3754      	adds	r7, #84	@ 0x54
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f7ff fb37 	bl	80073b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d42:	bf00      	nop
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b088      	sub	sp, #32
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	e853 3f00 	ldrex	r3, [r3]
 8007d5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d66:	61fb      	str	r3, [r7, #28]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	61bb      	str	r3, [r7, #24]
 8007d72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	6979      	ldr	r1, [r7, #20]
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	e841 2300 	strex	r3, r2, [r1]
 8007d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e6      	bne.n	8007d52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff fb03 	bl	800739c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d96:	bf00      	nop
 8007d98:	3720      	adds	r7, #32
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	4603      	mov	r3, r0
 8007dba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dc4:	2b84      	cmp	r3, #132	@ 0x84
 8007dc6:	d005      	beq.n	8007dd4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007dc8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	3303      	adds	r3, #3
 8007dd2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007de8:	f3ef 8305 	mrs	r3, IPSR
 8007dec:	607b      	str	r3, [r7, #4]
  return(result);
 8007dee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	bf14      	ite	ne
 8007df4:	2301      	movne	r3, #1
 8007df6:	2300      	moveq	r3, #0
 8007df8:	b2db      	uxtb	r3, r3
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007e0a:	f000 ff4d 	bl	8008ca8 <vTaskStartScheduler>
  
  return osOK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007e18:	f7ff ffe3 	bl	8007de2 <inHandlerMode>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007e22:	f001 f867 	bl	8008ef4 <xTaskGetTickCountFromISR>
 8007e26:	4603      	mov	r3, r0
 8007e28:	e002      	b.n	8007e30 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007e2a:	f001 f853 	bl	8008ed4 <xTaskGetTickCount>
 8007e2e:	4603      	mov	r3, r0
  }
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e36:	b089      	sub	sp, #36	@ 0x24
 8007e38:	af04      	add	r7, sp, #16
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d020      	beq.n	8007e88 <osThreadCreate+0x54>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d01c      	beq.n	8007e88 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685c      	ldr	r4, [r3, #4]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691e      	ldr	r6, [r3, #16]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff ffa6 	bl	8007db2 <makeFreeRtosPriority>
 8007e66:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e70:	9202      	str	r2, [sp, #8]
 8007e72:	9301      	str	r3, [sp, #4]
 8007e74:	9100      	str	r1, [sp, #0]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	4632      	mov	r2, r6
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f000 fd2d 	bl	80088dc <xTaskCreateStatic>
 8007e82:	4603      	mov	r3, r0
 8007e84:	60fb      	str	r3, [r7, #12]
 8007e86:	e01c      	b.n	8007ec2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685c      	ldr	r4, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e94:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff ff88 	bl	8007db2 <makeFreeRtosPriority>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	f107 030c 	add.w	r3, r7, #12
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	9200      	str	r2, [sp, #0]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	4632      	mov	r2, r6
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 fd72 	bl	800899c <xTaskCreate>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d001      	beq.n	8007ec2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e000      	b.n	8007ec4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ecc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <osDelay+0x16>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	e000      	b.n	8007ee4 <osDelay+0x18>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 fea9 	bl	8008c3c <vTaskDelay>
  
  return osOK;
 8007eea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	@ 0x28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f00:	f000 ff3c 	bl	8008d7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f04:	4b5c      	ldr	r3, [pc, #368]	@ (8008078 <pvPortMalloc+0x184>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f0c:	f000 f924 	bl	8008158 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f10:	4b5a      	ldr	r3, [pc, #360]	@ (800807c <pvPortMalloc+0x188>)
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4013      	ands	r3, r2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f040 8095 	bne.w	8008048 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d01e      	beq.n	8007f62 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007f24:	2208      	movs	r2, #8
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4413      	add	r3, r2
 8007f2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d015      	beq.n	8007f62 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f023 0307 	bic.w	r3, r3, #7
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00b      	beq.n	8007f62 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f5c:	bf00      	nop
 8007f5e:	bf00      	nop
 8007f60:	e7fd      	b.n	8007f5e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d06f      	beq.n	8008048 <pvPortMalloc+0x154>
 8007f68:	4b45      	ldr	r3, [pc, #276]	@ (8008080 <pvPortMalloc+0x18c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d86a      	bhi.n	8008048 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f72:	4b44      	ldr	r3, [pc, #272]	@ (8008084 <pvPortMalloc+0x190>)
 8007f74:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f76:	4b43      	ldr	r3, [pc, #268]	@ (8008084 <pvPortMalloc+0x190>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f7c:	e004      	b.n	8007f88 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d903      	bls.n	8007f9a <pvPortMalloc+0xa6>
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1f1      	bne.n	8007f7e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f9a:	4b37      	ldr	r3, [pc, #220]	@ (8008078 <pvPortMalloc+0x184>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d051      	beq.n	8008048 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2208      	movs	r2, #8
 8007faa:	4413      	add	r3, r2
 8007fac:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	1ad2      	subs	r2, r2, r3
 8007fbe:	2308      	movs	r3, #8
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d920      	bls.n	8008008 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4413      	add	r3, r2
 8007fcc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	f003 0307 	and.w	r3, r3, #7
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00b      	beq.n	8007ff0 <pvPortMalloc+0xfc>
	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	613b      	str	r3, [r7, #16]
}
 8007fea:	bf00      	nop
 8007fec:	bf00      	nop
 8007fee:	e7fd      	b.n	8007fec <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	1ad2      	subs	r2, r2, r3
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008002:	69b8      	ldr	r0, [r7, #24]
 8008004:	f000 f90a 	bl	800821c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008008:	4b1d      	ldr	r3, [pc, #116]	@ (8008080 <pvPortMalloc+0x18c>)
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	4a1b      	ldr	r2, [pc, #108]	@ (8008080 <pvPortMalloc+0x18c>)
 8008014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008016:	4b1a      	ldr	r3, [pc, #104]	@ (8008080 <pvPortMalloc+0x18c>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	4b1b      	ldr	r3, [pc, #108]	@ (8008088 <pvPortMalloc+0x194>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d203      	bcs.n	800802a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008022:	4b17      	ldr	r3, [pc, #92]	@ (8008080 <pvPortMalloc+0x18c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a18      	ldr	r2, [pc, #96]	@ (8008088 <pvPortMalloc+0x194>)
 8008028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	4b13      	ldr	r3, [pc, #76]	@ (800807c <pvPortMalloc+0x188>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	431a      	orrs	r2, r3
 8008034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800803e:	4b13      	ldr	r3, [pc, #76]	@ (800808c <pvPortMalloc+0x198>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3301      	adds	r3, #1
 8008044:	4a11      	ldr	r2, [pc, #68]	@ (800808c <pvPortMalloc+0x198>)
 8008046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008048:	f000 fea6 	bl	8008d98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <pvPortMalloc+0x17a>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	60fb      	str	r3, [r7, #12]
}
 8008068:	bf00      	nop
 800806a:	bf00      	nop
 800806c:	e7fd      	b.n	800806a <pvPortMalloc+0x176>
	return pvReturn;
 800806e:	69fb      	ldr	r3, [r7, #28]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3728      	adds	r7, #40	@ 0x28
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	20001878 	.word	0x20001878
 800807c:	2000188c 	.word	0x2000188c
 8008080:	2000187c 	.word	0x2000187c
 8008084:	20001870 	.word	0x20001870
 8008088:	20001880 	.word	0x20001880
 800808c:	20001884 	.word	0x20001884

08008090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d04f      	beq.n	8008142 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080a2:	2308      	movs	r3, #8
 80080a4:	425b      	negs	r3, r3
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4413      	add	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	4b25      	ldr	r3, [pc, #148]	@ (800814c <vPortFree+0xbc>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4013      	ands	r3, r2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10b      	bne.n	80080d6 <vPortFree+0x46>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	60fb      	str	r3, [r7, #12]
}
 80080d0:	bf00      	nop
 80080d2:	bf00      	nop
 80080d4:	e7fd      	b.n	80080d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00b      	beq.n	80080f6 <vPortFree+0x66>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	60bb      	str	r3, [r7, #8]
}
 80080f0:	bf00      	nop
 80080f2:	bf00      	nop
 80080f4:	e7fd      	b.n	80080f2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	4b14      	ldr	r3, [pc, #80]	@ (800814c <vPortFree+0xbc>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4013      	ands	r3, r2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01e      	beq.n	8008142 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d11a      	bne.n	8008142 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	4b0e      	ldr	r3, [pc, #56]	@ (800814c <vPortFree+0xbc>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	43db      	mvns	r3, r3
 8008116:	401a      	ands	r2, r3
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800811c:	f000 fe2e 	bl	8008d7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	4b0a      	ldr	r3, [pc, #40]	@ (8008150 <vPortFree+0xc0>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4413      	add	r3, r2
 800812a:	4a09      	ldr	r2, [pc, #36]	@ (8008150 <vPortFree+0xc0>)
 800812c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800812e:	6938      	ldr	r0, [r7, #16]
 8008130:	f000 f874 	bl	800821c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008134:	4b07      	ldr	r3, [pc, #28]	@ (8008154 <vPortFree+0xc4>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3301      	adds	r3, #1
 800813a:	4a06      	ldr	r2, [pc, #24]	@ (8008154 <vPortFree+0xc4>)
 800813c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800813e:	f000 fe2b 	bl	8008d98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008142:	bf00      	nop
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	2000188c 	.word	0x2000188c
 8008150:	2000187c 	.word	0x2000187c
 8008154:	20001888 	.word	0x20001888

08008158 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800815e:	f241 1394 	movw	r3, #4500	@ 0x1194
 8008162:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008164:	4b27      	ldr	r3, [pc, #156]	@ (8008204 <prvHeapInit+0xac>)
 8008166:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f003 0307 	and.w	r3, r3, #7
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00c      	beq.n	800818c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3307      	adds	r3, #7
 8008176:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 0307 	bic.w	r3, r3, #7
 800817e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	4a1f      	ldr	r2, [pc, #124]	@ (8008204 <prvHeapInit+0xac>)
 8008188:	4413      	add	r3, r2
 800818a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008190:	4a1d      	ldr	r2, [pc, #116]	@ (8008208 <prvHeapInit+0xb0>)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008196:	4b1c      	ldr	r3, [pc, #112]	@ (8008208 <prvHeapInit+0xb0>)
 8008198:	2200      	movs	r2, #0
 800819a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	4413      	add	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081a4:	2208      	movs	r2, #8
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	1a9b      	subs	r3, r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0307 	bic.w	r3, r3, #7
 80081b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4a15      	ldr	r2, [pc, #84]	@ (800820c <prvHeapInit+0xb4>)
 80081b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081ba:	4b14      	ldr	r3, [pc, #80]	@ (800820c <prvHeapInit+0xb4>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2200      	movs	r2, #0
 80081c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081c2:	4b12      	ldr	r3, [pc, #72]	@ (800820c <prvHeapInit+0xb4>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	1ad2      	subs	r2, r2, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081d8:	4b0c      	ldr	r3, [pc, #48]	@ (800820c <prvHeapInit+0xb4>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	4a0a      	ldr	r2, [pc, #40]	@ (8008210 <prvHeapInit+0xb8>)
 80081e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	4a09      	ldr	r2, [pc, #36]	@ (8008214 <prvHeapInit+0xbc>)
 80081ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081f0:	4b09      	ldr	r3, [pc, #36]	@ (8008218 <prvHeapInit+0xc0>)
 80081f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80081f6:	601a      	str	r2, [r3, #0]
}
 80081f8:	bf00      	nop
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	200006dc 	.word	0x200006dc
 8008208:	20001870 	.word	0x20001870
 800820c:	20001878 	.word	0x20001878
 8008210:	20001880 	.word	0x20001880
 8008214:	2000187c 	.word	0x2000187c
 8008218:	2000188c 	.word	0x2000188c

0800821c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008224:	4b28      	ldr	r3, [pc, #160]	@ (80082c8 <prvInsertBlockIntoFreeList+0xac>)
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	e002      	b.n	8008230 <prvInsertBlockIntoFreeList+0x14>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	429a      	cmp	r2, r3
 8008238:	d8f7      	bhi.n	800822a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	4413      	add	r3, r2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	429a      	cmp	r2, r3
 800824a:	d108      	bne.n	800825e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	441a      	add	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	441a      	add	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	429a      	cmp	r2, r3
 8008270:	d118      	bne.n	80082a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	4b15      	ldr	r3, [pc, #84]	@ (80082cc <prvInsertBlockIntoFreeList+0xb0>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	d00d      	beq.n	800829a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	441a      	add	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	e008      	b.n	80082ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800829a:	4b0c      	ldr	r3, [pc, #48]	@ (80082cc <prvInsertBlockIntoFreeList+0xb0>)
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	e003      	b.n	80082ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d002      	beq.n	80082ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	20001870 	.word	0x20001870
 80082cc:	20001878 	.word	0x20001878

080082d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f103 0208 	add.w	r2, r3, #8
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f04f 32ff 	mov.w	r2, #4294967295
 80082e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f103 0208 	add.w	r2, r3, #8
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f103 0208 	add.w	r2, r3, #8
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800832a:	b480      	push	{r7}
 800832c:	b085      	sub	sp, #20
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	601a      	str	r2, [r3, #0]
}
 8008366:	bf00      	nop
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008372:	b480      	push	{r7}
 8008374:	b085      	sub	sp, #20
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008388:	d103      	bne.n	8008392 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	e00c      	b.n	80083ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	3308      	adds	r3, #8
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	e002      	b.n	80083a0 <vListInsert+0x2e>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d2f6      	bcs.n	800839a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	601a      	str	r2, [r3, #0]
}
 80083d8:	bf00      	nop
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	6892      	ldr	r2, [r2, #8]
 80083fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	6852      	ldr	r2, [r2, #4]
 8008404:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	429a      	cmp	r2, r3
 800840e:	d103      	bne.n	8008418 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689a      	ldr	r2, [r3, #8]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	1e5a      	subs	r2, r3, #1
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3b04      	subs	r3, #4
 8008448:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3b04      	subs	r3, #4
 8008456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f023 0201 	bic.w	r2, r3, #1
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3b04      	subs	r3, #4
 8008466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008468:	4a0c      	ldr	r2, [pc, #48]	@ (800849c <pxPortInitialiseStack+0x64>)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3b14      	subs	r3, #20
 8008472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3b04      	subs	r3, #4
 800847e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f06f 0202 	mvn.w	r2, #2
 8008486:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3b20      	subs	r3, #32
 800848c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800848e:	68fb      	ldr	r3, [r7, #12]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	080084a1 	.word	0x080084a1

080084a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084aa:	4b13      	ldr	r3, [pc, #76]	@ (80084f8 <prvTaskExitError+0x58>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b2:	d00b      	beq.n	80084cc <prvTaskExitError+0x2c>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	60fb      	str	r3, [r7, #12]
}
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
 80084ca:	e7fd      	b.n	80084c8 <prvTaskExitError+0x28>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	60bb      	str	r3, [r7, #8]
}
 80084de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084e0:	bf00      	nop
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0fc      	beq.n	80084e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	2000000c 	.word	0x2000000c
 80084fc:	00000000 	.word	0x00000000

08008500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008500:	4b07      	ldr	r3, [pc, #28]	@ (8008520 <pxCurrentTCBConst2>)
 8008502:	6819      	ldr	r1, [r3, #0]
 8008504:	6808      	ldr	r0, [r1, #0]
 8008506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850a:	f380 8809 	msr	PSP, r0
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f04f 0000 	mov.w	r0, #0
 8008516:	f380 8811 	msr	BASEPRI, r0
 800851a:	4770      	bx	lr
 800851c:	f3af 8000 	nop.w

08008520 <pxCurrentTCBConst2>:
 8008520:	20001898 	.word	0x20001898
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop

08008528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008528:	4808      	ldr	r0, [pc, #32]	@ (800854c <prvPortStartFirstTask+0x24>)
 800852a:	6800      	ldr	r0, [r0, #0]
 800852c:	6800      	ldr	r0, [r0, #0]
 800852e:	f380 8808 	msr	MSP, r0
 8008532:	f04f 0000 	mov.w	r0, #0
 8008536:	f380 8814 	msr	CONTROL, r0
 800853a:	b662      	cpsie	i
 800853c:	b661      	cpsie	f
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	df00      	svc	0
 8008548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800854a:	bf00      	nop
 800854c:	e000ed08 	.word	0xe000ed08

08008550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008556:	4b47      	ldr	r3, [pc, #284]	@ (8008674 <xPortStartScheduler+0x124>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a47      	ldr	r2, [pc, #284]	@ (8008678 <xPortStartScheduler+0x128>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d10b      	bne.n	8008578 <xPortStartScheduler+0x28>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	613b      	str	r3, [r7, #16]
}
 8008572:	bf00      	nop
 8008574:	bf00      	nop
 8008576:	e7fd      	b.n	8008574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008578:	4b3e      	ldr	r3, [pc, #248]	@ (8008674 <xPortStartScheduler+0x124>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a3f      	ldr	r2, [pc, #252]	@ (800867c <xPortStartScheduler+0x12c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d10b      	bne.n	800859a <xPortStartScheduler+0x4a>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	60fb      	str	r3, [r7, #12]
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	e7fd      	b.n	8008596 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800859a:	4b39      	ldr	r3, [pc, #228]	@ (8008680 <xPortStartScheduler+0x130>)
 800859c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	22ff      	movs	r2, #255	@ 0xff
 80085aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	4b31      	ldr	r3, [pc, #196]	@ (8008684 <xPortStartScheduler+0x134>)
 80085c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085c2:	4b31      	ldr	r3, [pc, #196]	@ (8008688 <xPortStartScheduler+0x138>)
 80085c4:	2207      	movs	r2, #7
 80085c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085c8:	e009      	b.n	80085de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80085ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008688 <xPortStartScheduler+0x138>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008688 <xPortStartScheduler+0x138>)
 80085d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085d4:	78fb      	ldrb	r3, [r7, #3]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085e6:	2b80      	cmp	r3, #128	@ 0x80
 80085e8:	d0ef      	beq.n	80085ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085ea:	4b27      	ldr	r3, [pc, #156]	@ (8008688 <xPortStartScheduler+0x138>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f1c3 0307 	rsb	r3, r3, #7
 80085f2:	2b04      	cmp	r3, #4
 80085f4:	d00b      	beq.n	800860e <xPortStartScheduler+0xbe>
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	60bb      	str	r3, [r7, #8]
}
 8008608:	bf00      	nop
 800860a:	bf00      	nop
 800860c:	e7fd      	b.n	800860a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800860e:	4b1e      	ldr	r3, [pc, #120]	@ (8008688 <xPortStartScheduler+0x138>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	021b      	lsls	r3, r3, #8
 8008614:	4a1c      	ldr	r2, [pc, #112]	@ (8008688 <xPortStartScheduler+0x138>)
 8008616:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008618:	4b1b      	ldr	r3, [pc, #108]	@ (8008688 <xPortStartScheduler+0x138>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008620:	4a19      	ldr	r2, [pc, #100]	@ (8008688 <xPortStartScheduler+0x138>)
 8008622:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	b2da      	uxtb	r2, r3
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800862c:	4b17      	ldr	r3, [pc, #92]	@ (800868c <xPortStartScheduler+0x13c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a16      	ldr	r2, [pc, #88]	@ (800868c <xPortStartScheduler+0x13c>)
 8008632:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008636:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008638:	4b14      	ldr	r3, [pc, #80]	@ (800868c <xPortStartScheduler+0x13c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a13      	ldr	r2, [pc, #76]	@ (800868c <xPortStartScheduler+0x13c>)
 800863e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008642:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008644:	f000 f8da 	bl	80087fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008648:	4b11      	ldr	r3, [pc, #68]	@ (8008690 <xPortStartScheduler+0x140>)
 800864a:	2200      	movs	r2, #0
 800864c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800864e:	f000 f8f9 	bl	8008844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008652:	4b10      	ldr	r3, [pc, #64]	@ (8008694 <xPortStartScheduler+0x144>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a0f      	ldr	r2, [pc, #60]	@ (8008694 <xPortStartScheduler+0x144>)
 8008658:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800865c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800865e:	f7ff ff63 	bl	8008528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008662:	f000 fd13 	bl	800908c <vTaskSwitchContext>
	prvTaskExitError();
 8008666:	f7ff ff1b 	bl	80084a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	e000ed00 	.word	0xe000ed00
 8008678:	410fc271 	.word	0x410fc271
 800867c:	410fc270 	.word	0x410fc270
 8008680:	e000e400 	.word	0xe000e400
 8008684:	20001890 	.word	0x20001890
 8008688:	20001894 	.word	0x20001894
 800868c:	e000ed20 	.word	0xe000ed20
 8008690:	2000000c 	.word	0x2000000c
 8008694:	e000ef34 	.word	0xe000ef34

08008698 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	607b      	str	r3, [r7, #4]
}
 80086b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086b2:	4b10      	ldr	r3, [pc, #64]	@ (80086f4 <vPortEnterCritical+0x5c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3301      	adds	r3, #1
 80086b8:	4a0e      	ldr	r2, [pc, #56]	@ (80086f4 <vPortEnterCritical+0x5c>)
 80086ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086bc:	4b0d      	ldr	r3, [pc, #52]	@ (80086f4 <vPortEnterCritical+0x5c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d110      	bne.n	80086e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086c4:	4b0c      	ldr	r3, [pc, #48]	@ (80086f8 <vPortEnterCritical+0x60>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	603b      	str	r3, [r7, #0]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <vPortEnterCritical+0x4a>
	}
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	2000000c 	.word	0x2000000c
 80086f8:	e000ed04 	.word	0xe000ed04

080086fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008702:	4b12      	ldr	r3, [pc, #72]	@ (800874c <vPortExitCritical+0x50>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10b      	bne.n	8008722 <vPortExitCritical+0x26>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	607b      	str	r3, [r7, #4]
}
 800871c:	bf00      	nop
 800871e:	bf00      	nop
 8008720:	e7fd      	b.n	800871e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008722:	4b0a      	ldr	r3, [pc, #40]	@ (800874c <vPortExitCritical+0x50>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3b01      	subs	r3, #1
 8008728:	4a08      	ldr	r2, [pc, #32]	@ (800874c <vPortExitCritical+0x50>)
 800872a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800872c:	4b07      	ldr	r3, [pc, #28]	@ (800874c <vPortExitCritical+0x50>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d105      	bne.n	8008740 <vPortExitCritical+0x44>
 8008734:	2300      	movs	r3, #0
 8008736:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800873e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	2000000c 	.word	0x2000000c

08008750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008750:	f3ef 8009 	mrs	r0, PSP
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	4b15      	ldr	r3, [pc, #84]	@ (80087b0 <pxCurrentTCBConst>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	f01e 0f10 	tst.w	lr, #16
 8008760:	bf08      	it	eq
 8008762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876a:	6010      	str	r0, [r2, #0]
 800876c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008770:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008774:	f380 8811 	msr	BASEPRI, r0
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f000 fc84 	bl	800908c <vTaskSwitchContext>
 8008784:	f04f 0000 	mov.w	r0, #0
 8008788:	f380 8811 	msr	BASEPRI, r0
 800878c:	bc09      	pop	{r0, r3}
 800878e:	6819      	ldr	r1, [r3, #0]
 8008790:	6808      	ldr	r0, [r1, #0]
 8008792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008796:	f01e 0f10 	tst.w	lr, #16
 800879a:	bf08      	it	eq
 800879c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087a0:	f380 8809 	msr	PSP, r0
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	f3af 8000 	nop.w

080087b0 <pxCurrentTCBConst>:
 80087b0:	20001898 	.word	0x20001898
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop

080087b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	607b      	str	r3, [r7, #4]
}
 80087d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087d2:	f000 fba1 	bl	8008f18 <xTaskIncrementTick>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087dc:	4b06      	ldr	r3, [pc, #24]	@ (80087f8 <SysTick_Handler+0x40>)
 80087de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	2300      	movs	r3, #0
 80087e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	f383 8811 	msr	BASEPRI, r3
}
 80087ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	e000ed04 	.word	0xe000ed04

080087fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008800:	4b0b      	ldr	r3, [pc, #44]	@ (8008830 <vPortSetupTimerInterrupt+0x34>)
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008806:	4b0b      	ldr	r3, [pc, #44]	@ (8008834 <vPortSetupTimerInterrupt+0x38>)
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800880c:	4b0a      	ldr	r3, [pc, #40]	@ (8008838 <vPortSetupTimerInterrupt+0x3c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a0a      	ldr	r2, [pc, #40]	@ (800883c <vPortSetupTimerInterrupt+0x40>)
 8008812:	fba2 2303 	umull	r2, r3, r2, r3
 8008816:	099b      	lsrs	r3, r3, #6
 8008818:	4a09      	ldr	r2, [pc, #36]	@ (8008840 <vPortSetupTimerInterrupt+0x44>)
 800881a:	3b01      	subs	r3, #1
 800881c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800881e:	4b04      	ldr	r3, [pc, #16]	@ (8008830 <vPortSetupTimerInterrupt+0x34>)
 8008820:	2207      	movs	r2, #7
 8008822:	601a      	str	r2, [r3, #0]
}
 8008824:	bf00      	nop
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	e000e010 	.word	0xe000e010
 8008834:	e000e018 	.word	0xe000e018
 8008838:	20000000 	.word	0x20000000
 800883c:	10624dd3 	.word	0x10624dd3
 8008840:	e000e014 	.word	0xe000e014

08008844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008844:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008854 <vPortEnableVFP+0x10>
 8008848:	6801      	ldr	r1, [r0, #0]
 800884a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800884e:	6001      	str	r1, [r0, #0]
 8008850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008852:	bf00      	nop
 8008854:	e000ed88 	.word	0xe000ed88

08008858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800885e:	f3ef 8305 	mrs	r3, IPSR
 8008862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b0f      	cmp	r3, #15
 8008868:	d915      	bls.n	8008896 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800886a:	4a18      	ldr	r2, [pc, #96]	@ (80088cc <vPortValidateInterruptPriority+0x74>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008874:	4b16      	ldr	r3, [pc, #88]	@ (80088d0 <vPortValidateInterruptPriority+0x78>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	7afa      	ldrb	r2, [r7, #11]
 800887a:	429a      	cmp	r2, r3
 800887c:	d20b      	bcs.n	8008896 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	607b      	str	r3, [r7, #4]
}
 8008890:	bf00      	nop
 8008892:	bf00      	nop
 8008894:	e7fd      	b.n	8008892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008896:	4b0f      	ldr	r3, [pc, #60]	@ (80088d4 <vPortValidateInterruptPriority+0x7c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800889e:	4b0e      	ldr	r3, [pc, #56]	@ (80088d8 <vPortValidateInterruptPriority+0x80>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d90b      	bls.n	80088be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80088a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	603b      	str	r3, [r7, #0]
}
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	e7fd      	b.n	80088ba <vPortValidateInterruptPriority+0x62>
	}
 80088be:	bf00      	nop
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	e000e3f0 	.word	0xe000e3f0
 80088d0:	20001890 	.word	0x20001890
 80088d4:	e000ed0c 	.word	0xe000ed0c
 80088d8:	20001894 	.word	0x20001894

080088dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08e      	sub	sp, #56	@ 0x38
 80088e0:	af04      	add	r7, sp, #16
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10b      	bne.n	8008908 <xTaskCreateStatic+0x2c>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	623b      	str	r3, [r7, #32]
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	e7fd      	b.n	8008904 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10b      	bne.n	8008926 <xTaskCreateStatic+0x4a>
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	61fb      	str	r3, [r7, #28]
}
 8008920:	bf00      	nop
 8008922:	bf00      	nop
 8008924:	e7fd      	b.n	8008922 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008926:	23a0      	movs	r3, #160	@ 0xa0
 8008928:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	2ba0      	cmp	r3, #160	@ 0xa0
 800892e:	d00b      	beq.n	8008948 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	61bb      	str	r3, [r7, #24]
}
 8008942:	bf00      	nop
 8008944:	bf00      	nop
 8008946:	e7fd      	b.n	8008944 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008948:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800894a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894c:	2b00      	cmp	r3, #0
 800894e:	d01e      	beq.n	800898e <xTaskCreateStatic+0xb2>
 8008950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008952:	2b00      	cmp	r3, #0
 8008954:	d01b      	beq.n	800898e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008958:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800895a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800895e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008962:	2202      	movs	r2, #2
 8008964:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008968:	2300      	movs	r3, #0
 800896a:	9303      	str	r3, [sp, #12]
 800896c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896e:	9302      	str	r3, [sp, #8]
 8008970:	f107 0314 	add.w	r3, r7, #20
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	68b9      	ldr	r1, [r7, #8]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f851 	bl	8008a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008986:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008988:	f000 f8ee 	bl	8008b68 <prvAddNewTaskToReadyList>
 800898c:	e001      	b.n	8008992 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008992:	697b      	ldr	r3, [r7, #20]
	}
 8008994:	4618      	mov	r0, r3
 8008996:	3728      	adds	r7, #40	@ 0x28
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08c      	sub	sp, #48	@ 0x30
 80089a0:	af04      	add	r7, sp, #16
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	4613      	mov	r3, r2
 80089aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089ac:	88fb      	ldrh	r3, [r7, #6]
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7ff fa9f 	bl	8007ef4 <pvPortMalloc>
 80089b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00e      	beq.n	80089dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089be:	20a0      	movs	r0, #160	@ 0xa0
 80089c0:	f7ff fa98 	bl	8007ef4 <pvPortMalloc>
 80089c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80089d2:	e005      	b.n	80089e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089d4:	6978      	ldr	r0, [r7, #20]
 80089d6:	f7ff fb5b 	bl	8008090 <vPortFree>
 80089da:	e001      	b.n	80089e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d017      	beq.n	8008a16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089ee:	88fa      	ldrh	r2, [r7, #6]
 80089f0:	2300      	movs	r3, #0
 80089f2:	9303      	str	r3, [sp, #12]
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	9302      	str	r3, [sp, #8]
 80089f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fa:	9301      	str	r3, [sp, #4]
 80089fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	68b9      	ldr	r1, [r7, #8]
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 f80f 	bl	8008a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a0a:	69f8      	ldr	r0, [r7, #28]
 8008a0c:	f000 f8ac 	bl	8008b68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a10:	2301      	movs	r3, #1
 8008a12:	61bb      	str	r3, [r7, #24]
 8008a14:	e002      	b.n	8008a1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a16:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a1c:	69bb      	ldr	r3, [r7, #24]
	}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3720      	adds	r7, #32
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
	...

08008a28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b088      	sub	sp, #32
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
 8008a34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a40:	3b01      	subs	r3, #1
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	f023 0307 	bic.w	r3, r3, #7
 8008a4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	f003 0307 	and.w	r3, r3, #7
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00b      	beq.n	8008a72 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	617b      	str	r3, [r7, #20]
}
 8008a6c:	bf00      	nop
 8008a6e:	bf00      	nop
 8008a70:	e7fd      	b.n	8008a6e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d01f      	beq.n	8008ab8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a78:	2300      	movs	r3, #0
 8008a7a:	61fb      	str	r3, [r7, #28]
 8008a7c:	e012      	b.n	8008aa4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	4413      	add	r3, r2
 8008a84:	7819      	ldrb	r1, [r3, #0]
 8008a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	3334      	adds	r3, #52	@ 0x34
 8008a8e:	460a      	mov	r2, r1
 8008a90:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	4413      	add	r3, r2
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d006      	beq.n	8008aac <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	61fb      	str	r3, [r7, #28]
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	2b0f      	cmp	r3, #15
 8008aa8:	d9e9      	bls.n	8008a7e <prvInitialiseNewTask+0x56>
 8008aaa:	e000      	b.n	8008aae <prvInitialiseNewTask+0x86>
			{
				break;
 8008aac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ab6:	e003      	b.n	8008ac0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac2:	2b06      	cmp	r3, #6
 8008ac4:	d901      	bls.n	8008aca <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ac6:	2306      	movs	r3, #6
 8008ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008acc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ace:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ad4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad8:	2200      	movs	r2, #0
 8008ada:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff fc15 	bl	8008310 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	3318      	adds	r3, #24
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff fc10 	bl	8008310 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008af4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af8:	f1c3 0207 	rsb	r2, r3, #7
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b04:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b18:	334c      	adds	r3, #76	@ 0x4c
 8008b1a:	224c      	movs	r2, #76	@ 0x4c
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 fc5a 	bl	80093d8 <memset>
 8008b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b26:	4a0d      	ldr	r2, [pc, #52]	@ (8008b5c <prvInitialiseNewTask+0x134>)
 8008b28:	651a      	str	r2, [r3, #80]	@ 0x50
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8008b60 <prvInitialiseNewTask+0x138>)
 8008b2e:	655a      	str	r2, [r3, #84]	@ 0x54
 8008b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b32:	4a0c      	ldr	r2, [pc, #48]	@ (8008b64 <prvInitialiseNewTask+0x13c>)
 8008b34:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	68f9      	ldr	r1, [r7, #12]
 8008b3a:	69b8      	ldr	r0, [r7, #24]
 8008b3c:	f7ff fc7c 	bl	8008438 <pxPortInitialiseStack>
 8008b40:	4602      	mov	r2, r0
 8008b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b52:	bf00      	nop
 8008b54:	3720      	adds	r7, #32
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	200019c4 	.word	0x200019c4
 8008b60:	20001a2c 	.word	0x20001a2c
 8008b64:	20001a94 	.word	0x20001a94

08008b68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b70:	f7ff fd92 	bl	8008698 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b74:	4b2a      	ldr	r3, [pc, #168]	@ (8008c20 <prvAddNewTaskToReadyList+0xb8>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	4a29      	ldr	r2, [pc, #164]	@ (8008c20 <prvAddNewTaskToReadyList+0xb8>)
 8008b7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b7e:	4b29      	ldr	r3, [pc, #164]	@ (8008c24 <prvAddNewTaskToReadyList+0xbc>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d109      	bne.n	8008b9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b86:	4a27      	ldr	r2, [pc, #156]	@ (8008c24 <prvAddNewTaskToReadyList+0xbc>)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b8c:	4b24      	ldr	r3, [pc, #144]	@ (8008c20 <prvAddNewTaskToReadyList+0xb8>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d110      	bne.n	8008bb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b94:	f000 faf6 	bl	8009184 <prvInitialiseTaskLists>
 8008b98:	e00d      	b.n	8008bb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b9a:	4b23      	ldr	r3, [pc, #140]	@ (8008c28 <prvAddNewTaskToReadyList+0xc0>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ba2:	4b20      	ldr	r3, [pc, #128]	@ (8008c24 <prvAddNewTaskToReadyList+0xbc>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d802      	bhi.n	8008bb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8008c24 <prvAddNewTaskToReadyList+0xbc>)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8008c2c <prvAddNewTaskToReadyList+0xc4>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8008c2c <prvAddNewTaskToReadyList+0xc4>)
 8008bbe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	409a      	lsls	r2, r3
 8008bc8:	4b19      	ldr	r3, [pc, #100]	@ (8008c30 <prvAddNewTaskToReadyList+0xc8>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	4a18      	ldr	r2, [pc, #96]	@ (8008c30 <prvAddNewTaskToReadyList+0xc8>)
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4a15      	ldr	r2, [pc, #84]	@ (8008c34 <prvAddNewTaskToReadyList+0xcc>)
 8008be0:	441a      	add	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	3304      	adds	r3, #4
 8008be6:	4619      	mov	r1, r3
 8008be8:	4610      	mov	r0, r2
 8008bea:	f7ff fb9e 	bl	800832a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bee:	f7ff fd85 	bl	80086fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8008c28 <prvAddNewTaskToReadyList+0xc0>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00e      	beq.n	8008c18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8008c24 <prvAddNewTaskToReadyList+0xbc>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d207      	bcs.n	8008c18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c08:	4b0b      	ldr	r3, [pc, #44]	@ (8008c38 <prvAddNewTaskToReadyList+0xd0>)
 8008c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c18:	bf00      	nop
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	20001998 	.word	0x20001998
 8008c24:	20001898 	.word	0x20001898
 8008c28:	200019a4 	.word	0x200019a4
 8008c2c:	200019b4 	.word	0x200019b4
 8008c30:	200019a0 	.word	0x200019a0
 8008c34:	2000189c 	.word	0x2000189c
 8008c38:	e000ed04 	.word	0xe000ed04

08008c3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c44:	2300      	movs	r3, #0
 8008c46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d018      	beq.n	8008c80 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c4e:	4b14      	ldr	r3, [pc, #80]	@ (8008ca0 <vTaskDelay+0x64>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00b      	beq.n	8008c6e <vTaskDelay+0x32>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	60bb      	str	r3, [r7, #8]
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	e7fd      	b.n	8008c6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c6e:	f000 f885 	bl	8008d7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c72:	2100      	movs	r1, #0
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fb49 	bl	800930c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c7a:	f000 f88d 	bl	8008d98 <xTaskResumeAll>
 8008c7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d107      	bne.n	8008c96 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008c86:	4b07      	ldr	r3, [pc, #28]	@ (8008ca4 <vTaskDelay+0x68>)
 8008c88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	200019c0 	.word	0x200019c0
 8008ca4:	e000ed04 	.word	0xe000ed04

08008ca8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08a      	sub	sp, #40	@ 0x28
 8008cac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008cb6:	463a      	mov	r2, r7
 8008cb8:	1d39      	adds	r1, r7, #4
 8008cba:	f107 0308 	add.w	r3, r7, #8
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7f7 fe90 	bl	80009e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	9202      	str	r2, [sp, #8]
 8008ccc:	9301      	str	r3, [sp, #4]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	460a      	mov	r2, r1
 8008cd6:	4921      	ldr	r1, [pc, #132]	@ (8008d5c <vTaskStartScheduler+0xb4>)
 8008cd8:	4821      	ldr	r0, [pc, #132]	@ (8008d60 <vTaskStartScheduler+0xb8>)
 8008cda:	f7ff fdff 	bl	80088dc <xTaskCreateStatic>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	4a20      	ldr	r2, [pc, #128]	@ (8008d64 <vTaskStartScheduler+0xbc>)
 8008ce2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8008d64 <vTaskStartScheduler+0xbc>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cec:	2301      	movs	r3, #1
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	e001      	b.n	8008cf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d11b      	bne.n	8008d34 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	613b      	str	r3, [r7, #16]
}
 8008d0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d10:	4b15      	ldr	r3, [pc, #84]	@ (8008d68 <vTaskStartScheduler+0xc0>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	334c      	adds	r3, #76	@ 0x4c
 8008d16:	4a15      	ldr	r2, [pc, #84]	@ (8008d6c <vTaskStartScheduler+0xc4>)
 8008d18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d1a:	4b15      	ldr	r3, [pc, #84]	@ (8008d70 <vTaskStartScheduler+0xc8>)
 8008d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d22:	4b14      	ldr	r3, [pc, #80]	@ (8008d74 <vTaskStartScheduler+0xcc>)
 8008d24:	2201      	movs	r2, #1
 8008d26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d28:	4b13      	ldr	r3, [pc, #76]	@ (8008d78 <vTaskStartScheduler+0xd0>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d2e:	f7ff fc0f 	bl	8008550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d32:	e00f      	b.n	8008d54 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3a:	d10b      	bne.n	8008d54 <vTaskStartScheduler+0xac>
	__asm volatile
 8008d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d40:	f383 8811 	msr	BASEPRI, r3
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	60fb      	str	r3, [r7, #12]
}
 8008d4e:	bf00      	nop
 8008d50:	bf00      	nop
 8008d52:	e7fd      	b.n	8008d50 <vTaskStartScheduler+0xa8>
}
 8008d54:	bf00      	nop
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	080096a8 	.word	0x080096a8
 8008d60:	08009155 	.word	0x08009155
 8008d64:	200019bc 	.word	0x200019bc
 8008d68:	20001898 	.word	0x20001898
 8008d6c:	20000010 	.word	0x20000010
 8008d70:	200019b8 	.word	0x200019b8
 8008d74:	200019a4 	.word	0x200019a4
 8008d78:	2000199c 	.word	0x2000199c

08008d7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d80:	4b04      	ldr	r3, [pc, #16]	@ (8008d94 <vTaskSuspendAll+0x18>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3301      	adds	r3, #1
 8008d86:	4a03      	ldr	r2, [pc, #12]	@ (8008d94 <vTaskSuspendAll+0x18>)
 8008d88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d8a:	bf00      	nop
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	200019c0 	.word	0x200019c0

08008d98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008da2:	2300      	movs	r3, #0
 8008da4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008da6:	4b42      	ldr	r3, [pc, #264]	@ (8008eb0 <xTaskResumeAll+0x118>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10b      	bne.n	8008dc6 <xTaskResumeAll+0x2e>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	603b      	str	r3, [r7, #0]
}
 8008dc0:	bf00      	nop
 8008dc2:	bf00      	nop
 8008dc4:	e7fd      	b.n	8008dc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008dc6:	f7ff fc67 	bl	8008698 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008dca:	4b39      	ldr	r3, [pc, #228]	@ (8008eb0 <xTaskResumeAll+0x118>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	4a37      	ldr	r2, [pc, #220]	@ (8008eb0 <xTaskResumeAll+0x118>)
 8008dd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dd4:	4b36      	ldr	r3, [pc, #216]	@ (8008eb0 <xTaskResumeAll+0x118>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d161      	bne.n	8008ea0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ddc:	4b35      	ldr	r3, [pc, #212]	@ (8008eb4 <xTaskResumeAll+0x11c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d05d      	beq.n	8008ea0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008de4:	e02e      	b.n	8008e44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008de6:	4b34      	ldr	r3, [pc, #208]	@ (8008eb8 <xTaskResumeAll+0x120>)
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3318      	adds	r3, #24
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7ff faf6 	bl	80083e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7ff faf1 	bl	80083e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e06:	2201      	movs	r2, #1
 8008e08:	409a      	lsls	r2, r3
 8008e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8008ebc <xTaskResumeAll+0x124>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	4a2a      	ldr	r2, [pc, #168]	@ (8008ebc <xTaskResumeAll+0x124>)
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e18:	4613      	mov	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4a27      	ldr	r2, [pc, #156]	@ (8008ec0 <xTaskResumeAll+0x128>)
 8008e22:	441a      	add	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3304      	adds	r3, #4
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	f7ff fa7d 	bl	800832a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e34:	4b23      	ldr	r3, [pc, #140]	@ (8008ec4 <xTaskResumeAll+0x12c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d302      	bcc.n	8008e44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008e3e:	4b22      	ldr	r3, [pc, #136]	@ (8008ec8 <xTaskResumeAll+0x130>)
 8008e40:	2201      	movs	r2, #1
 8008e42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e44:	4b1c      	ldr	r3, [pc, #112]	@ (8008eb8 <xTaskResumeAll+0x120>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1cc      	bne.n	8008de6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e52:	f000 fa3b 	bl	80092cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e56:	4b1d      	ldr	r3, [pc, #116]	@ (8008ecc <xTaskResumeAll+0x134>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d010      	beq.n	8008e84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e62:	f000 f859 	bl	8008f18 <xTaskIncrementTick>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d002      	beq.n	8008e72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008e6c:	4b16      	ldr	r3, [pc, #88]	@ (8008ec8 <xTaskResumeAll+0x130>)
 8008e6e:	2201      	movs	r2, #1
 8008e70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	3b01      	subs	r3, #1
 8008e76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1f1      	bne.n	8008e62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008e7e:	4b13      	ldr	r3, [pc, #76]	@ (8008ecc <xTaskResumeAll+0x134>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e84:	4b10      	ldr	r3, [pc, #64]	@ (8008ec8 <xTaskResumeAll+0x130>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d009      	beq.n	8008ea0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e90:	4b0f      	ldr	r3, [pc, #60]	@ (8008ed0 <xTaskResumeAll+0x138>)
 8008e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ea0:	f7ff fc2c 	bl	80086fc <vPortExitCritical>

	return xAlreadyYielded;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	200019c0 	.word	0x200019c0
 8008eb4:	20001998 	.word	0x20001998
 8008eb8:	20001958 	.word	0x20001958
 8008ebc:	200019a0 	.word	0x200019a0
 8008ec0:	2000189c 	.word	0x2000189c
 8008ec4:	20001898 	.word	0x20001898
 8008ec8:	200019ac 	.word	0x200019ac
 8008ecc:	200019a8 	.word	0x200019a8
 8008ed0:	e000ed04 	.word	0xe000ed04

08008ed4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008eda:	4b05      	ldr	r3, [pc, #20]	@ (8008ef0 <xTaskGetTickCount+0x1c>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ee0:	687b      	ldr	r3, [r7, #4]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	2000199c 	.word	0x2000199c

08008ef4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008efa:	f7ff fcad 	bl	8008858 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008efe:	2300      	movs	r3, #0
 8008f00:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008f02:	4b04      	ldr	r3, [pc, #16]	@ (8008f14 <xTaskGetTickCountFromISR+0x20>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f08:	683b      	ldr	r3, [r7, #0]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	2000199c 	.word	0x2000199c

08008f18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f22:	4b4f      	ldr	r3, [pc, #316]	@ (8009060 <xTaskIncrementTick+0x148>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f040 808f 	bne.w	800904a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8009064 <xTaskIncrementTick+0x14c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3301      	adds	r3, #1
 8008f32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f34:	4a4b      	ldr	r2, [pc, #300]	@ (8009064 <xTaskIncrementTick+0x14c>)
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d121      	bne.n	8008f84 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f40:	4b49      	ldr	r3, [pc, #292]	@ (8009068 <xTaskIncrementTick+0x150>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00b      	beq.n	8008f62 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	603b      	str	r3, [r7, #0]
}
 8008f5c:	bf00      	nop
 8008f5e:	bf00      	nop
 8008f60:	e7fd      	b.n	8008f5e <xTaskIncrementTick+0x46>
 8008f62:	4b41      	ldr	r3, [pc, #260]	@ (8009068 <xTaskIncrementTick+0x150>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	4b40      	ldr	r3, [pc, #256]	@ (800906c <xTaskIncrementTick+0x154>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a3e      	ldr	r2, [pc, #248]	@ (8009068 <xTaskIncrementTick+0x150>)
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	4a3e      	ldr	r2, [pc, #248]	@ (800906c <xTaskIncrementTick+0x154>)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	4b3e      	ldr	r3, [pc, #248]	@ (8009070 <xTaskIncrementTick+0x158>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	4a3c      	ldr	r2, [pc, #240]	@ (8009070 <xTaskIncrementTick+0x158>)
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	f000 f9a4 	bl	80092cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f84:	4b3b      	ldr	r3, [pc, #236]	@ (8009074 <xTaskIncrementTick+0x15c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d348      	bcc.n	8009020 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f8e:	4b36      	ldr	r3, [pc, #216]	@ (8009068 <xTaskIncrementTick+0x150>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f98:	4b36      	ldr	r3, [pc, #216]	@ (8009074 <xTaskIncrementTick+0x15c>)
 8008f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9e:	601a      	str	r2, [r3, #0]
					break;
 8008fa0:	e03e      	b.n	8009020 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa2:	4b31      	ldr	r3, [pc, #196]	@ (8009068 <xTaskIncrementTick+0x150>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d203      	bcs.n	8008fc2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fba:	4a2e      	ldr	r2, [pc, #184]	@ (8009074 <xTaskIncrementTick+0x15c>)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fc0:	e02e      	b.n	8009020 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7ff fa0c 	bl	80083e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d004      	beq.n	8008fde <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	3318      	adds	r3, #24
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff fa03 	bl	80083e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	409a      	lsls	r2, r3
 8008fe6:	4b24      	ldr	r3, [pc, #144]	@ (8009078 <xTaskIncrementTick+0x160>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	4a22      	ldr	r2, [pc, #136]	@ (8009078 <xTaskIncrementTick+0x160>)
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800907c <xTaskIncrementTick+0x164>)
 8008ffe:	441a      	add	r2, r3
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	3304      	adds	r3, #4
 8009004:	4619      	mov	r1, r3
 8009006:	4610      	mov	r0, r2
 8009008:	f7ff f98f 	bl	800832a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009010:	4b1b      	ldr	r3, [pc, #108]	@ (8009080 <xTaskIncrementTick+0x168>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009016:	429a      	cmp	r2, r3
 8009018:	d3b9      	bcc.n	8008f8e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800901a:	2301      	movs	r3, #1
 800901c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800901e:	e7b6      	b.n	8008f8e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009020:	4b17      	ldr	r3, [pc, #92]	@ (8009080 <xTaskIncrementTick+0x168>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009026:	4915      	ldr	r1, [pc, #84]	@ (800907c <xTaskIncrementTick+0x164>)
 8009028:	4613      	mov	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	440b      	add	r3, r1
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d901      	bls.n	800903c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009038:	2301      	movs	r3, #1
 800903a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800903c:	4b11      	ldr	r3, [pc, #68]	@ (8009084 <xTaskIncrementTick+0x16c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d007      	beq.n	8009054 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009044:	2301      	movs	r3, #1
 8009046:	617b      	str	r3, [r7, #20]
 8009048:	e004      	b.n	8009054 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800904a:	4b0f      	ldr	r3, [pc, #60]	@ (8009088 <xTaskIncrementTick+0x170>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3301      	adds	r3, #1
 8009050:	4a0d      	ldr	r2, [pc, #52]	@ (8009088 <xTaskIncrementTick+0x170>)
 8009052:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009054:	697b      	ldr	r3, [r7, #20]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	200019c0 	.word	0x200019c0
 8009064:	2000199c 	.word	0x2000199c
 8009068:	20001950 	.word	0x20001950
 800906c:	20001954 	.word	0x20001954
 8009070:	200019b0 	.word	0x200019b0
 8009074:	200019b8 	.word	0x200019b8
 8009078:	200019a0 	.word	0x200019a0
 800907c:	2000189c 	.word	0x2000189c
 8009080:	20001898 	.word	0x20001898
 8009084:	200019ac 	.word	0x200019ac
 8009088:	200019a8 	.word	0x200019a8

0800908c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800908c:	b480      	push	{r7}
 800908e:	b087      	sub	sp, #28
 8009090:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009092:	4b2a      	ldr	r3, [pc, #168]	@ (800913c <vTaskSwitchContext+0xb0>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800909a:	4b29      	ldr	r3, [pc, #164]	@ (8009140 <vTaskSwitchContext+0xb4>)
 800909c:	2201      	movs	r2, #1
 800909e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090a0:	e045      	b.n	800912e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80090a2:	4b27      	ldr	r3, [pc, #156]	@ (8009140 <vTaskSwitchContext+0xb4>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a8:	4b26      	ldr	r3, [pc, #152]	@ (8009144 <vTaskSwitchContext+0xb8>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	fab3 f383 	clz	r3, r3
 80090b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80090b6:	7afb      	ldrb	r3, [r7, #11]
 80090b8:	f1c3 031f 	rsb	r3, r3, #31
 80090bc:	617b      	str	r3, [r7, #20]
 80090be:	4922      	ldr	r1, [pc, #136]	@ (8009148 <vTaskSwitchContext+0xbc>)
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	4613      	mov	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	440b      	add	r3, r1
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10b      	bne.n	80090ea <vTaskSwitchContext+0x5e>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	607b      	str	r3, [r7, #4]
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop
 80090e8:	e7fd      	b.n	80090e6 <vTaskSwitchContext+0x5a>
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	4613      	mov	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4a14      	ldr	r2, [pc, #80]	@ (8009148 <vTaskSwitchContext+0xbc>)
 80090f6:	4413      	add	r3, r2
 80090f8:	613b      	str	r3, [r7, #16]
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	605a      	str	r2, [r3, #4]
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	3308      	adds	r3, #8
 800910c:	429a      	cmp	r2, r3
 800910e:	d104      	bne.n	800911a <vTaskSwitchContext+0x8e>
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	605a      	str	r2, [r3, #4]
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	4a0a      	ldr	r2, [pc, #40]	@ (800914c <vTaskSwitchContext+0xc0>)
 8009122:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009124:	4b09      	ldr	r3, [pc, #36]	@ (800914c <vTaskSwitchContext+0xc0>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	334c      	adds	r3, #76	@ 0x4c
 800912a:	4a09      	ldr	r2, [pc, #36]	@ (8009150 <vTaskSwitchContext+0xc4>)
 800912c:	6013      	str	r3, [r2, #0]
}
 800912e:	bf00      	nop
 8009130:	371c      	adds	r7, #28
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	200019c0 	.word	0x200019c0
 8009140:	200019ac 	.word	0x200019ac
 8009144:	200019a0 	.word	0x200019a0
 8009148:	2000189c 	.word	0x2000189c
 800914c:	20001898 	.word	0x20001898
 8009150:	20000010 	.word	0x20000010

08009154 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800915c:	f000 f852 	bl	8009204 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009160:	4b06      	ldr	r3, [pc, #24]	@ (800917c <prvIdleTask+0x28>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d9f9      	bls.n	800915c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009168:	4b05      	ldr	r3, [pc, #20]	@ (8009180 <prvIdleTask+0x2c>)
 800916a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009178:	e7f0      	b.n	800915c <prvIdleTask+0x8>
 800917a:	bf00      	nop
 800917c:	2000189c 	.word	0x2000189c
 8009180:	e000ed04 	.word	0xe000ed04

08009184 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800918a:	2300      	movs	r3, #0
 800918c:	607b      	str	r3, [r7, #4]
 800918e:	e00c      	b.n	80091aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	4613      	mov	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4a12      	ldr	r2, [pc, #72]	@ (80091e4 <prvInitialiseTaskLists+0x60>)
 800919c:	4413      	add	r3, r2
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff f896 	bl	80082d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3301      	adds	r3, #1
 80091a8:	607b      	str	r3, [r7, #4]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b06      	cmp	r3, #6
 80091ae:	d9ef      	bls.n	8009190 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80091b0:	480d      	ldr	r0, [pc, #52]	@ (80091e8 <prvInitialiseTaskLists+0x64>)
 80091b2:	f7ff f88d 	bl	80082d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80091b6:	480d      	ldr	r0, [pc, #52]	@ (80091ec <prvInitialiseTaskLists+0x68>)
 80091b8:	f7ff f88a 	bl	80082d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80091bc:	480c      	ldr	r0, [pc, #48]	@ (80091f0 <prvInitialiseTaskLists+0x6c>)
 80091be:	f7ff f887 	bl	80082d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80091c2:	480c      	ldr	r0, [pc, #48]	@ (80091f4 <prvInitialiseTaskLists+0x70>)
 80091c4:	f7ff f884 	bl	80082d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80091c8:	480b      	ldr	r0, [pc, #44]	@ (80091f8 <prvInitialiseTaskLists+0x74>)
 80091ca:	f7ff f881 	bl	80082d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80091ce:	4b0b      	ldr	r3, [pc, #44]	@ (80091fc <prvInitialiseTaskLists+0x78>)
 80091d0:	4a05      	ldr	r2, [pc, #20]	@ (80091e8 <prvInitialiseTaskLists+0x64>)
 80091d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009200 <prvInitialiseTaskLists+0x7c>)
 80091d6:	4a05      	ldr	r2, [pc, #20]	@ (80091ec <prvInitialiseTaskLists+0x68>)
 80091d8:	601a      	str	r2, [r3, #0]
}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	2000189c 	.word	0x2000189c
 80091e8:	20001928 	.word	0x20001928
 80091ec:	2000193c 	.word	0x2000193c
 80091f0:	20001958 	.word	0x20001958
 80091f4:	2000196c 	.word	0x2000196c
 80091f8:	20001984 	.word	0x20001984
 80091fc:	20001950 	.word	0x20001950
 8009200:	20001954 	.word	0x20001954

08009204 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800920a:	e019      	b.n	8009240 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800920c:	f7ff fa44 	bl	8008698 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009210:	4b10      	ldr	r3, [pc, #64]	@ (8009254 <prvCheckTasksWaitingTermination+0x50>)
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3304      	adds	r3, #4
 800921c:	4618      	mov	r0, r3
 800921e:	f7ff f8e1 	bl	80083e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009222:	4b0d      	ldr	r3, [pc, #52]	@ (8009258 <prvCheckTasksWaitingTermination+0x54>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3b01      	subs	r3, #1
 8009228:	4a0b      	ldr	r2, [pc, #44]	@ (8009258 <prvCheckTasksWaitingTermination+0x54>)
 800922a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800922c:	4b0b      	ldr	r3, [pc, #44]	@ (800925c <prvCheckTasksWaitingTermination+0x58>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3b01      	subs	r3, #1
 8009232:	4a0a      	ldr	r2, [pc, #40]	@ (800925c <prvCheckTasksWaitingTermination+0x58>)
 8009234:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009236:	f7ff fa61 	bl	80086fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f810 	bl	8009260 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009240:	4b06      	ldr	r3, [pc, #24]	@ (800925c <prvCheckTasksWaitingTermination+0x58>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e1      	bne.n	800920c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009248:	bf00      	nop
 800924a:	bf00      	nop
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	2000196c 	.word	0x2000196c
 8009258:	20001998 	.word	0x20001998
 800925c:	20001980 	.word	0x20001980

08009260 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	334c      	adds	r3, #76	@ 0x4c
 800926c:	4618      	mov	r0, r3
 800926e:	f000 f8bb 	bl	80093e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009278:	2b00      	cmp	r3, #0
 800927a:	d108      	bne.n	800928e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009280:	4618      	mov	r0, r3
 8009282:	f7fe ff05 	bl	8008090 <vPortFree>
				vPortFree( pxTCB );
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7fe ff02 	bl	8008090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800928c:	e019      	b.n	80092c2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009294:	2b01      	cmp	r3, #1
 8009296:	d103      	bne.n	80092a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7fe fef9 	bl	8008090 <vPortFree>
	}
 800929e:	e010      	b.n	80092c2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d00b      	beq.n	80092c2 <prvDeleteTCB+0x62>
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	60fb      	str	r3, [r7, #12]
}
 80092bc:	bf00      	nop
 80092be:	bf00      	nop
 80092c0:	e7fd      	b.n	80092be <prvDeleteTCB+0x5e>
	}
 80092c2:	bf00      	nop
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
	...

080092cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009304 <prvResetNextTaskUnblockTime+0x38>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d104      	bne.n	80092e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80092dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009308 <prvResetNextTaskUnblockTime+0x3c>)
 80092de:	f04f 32ff 	mov.w	r2, #4294967295
 80092e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80092e4:	e008      	b.n	80092f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092e6:	4b07      	ldr	r3, [pc, #28]	@ (8009304 <prvResetNextTaskUnblockTime+0x38>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	4a04      	ldr	r2, [pc, #16]	@ (8009308 <prvResetNextTaskUnblockTime+0x3c>)
 80092f6:	6013      	str	r3, [r2, #0]
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	20001950 	.word	0x20001950
 8009308:	200019b8 	.word	0x200019b8

0800930c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009316:	4b29      	ldr	r3, [pc, #164]	@ (80093bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800931c:	4b28      	ldr	r3, [pc, #160]	@ (80093c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3304      	adds	r3, #4
 8009322:	4618      	mov	r0, r3
 8009324:	f7ff f85e 	bl	80083e4 <uxListRemove>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10b      	bne.n	8009346 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800932e:	4b24      	ldr	r3, [pc, #144]	@ (80093c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009334:	2201      	movs	r2, #1
 8009336:	fa02 f303 	lsl.w	r3, r2, r3
 800933a:	43da      	mvns	r2, r3
 800933c:	4b21      	ldr	r3, [pc, #132]	@ (80093c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4013      	ands	r3, r2
 8009342:	4a20      	ldr	r2, [pc, #128]	@ (80093c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009344:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934c:	d10a      	bne.n	8009364 <prvAddCurrentTaskToDelayedList+0x58>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d007      	beq.n	8009364 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009354:	4b1a      	ldr	r3, [pc, #104]	@ (80093c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	3304      	adds	r3, #4
 800935a:	4619      	mov	r1, r3
 800935c:	481a      	ldr	r0, [pc, #104]	@ (80093c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800935e:	f7fe ffe4 	bl	800832a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009362:	e026      	b.n	80093b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4413      	add	r3, r2
 800936a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800936c:	4b14      	ldr	r3, [pc, #80]	@ (80093c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	429a      	cmp	r2, r3
 800937a:	d209      	bcs.n	8009390 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800937c:	4b13      	ldr	r3, [pc, #76]	@ (80093cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	4b0f      	ldr	r3, [pc, #60]	@ (80093c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3304      	adds	r3, #4
 8009386:	4619      	mov	r1, r3
 8009388:	4610      	mov	r0, r2
 800938a:	f7fe fff2 	bl	8008372 <vListInsert>
}
 800938e:	e010      	b.n	80093b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009390:	4b0f      	ldr	r3, [pc, #60]	@ (80093d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	4b0a      	ldr	r3, [pc, #40]	@ (80093c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3304      	adds	r3, #4
 800939a:	4619      	mov	r1, r3
 800939c:	4610      	mov	r0, r2
 800939e:	f7fe ffe8 	bl	8008372 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093a2:	4b0c      	ldr	r3, [pc, #48]	@ (80093d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d202      	bcs.n	80093b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80093ac:	4a09      	ldr	r2, [pc, #36]	@ (80093d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	6013      	str	r3, [r2, #0]
}
 80093b2:	bf00      	nop
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	2000199c 	.word	0x2000199c
 80093c0:	20001898 	.word	0x20001898
 80093c4:	200019a0 	.word	0x200019a0
 80093c8:	20001984 	.word	0x20001984
 80093cc:	20001954 	.word	0x20001954
 80093d0:	20001950 	.word	0x20001950
 80093d4:	200019b8 	.word	0x200019b8

080093d8 <memset>:
 80093d8:	4402      	add	r2, r0
 80093da:	4603      	mov	r3, r0
 80093dc:	4293      	cmp	r3, r2
 80093de:	d100      	bne.n	80093e2 <memset+0xa>
 80093e0:	4770      	bx	lr
 80093e2:	f803 1b01 	strb.w	r1, [r3], #1
 80093e6:	e7f9      	b.n	80093dc <memset+0x4>

080093e8 <_reclaim_reent>:
 80093e8:	4b29      	ldr	r3, [pc, #164]	@ (8009490 <_reclaim_reent+0xa8>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4283      	cmp	r3, r0
 80093ee:	b570      	push	{r4, r5, r6, lr}
 80093f0:	4604      	mov	r4, r0
 80093f2:	d04b      	beq.n	800948c <_reclaim_reent+0xa4>
 80093f4:	69c3      	ldr	r3, [r0, #28]
 80093f6:	b1ab      	cbz	r3, 8009424 <_reclaim_reent+0x3c>
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	b16b      	cbz	r3, 8009418 <_reclaim_reent+0x30>
 80093fc:	2500      	movs	r5, #0
 80093fe:	69e3      	ldr	r3, [r4, #28]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	5959      	ldr	r1, [r3, r5]
 8009404:	2900      	cmp	r1, #0
 8009406:	d13b      	bne.n	8009480 <_reclaim_reent+0x98>
 8009408:	3504      	adds	r5, #4
 800940a:	2d80      	cmp	r5, #128	@ 0x80
 800940c:	d1f7      	bne.n	80093fe <_reclaim_reent+0x16>
 800940e:	69e3      	ldr	r3, [r4, #28]
 8009410:	4620      	mov	r0, r4
 8009412:	68d9      	ldr	r1, [r3, #12]
 8009414:	f000 f864 	bl	80094e0 <_free_r>
 8009418:	69e3      	ldr	r3, [r4, #28]
 800941a:	6819      	ldr	r1, [r3, #0]
 800941c:	b111      	cbz	r1, 8009424 <_reclaim_reent+0x3c>
 800941e:	4620      	mov	r0, r4
 8009420:	f000 f85e 	bl	80094e0 <_free_r>
 8009424:	6961      	ldr	r1, [r4, #20]
 8009426:	b111      	cbz	r1, 800942e <_reclaim_reent+0x46>
 8009428:	4620      	mov	r0, r4
 800942a:	f000 f859 	bl	80094e0 <_free_r>
 800942e:	69e1      	ldr	r1, [r4, #28]
 8009430:	b111      	cbz	r1, 8009438 <_reclaim_reent+0x50>
 8009432:	4620      	mov	r0, r4
 8009434:	f000 f854 	bl	80094e0 <_free_r>
 8009438:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800943a:	b111      	cbz	r1, 8009442 <_reclaim_reent+0x5a>
 800943c:	4620      	mov	r0, r4
 800943e:	f000 f84f 	bl	80094e0 <_free_r>
 8009442:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009444:	b111      	cbz	r1, 800944c <_reclaim_reent+0x64>
 8009446:	4620      	mov	r0, r4
 8009448:	f000 f84a 	bl	80094e0 <_free_r>
 800944c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800944e:	b111      	cbz	r1, 8009456 <_reclaim_reent+0x6e>
 8009450:	4620      	mov	r0, r4
 8009452:	f000 f845 	bl	80094e0 <_free_r>
 8009456:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009458:	b111      	cbz	r1, 8009460 <_reclaim_reent+0x78>
 800945a:	4620      	mov	r0, r4
 800945c:	f000 f840 	bl	80094e0 <_free_r>
 8009460:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009462:	b111      	cbz	r1, 800946a <_reclaim_reent+0x82>
 8009464:	4620      	mov	r0, r4
 8009466:	f000 f83b 	bl	80094e0 <_free_r>
 800946a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800946c:	b111      	cbz	r1, 8009474 <_reclaim_reent+0x8c>
 800946e:	4620      	mov	r0, r4
 8009470:	f000 f836 	bl	80094e0 <_free_r>
 8009474:	6a23      	ldr	r3, [r4, #32]
 8009476:	b14b      	cbz	r3, 800948c <_reclaim_reent+0xa4>
 8009478:	4620      	mov	r0, r4
 800947a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800947e:	4718      	bx	r3
 8009480:	680e      	ldr	r6, [r1, #0]
 8009482:	4620      	mov	r0, r4
 8009484:	f000 f82c 	bl	80094e0 <_free_r>
 8009488:	4631      	mov	r1, r6
 800948a:	e7bb      	b.n	8009404 <_reclaim_reent+0x1c>
 800948c:	bd70      	pop	{r4, r5, r6, pc}
 800948e:	bf00      	nop
 8009490:	20000010 	.word	0x20000010

08009494 <__libc_init_array>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	4d0d      	ldr	r5, [pc, #52]	@ (80094cc <__libc_init_array+0x38>)
 8009498:	4c0d      	ldr	r4, [pc, #52]	@ (80094d0 <__libc_init_array+0x3c>)
 800949a:	1b64      	subs	r4, r4, r5
 800949c:	10a4      	asrs	r4, r4, #2
 800949e:	2600      	movs	r6, #0
 80094a0:	42a6      	cmp	r6, r4
 80094a2:	d109      	bne.n	80094b8 <__libc_init_array+0x24>
 80094a4:	4d0b      	ldr	r5, [pc, #44]	@ (80094d4 <__libc_init_array+0x40>)
 80094a6:	4c0c      	ldr	r4, [pc, #48]	@ (80094d8 <__libc_init_array+0x44>)
 80094a8:	f000 f870 	bl	800958c <_init>
 80094ac:	1b64      	subs	r4, r4, r5
 80094ae:	10a4      	asrs	r4, r4, #2
 80094b0:	2600      	movs	r6, #0
 80094b2:	42a6      	cmp	r6, r4
 80094b4:	d105      	bne.n	80094c2 <__libc_init_array+0x2e>
 80094b6:	bd70      	pop	{r4, r5, r6, pc}
 80094b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094bc:	4798      	blx	r3
 80094be:	3601      	adds	r6, #1
 80094c0:	e7ee      	b.n	80094a0 <__libc_init_array+0xc>
 80094c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c6:	4798      	blx	r3
 80094c8:	3601      	adds	r6, #1
 80094ca:	e7f2      	b.n	80094b2 <__libc_init_array+0x1e>
 80094cc:	08009700 	.word	0x08009700
 80094d0:	08009700 	.word	0x08009700
 80094d4:	08009700 	.word	0x08009700
 80094d8:	08009704 	.word	0x08009704

080094dc <__retarget_lock_acquire_recursive>:
 80094dc:	4770      	bx	lr

080094de <__retarget_lock_release_recursive>:
 80094de:	4770      	bx	lr

080094e0 <_free_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4605      	mov	r5, r0
 80094e4:	2900      	cmp	r1, #0
 80094e6:	d041      	beq.n	800956c <_free_r+0x8c>
 80094e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ec:	1f0c      	subs	r4, r1, #4
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	bfb8      	it	lt
 80094f2:	18e4      	addlt	r4, r4, r3
 80094f4:	f000 f83e 	bl	8009574 <__malloc_lock>
 80094f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009570 <_free_r+0x90>)
 80094fa:	6813      	ldr	r3, [r2, #0]
 80094fc:	b933      	cbnz	r3, 800950c <_free_r+0x2c>
 80094fe:	6063      	str	r3, [r4, #4]
 8009500:	6014      	str	r4, [r2, #0]
 8009502:	4628      	mov	r0, r5
 8009504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009508:	f000 b83a 	b.w	8009580 <__malloc_unlock>
 800950c:	42a3      	cmp	r3, r4
 800950e:	d908      	bls.n	8009522 <_free_r+0x42>
 8009510:	6820      	ldr	r0, [r4, #0]
 8009512:	1821      	adds	r1, r4, r0
 8009514:	428b      	cmp	r3, r1
 8009516:	bf01      	itttt	eq
 8009518:	6819      	ldreq	r1, [r3, #0]
 800951a:	685b      	ldreq	r3, [r3, #4]
 800951c:	1809      	addeq	r1, r1, r0
 800951e:	6021      	streq	r1, [r4, #0]
 8009520:	e7ed      	b.n	80094fe <_free_r+0x1e>
 8009522:	461a      	mov	r2, r3
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	b10b      	cbz	r3, 800952c <_free_r+0x4c>
 8009528:	42a3      	cmp	r3, r4
 800952a:	d9fa      	bls.n	8009522 <_free_r+0x42>
 800952c:	6811      	ldr	r1, [r2, #0]
 800952e:	1850      	adds	r0, r2, r1
 8009530:	42a0      	cmp	r0, r4
 8009532:	d10b      	bne.n	800954c <_free_r+0x6c>
 8009534:	6820      	ldr	r0, [r4, #0]
 8009536:	4401      	add	r1, r0
 8009538:	1850      	adds	r0, r2, r1
 800953a:	4283      	cmp	r3, r0
 800953c:	6011      	str	r1, [r2, #0]
 800953e:	d1e0      	bne.n	8009502 <_free_r+0x22>
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	6053      	str	r3, [r2, #4]
 8009546:	4408      	add	r0, r1
 8009548:	6010      	str	r0, [r2, #0]
 800954a:	e7da      	b.n	8009502 <_free_r+0x22>
 800954c:	d902      	bls.n	8009554 <_free_r+0x74>
 800954e:	230c      	movs	r3, #12
 8009550:	602b      	str	r3, [r5, #0]
 8009552:	e7d6      	b.n	8009502 <_free_r+0x22>
 8009554:	6820      	ldr	r0, [r4, #0]
 8009556:	1821      	adds	r1, r4, r0
 8009558:	428b      	cmp	r3, r1
 800955a:	bf04      	itt	eq
 800955c:	6819      	ldreq	r1, [r3, #0]
 800955e:	685b      	ldreq	r3, [r3, #4]
 8009560:	6063      	str	r3, [r4, #4]
 8009562:	bf04      	itt	eq
 8009564:	1809      	addeq	r1, r1, r0
 8009566:	6021      	streq	r1, [r4, #0]
 8009568:	6054      	str	r4, [r2, #4]
 800956a:	e7ca      	b.n	8009502 <_free_r+0x22>
 800956c:	bd38      	pop	{r3, r4, r5, pc}
 800956e:	bf00      	nop
 8009570:	20001b00 	.word	0x20001b00

08009574 <__malloc_lock>:
 8009574:	4801      	ldr	r0, [pc, #4]	@ (800957c <__malloc_lock+0x8>)
 8009576:	f7ff bfb1 	b.w	80094dc <__retarget_lock_acquire_recursive>
 800957a:	bf00      	nop
 800957c:	20001afc 	.word	0x20001afc

08009580 <__malloc_unlock>:
 8009580:	4801      	ldr	r0, [pc, #4]	@ (8009588 <__malloc_unlock+0x8>)
 8009582:	f7ff bfac 	b.w	80094de <__retarget_lock_release_recursive>
 8009586:	bf00      	nop
 8009588:	20001afc 	.word	0x20001afc

0800958c <_init>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	bf00      	nop
 8009590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009592:	bc08      	pop	{r3}
 8009594:	469e      	mov	lr, r3
 8009596:	4770      	bx	lr

08009598 <_fini>:
 8009598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959a:	bf00      	nop
 800959c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959e:	bc08      	pop	{r3}
 80095a0:	469e      	mov	lr, r3
 80095a2:	4770      	bx	lr
