
sprayerSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a7c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08009c1c  08009c1c  0000ac1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cf8  08009cf8  0000b05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009cf8  08009cf8  0000acf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d00  08009d00  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d00  08009d00  0000ad00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d04  08009d04  0000ad04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08009d08  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  2000005c  08009d64  0000b05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08009d64  0000b414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018249  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad9  00000000  00000000  000232d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00025db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000124e  00000000  00000000  000274f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c54  00000000  00000000  0002873e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a807  00000000  00000000  0004e392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0864  00000000  00000000  00068b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001593fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d7c  00000000  00000000  00159440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001601bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c04 	.word	0x08009c04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08009c04 	.word	0x08009c04

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b988 	b.w	8000f30 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	468e      	mov	lr, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	4688      	mov	r8, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d962      	bls.n	8000d14 <__udivmoddi4+0xdc>
 8000c4e:	fab2 f682 	clz	r6, r2
 8000c52:	b14e      	cbz	r6, 8000c68 <__udivmoddi4+0x30>
 8000c54:	f1c6 0320 	rsb	r3, r6, #32
 8000c58:	fa01 f806 	lsl.w	r8, r1, r6
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	40b7      	lsls	r7, r6
 8000c62:	ea43 0808 	orr.w	r8, r3, r8
 8000c66:	40b4      	lsls	r4, r6
 8000c68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6c:	fa1f fc87 	uxth.w	ip, r7
 8000c70:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c74:	0c23      	lsrs	r3, r4, #16
 8000c76:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c8c:	f080 80ea 	bcs.w	8000e64 <__udivmoddi4+0x22c>
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f240 80e7 	bls.w	8000e64 <__udivmoddi4+0x22c>
 8000c96:	3902      	subs	r1, #2
 8000c98:	443b      	add	r3, r7
 8000c9a:	1a9a      	subs	r2, r3, r2
 8000c9c:	b2a3      	uxth	r3, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000caa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cae:	459c      	cmp	ip, r3
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0x8e>
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb8:	f080 80d6 	bcs.w	8000e68 <__udivmoddi4+0x230>
 8000cbc:	459c      	cmp	ip, r3
 8000cbe:	f240 80d3 	bls.w	8000e68 <__udivmoddi4+0x230>
 8000cc2:	443b      	add	r3, r7
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cca:	eba3 030c 	sub.w	r3, r3, ip
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11d      	cbz	r5, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40f3      	lsrs	r3, r6
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d905      	bls.n	8000cee <__udivmoddi4+0xb6>
 8000ce2:	b10d      	cbz	r5, 8000ce8 <__udivmoddi4+0xb0>
 8000ce4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4608      	mov	r0, r1
 8000cec:	e7f5      	b.n	8000cda <__udivmoddi4+0xa2>
 8000cee:	fab3 f183 	clz	r1, r3
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	d146      	bne.n	8000d84 <__udivmoddi4+0x14c>
 8000cf6:	4573      	cmp	r3, lr
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0xc8>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 8105 	bhi.w	8000f0a <__udivmoddi4+0x2d2>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	4690      	mov	r8, r2
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0e5      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d0e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d12:	e7e2      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f000 8090 	beq.w	8000e3a <__udivmoddi4+0x202>
 8000d1a:	fab2 f682 	clz	r6, r2
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	f040 80a4 	bne.w	8000e6c <__udivmoddi4+0x234>
 8000d24:	1a8a      	subs	r2, r1, r2
 8000d26:	0c03      	lsrs	r3, r0, #16
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	b280      	uxth	r0, r0
 8000d2e:	b2bc      	uxth	r4, r7
 8000d30:	2101      	movs	r1, #1
 8000d32:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d36:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x11e>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x11c>
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	f200 80e0 	bhi.w	8000f14 <__udivmoddi4+0x2dc>
 8000d54:	46c4      	mov	ip, r8
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d5c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d60:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d64:	fb02 f404 	mul.w	r4, r2, r4
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x144>
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x142>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f200 80ca 	bhi.w	8000f0e <__udivmoddi4+0x2d6>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	1b1b      	subs	r3, r3, r4
 8000d7e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d82:	e7a5      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d84:	f1c1 0620 	rsb	r6, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d8e:	431f      	orrs	r7, r3
 8000d90:	fa0e f401 	lsl.w	r4, lr, r1
 8000d94:	fa20 f306 	lsr.w	r3, r0, r6
 8000d98:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d9c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	fa1f fc87 	uxth.w	ip, r7
 8000daa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000db4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000db8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x1a0>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dca:	f080 809c 	bcs.w	8000f06 <__udivmoddi4+0x2ce>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f240 8099 	bls.w	8000f06 <__udivmoddi4+0x2ce>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	443c      	add	r4, r7
 8000dd8:	eba4 040e 	sub.w	r4, r4, lr
 8000ddc:	fa1f fe83 	uxth.w	lr, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dec:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df0:	45a4      	cmp	ip, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1ce>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dfa:	f080 8082 	bcs.w	8000f02 <__udivmoddi4+0x2ca>
 8000dfe:	45a4      	cmp	ip, r4
 8000e00:	d97f      	bls.n	8000f02 <__udivmoddi4+0x2ca>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	443c      	add	r4, r7
 8000e06:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e0a:	eba4 040c 	sub.w	r4, r4, ip
 8000e0e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e12:	4564      	cmp	r4, ip
 8000e14:	4673      	mov	r3, lr
 8000e16:	46e1      	mov	r9, ip
 8000e18:	d362      	bcc.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e1a:	d05f      	beq.n	8000edc <__udivmoddi4+0x2a4>
 8000e1c:	b15d      	cbz	r5, 8000e36 <__udivmoddi4+0x1fe>
 8000e1e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e22:	eb64 0409 	sbc.w	r4, r4, r9
 8000e26:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e2e:	431e      	orrs	r6, r3
 8000e30:	40cc      	lsrs	r4, r1
 8000e32:	e9c5 6400 	strd	r6, r4, [r5]
 8000e36:	2100      	movs	r1, #0
 8000e38:	e74f      	b.n	8000cda <__udivmoddi4+0xa2>
 8000e3a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e3e:	0c01      	lsrs	r1, r0, #16
 8000e40:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e44:	b280      	uxth	r0, r0
 8000e46:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	463c      	mov	r4, r7
 8000e50:	46b8      	mov	r8, r7
 8000e52:	46be      	mov	lr, r7
 8000e54:	2620      	movs	r6, #32
 8000e56:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e5a:	eba2 0208 	sub.w	r2, r2, r8
 8000e5e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e62:	e766      	b.n	8000d32 <__udivmoddi4+0xfa>
 8000e64:	4601      	mov	r1, r0
 8000e66:	e718      	b.n	8000c9a <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e72c      	b.n	8000cc6 <__udivmoddi4+0x8e>
 8000e6c:	f1c6 0220 	rsb	r2, r6, #32
 8000e70:	fa2e f302 	lsr.w	r3, lr, r2
 8000e74:	40b7      	lsls	r7, r6
 8000e76:	40b1      	lsls	r1, r6
 8000e78:	fa20 f202 	lsr.w	r2, r0, r2
 8000e7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e80:	430a      	orrs	r2, r1
 8000e82:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e86:	b2bc      	uxth	r4, r7
 8000e88:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb08 f904 	mul.w	r9, r8, r4
 8000e96:	40b0      	lsls	r0, r6
 8000e98:	4589      	cmp	r9, r1
 8000e9a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e9e:	b280      	uxth	r0, r0
 8000ea0:	d93e      	bls.n	8000f20 <__udivmoddi4+0x2e8>
 8000ea2:	1879      	adds	r1, r7, r1
 8000ea4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ea8:	d201      	bcs.n	8000eae <__udivmoddi4+0x276>
 8000eaa:	4589      	cmp	r9, r1
 8000eac:	d81f      	bhi.n	8000eee <__udivmoddi4+0x2b6>
 8000eae:	eba1 0109 	sub.w	r1, r1, r9
 8000eb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb6:	fb09 f804 	mul.w	r8, r9, r4
 8000eba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec4:	4542      	cmp	r2, r8
 8000ec6:	d229      	bcs.n	8000f1c <__udivmoddi4+0x2e4>
 8000ec8:	18ba      	adds	r2, r7, r2
 8000eca:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ece:	d2c4      	bcs.n	8000e5a <__udivmoddi4+0x222>
 8000ed0:	4542      	cmp	r2, r8
 8000ed2:	d2c2      	bcs.n	8000e5a <__udivmoddi4+0x222>
 8000ed4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ed8:	443a      	add	r2, r7
 8000eda:	e7be      	b.n	8000e5a <__udivmoddi4+0x222>
 8000edc:	45f0      	cmp	r8, lr
 8000ede:	d29d      	bcs.n	8000e1c <__udivmoddi4+0x1e4>
 8000ee0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ee4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ee8:	3801      	subs	r0, #1
 8000eea:	46e1      	mov	r9, ip
 8000eec:	e796      	b.n	8000e1c <__udivmoddi4+0x1e4>
 8000eee:	eba7 0909 	sub.w	r9, r7, r9
 8000ef2:	4449      	add	r1, r9
 8000ef4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ef8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efc:	fb09 f804 	mul.w	r8, r9, r4
 8000f00:	e7db      	b.n	8000eba <__udivmoddi4+0x282>
 8000f02:	4673      	mov	r3, lr
 8000f04:	e77f      	b.n	8000e06 <__udivmoddi4+0x1ce>
 8000f06:	4650      	mov	r0, sl
 8000f08:	e766      	b.n	8000dd8 <__udivmoddi4+0x1a0>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e6fd      	b.n	8000d0a <__udivmoddi4+0xd2>
 8000f0e:	443b      	add	r3, r7
 8000f10:	3a02      	subs	r2, #2
 8000f12:	e733      	b.n	8000d7c <__udivmoddi4+0x144>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	443b      	add	r3, r7
 8000f1a:	e71c      	b.n	8000d56 <__udivmoddi4+0x11e>
 8000f1c:	4649      	mov	r1, r9
 8000f1e:	e79c      	b.n	8000e5a <__udivmoddi4+0x222>
 8000f20:	eba1 0109 	sub.w	r1, r1, r9
 8000f24:	46c4      	mov	ip, r8
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fb09 f804 	mul.w	r8, r9, r4
 8000f2e:	e7c4      	b.n	8000eba <__udivmoddi4+0x282>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b096      	sub	sp, #88	@ 0x58
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f001 fca8 	bl	800288e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f9eb 	bl	8001318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 fc53 	bl	80017ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f46:	f000 fa39 	bl	80013bc <MX_ADC1_Init>
  MX_CAN1_Init();
 8000f4a:	f000 fabb 	bl	80014c4 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000f4e:	f000 fb0b 	bl	8001568 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000f52:	f000 fb49 	bl	80015e8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000f56:	f000 fb85 	bl	8001664 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000f5a:	f000 fc17 	bl	800178c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  TLE9255_Init();
 8000f5e:	f001 f853 	bl	8002008 <TLE9255_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2120      	movs	r1, #32
 8000f66:	486d      	ldr	r0, [pc, #436]	@ (800111c <main+0x1e8>)
 8000f68:	f003 fdda 	bl	8004b20 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000f6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f70:	f001 fd02 	bl	8002978 <HAL_Delay>
  HAL_CAN_Start(&hcan1);
 8000f74:	486a      	ldr	r0, [pc, #424]	@ (8001120 <main+0x1ec>)
 8000f76:	f003 f925 	bl	80041c4 <HAL_CAN_Start>
//  lin_communication();
  uint8_t writeData[4] = {
 8000f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8001124 <main+0x1f0>)
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      (BOARDID >> 24) & 0xFF,
      (BOARDID >> 16) & 0xFF,
      (BOARDID >> 8)  & 0xFF,
      (BOARDID & 0xFF)
  };
  uint8_t readData[4] = {0};
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28

  EEPROM_Write(0x0000, writeData, sizeof(writeData));
 8000f82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f86:	2204      	movs	r2, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 fefc 	bl	8001d88 <EEPROM_Write>
  HAL_Delay(10);  // Ensure write completion
 8000f90:	200a      	movs	r0, #10
 8000f92:	f001 fcf1 	bl	8002978 <HAL_Delay>

  HAL_Delay(1000);
 8000f96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f9a:	f001 fced 	bl	8002978 <HAL_Delay>
//  for(int i =0; i< 1; i++){
  send_can_data(BOARDID,0);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	f240 1021 	movw	r0, #289	@ 0x121
 8000fa4:	f001 f8e2 	bl	800216c <send_can_data>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2120      	movs	r1, #32
 8000fac:	485b      	ldr	r0, [pc, #364]	@ (800111c <main+0x1e8>)
 8000fae:	f003 fdb7 	bl	8004b20 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000fb2:	2064      	movs	r0, #100	@ 0x64
 8000fb4:	f001 fce0 	bl	8002978 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2120      	movs	r1, #32
 8000fbc:	4857      	ldr	r0, [pc, #348]	@ (800111c <main+0x1e8>)
 8000fbe:	f003 fdaf 	bl	8004b20 <HAL_GPIO_WritePin>
	  lin_communication();
 8000fc2:	f000 fded 	bl	8001ba0 <lin_communication>
	  HAL_Delay(100);
 8000fc6:	2064      	movs	r0, #100	@ 0x64
 8000fc8:	f001 fcd6 	bl	8002978 <HAL_Delay>
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000fcc:	4b56      	ldr	r3, [pc, #344]	@ (8001128 <main+0x1f4>)
 8000fce:	4a57      	ldr	r2, [pc, #348]	@ (800112c <main+0x1f8>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4853      	ldr	r0, [pc, #332]	@ (8001120 <main+0x1ec>)
 8000fd4:	f003 fa0a 	bl	80043ec <HAL_CAN_GetRxMessage>
	  if(RxHeader.DLC == 8){
 8000fd8:	4b54      	ldr	r3, [pc, #336]	@ (800112c <main+0x1f8>)
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	d1e3      	bne.n	8000fa8 <main+0x74>
		  if(RxHeader.StdId == 0x00000001)
 8000fe0:	4b52      	ldr	r3, [pc, #328]	@ (800112c <main+0x1f8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d11a      	bne.n	800101e <main+0xea>
		  {
			  if(RxData[0] == 1)
 8000fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8001128 <main+0x1f4>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d109      	bne.n	8001004 <main+0xd0>
			  {
				  blink_led(1);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f001 f861 	bl	80020b8 <blink_led>
				  send_can_data(RxHeader.StdId, 1);
 8000ff6:	4b4d      	ldr	r3, [pc, #308]	@ (800112c <main+0x1f8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 f8b5 	bl	800216c <send_can_data>
 8001002:	e00c      	b.n	800101e <main+0xea>
			  }
			  else if(RxData[0] == 2)
 8001004:	4b48      	ldr	r3, [pc, #288]	@ (8001128 <main+0x1f4>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d108      	bne.n	800101e <main+0xea>
			  {
				  blink_led(2);
 800100c:	2002      	movs	r0, #2
 800100e:	f001 f853 	bl	80020b8 <blink_led>
			  	  send_can_data(RxHeader.StdId, 1);
 8001012:	4b46      	ldr	r3, [pc, #280]	@ (800112c <main+0x1f8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2101      	movs	r1, #1
 8001018:	4618      	mov	r0, r3
 800101a:	f001 f8a7 	bl	800216c <send_can_data>
			  }
		  }
		  if(RxHeader.StdId == 0x00000002){
 800101e:	4b43      	ldr	r3, [pc, #268]	@ (800112c <main+0x1f8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d13a      	bne.n	800109c <main+0x168>
			  if(RxData[0] == 1){
 8001026:	4b40      	ldr	r3, [pc, #256]	@ (8001128 <main+0x1f4>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d109      	bne.n	8001042 <main+0x10e>
				  while(HAL_GPIO_ReadPin(proxMaxTop_GPIO_Port, proxMaxTop_Pin) == 1);
 800102e:	bf00      	nop
 8001030:	2180      	movs	r1, #128	@ 0x80
 8001032:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001036:	f003 fd5b 	bl	8004af0 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d0f7      	beq.n	8001030 <main+0xfc>
 8001040:	e026      	b.n	8001090 <main+0x15c>
			  }
			  else if(RxData[0] == 2){
 8001042:	4b39      	ldr	r3, [pc, #228]	@ (8001128 <main+0x1f4>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d109      	bne.n	800105e <main+0x12a>
				  while(HAL_GPIO_ReadPin(proxMinTop_GPIO_Port,proxMinTop_Pin) == 1);
 800104a:	bf00      	nop
 800104c:	2140      	movs	r1, #64	@ 0x40
 800104e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001052:	f003 fd4d 	bl	8004af0 <HAL_GPIO_ReadPin>
 8001056:	4603      	mov	r3, r0
 8001058:	2b01      	cmp	r3, #1
 800105a:	d0f7      	beq.n	800104c <main+0x118>
 800105c:	e018      	b.n	8001090 <main+0x15c>
			  }
			  else if(RxData[0] == 3){
 800105e:	4b32      	ldr	r3, [pc, #200]	@ (8001128 <main+0x1f4>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d108      	bne.n	8001078 <main+0x144>
				  while(HAL_GPIO_ReadPin(proxMinBase_GPIO_Port,proxMinBase_Pin) == 1);
 8001066:	bf00      	nop
 8001068:	2101      	movs	r1, #1
 800106a:	482c      	ldr	r0, [pc, #176]	@ (800111c <main+0x1e8>)
 800106c:	f003 fd40 	bl	8004af0 <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b01      	cmp	r3, #1
 8001074:	d0f8      	beq.n	8001068 <main+0x134>
 8001076:	e00b      	b.n	8001090 <main+0x15c>
			  }
			  else if(RxData[0] == 4){
 8001078:	4b2b      	ldr	r3, [pc, #172]	@ (8001128 <main+0x1f4>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b04      	cmp	r3, #4
 800107e:	d107      	bne.n	8001090 <main+0x15c>
				  while(HAL_GPIO_ReadPin(proxMaxBase_GPIO_Port,proxMaxBase_Pin) == 1);
 8001080:	bf00      	nop
 8001082:	2102      	movs	r1, #2
 8001084:	4825      	ldr	r0, [pc, #148]	@ (800111c <main+0x1e8>)
 8001086:	f003 fd33 	bl	8004af0 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b01      	cmp	r3, #1
 800108e:	d0f8      	beq.n	8001082 <main+0x14e>
			  }
			  send_can_data(RxHeader.StdId, 1);
 8001090:	4b26      	ldr	r3, [pc, #152]	@ (800112c <main+0x1f8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2101      	movs	r1, #1
 8001096:	4618      	mov	r0, r3
 8001098:	f001 f868 	bl	800216c <send_can_data>
		  }
		  if(RxHeader.StdId == 0x00000003){
 800109c:	4b23      	ldr	r3, [pc, #140]	@ (800112c <main+0x1f8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d107      	bne.n	80010b4 <main+0x180>
			  startSolenoidValveTest();
 80010a4:	f000 fef4 	bl	8001e90 <startSolenoidValveTest>
			  send_can_data(RxHeader.StdId, 1);
 80010a8:	4b20      	ldr	r3, [pc, #128]	@ (800112c <main+0x1f8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 f85c 	bl	800216c <send_can_data>
		  }
		  if(RxHeader.StdId == 0x00000004){
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <main+0x1f8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d153      	bne.n	8001164 <main+0x230>
			  uint16_t angle_scaled = (RxData[1]<<8)|RxData[0];
 80010bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <main+0x1f4>)
 80010be:	785b      	ldrb	r3, [r3, #1]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <main+0x1f4>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
			  int direction = RxData[2];
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <main+0x1f4>)
 80010d6:	789b      	ldrb	r3, [r3, #2]
 80010d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
			  float angle = angle_scaled/100.0;
 80010da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fa28 	bl	8000534 <__aeabi_i2d>
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <main+0x1fc>)
 80010ea:	f7ff fbb7 	bl	800085c <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fd37 	bl	8000b68 <__aeabi_d2f>
 80010fa:	4603      	mov	r3, r0
 80010fc:	64bb      	str	r3, [r7, #72]	@ 0x48
		      uint32_t num_steps = (uint32_t)(angle / STEP_ANGLE);
 80010fe:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001102:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001134 <main+0x200>
 8001106:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800110a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110e:	ee17 3a90 	vmov	r3, s15
 8001112:	647b      	str	r3, [r7, #68]	@ 0x44
		      for (int i = 0; i < 5; i++)
 8001114:	2300      	movs	r3, #0
 8001116:	657b      	str	r3, [r7, #84]	@ 0x54
 8001118:	e01b      	b.n	8001152 <main+0x21e>
 800111a:	bf00      	nop
 800111c:	48000400 	.word	0x48000400
 8001120:	200000e0 	.word	0x200000e0
 8001124:	21010000 	.word	0x21010000
 8001128:	200002b0 	.word	0x200002b0
 800112c:	20000294 	.word	0x20000294
 8001130:	40590000 	.word	0x40590000
 8001134:	3fe66666 	.word	0x3fe66666
		      {
		          Generate_Steps(num_steps, direction);
 8001138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4619      	mov	r1, r3
 800113e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001140:	f000 ff36 	bl	8001fb0 <Generate_Steps>
		          HAL_Delay(1000);
 8001144:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001148:	f001 fc16 	bl	8002978 <HAL_Delay>
		      for (int i = 0; i < 5; i++)
 800114c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800114e:	3301      	adds	r3, #1
 8001150:	657b      	str	r3, [r7, #84]	@ 0x54
 8001152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001154:	2b04      	cmp	r3, #4
 8001156:	ddef      	ble.n	8001138 <main+0x204>
		      }
			  send_can_data(RxHeader.StdId, 1);
 8001158:	4b68      	ldr	r3, [pc, #416]	@ (80012fc <main+0x3c8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2101      	movs	r1, #1
 800115e:	4618      	mov	r0, r3
 8001160:	f001 f804 	bl	800216c <send_can_data>
		  }
		  if(RxHeader.StdId == 0x00000005){
 8001164:	4b65      	ldr	r3, [pc, #404]	@ (80012fc <main+0x3c8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b05      	cmp	r3, #5
 800116a:	d174      	bne.n	8001256 <main+0x322>
			  uint8_t TxData[8];
			  Read_ADC_MultipleChannels();
 800116c:	f000 fbde 	bl	800192c <Read_ADC_MultipleChannels>
			  float temperature = temperature_in_celcius(adc_values[0]);
 8001170:	4b63      	ldr	r3, [pc, #396]	@ (8001300 <main+0x3cc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fc03 	bl	8001980 <temperature_in_celcius>
 800117a:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
			  float voltage_5v = voltage_montior_5v(adc_values[1]);
 800117e:	4b60      	ldr	r3, [pc, #384]	@ (8001300 <main+0x3cc>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fca8 	bl	8001ad8 <voltage_montior_5v>
 8001188:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
			  float voltage_3v = voltage_montior_3v(adc_values[2]);
 800118c:	4b5c      	ldr	r3, [pc, #368]	@ (8001300 <main+0x3cc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fcd5 	bl	8001b40 <voltage_montior_3v>
 8001196:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
				int16_t temp_scaled = (int16_t)(temperature * 100);  // Scale to 0.01°C precision
 800119a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800119e:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001304 <main+0x3d0>
 80011a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011aa:	ee17 3a90 	vmov	r3, s15
 80011ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
				uint16_t volt5_scaled = (uint16_t)(voltage_5v * 1000);  // Scale to 1mV precision
 80011b0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80011b4:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001308 <main+0x3d4>
 80011b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c0:	ee17 3a90 	vmov	r3, s15
 80011c4:	86bb      	strh	r3, [r7, #52]	@ 0x34
				uint16_t volt3_scaled = (uint16_t)(voltage_3v * 1000);
 80011c6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80011ca:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001308 <main+0x3d4>
 80011ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011d6:	ee17 3a90 	vmov	r3, s15
 80011da:	867b      	strh	r3, [r7, #50]	@ 0x32

				TxData[0] = (temp_scaled >> 8) & 0xFF;
 80011dc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80011e0:	121b      	asrs	r3, r3, #8
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f887 3020 	strb.w	r3, [r7, #32]
				TxData[1] = temp_scaled & 0xFF;
 80011ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
				TxData[2] = (volt5_scaled >> 8) & 0xFF;
 80011f2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
				TxData[3] = volt5_scaled & 0xFF;
 80011fe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				TxData[4] = (volt3_scaled >> 8) & 0xFF;
 8001206:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	b29b      	uxth	r3, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				TxData[5] = volt3_scaled & 0xFF;
 8001212:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				TxData[6] = 0x00;  // Reserved Byte
 800121a:	2300      	movs	r3, #0
 800121c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				TxData[7] = 0x00;  // Reserved Byte
 8001220:	2300      	movs	r3, #0
 8001222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

				CAN_TxHeaderTypeDef TxHeader;
				uint32_t TxMailbox;
				TxHeader.StdId = RxHeader.StdId;
 8001226:	4b35      	ldr	r3, [pc, #212]	@ (80012fc <main+0x3c8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	60bb      	str	r3, [r7, #8]
				TxHeader.ExtId = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
				TxHeader.RTR = CAN_RTR_DATA;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
				TxHeader.IDE = CAN_ID_STD;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
				TxHeader.DLC = 8; // Data length code (8 bytes)
 8001238:	2308      	movs	r3, #8
 800123a:	61bb      	str	r3, [r7, #24]

				if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	f107 0220 	add.w	r2, r7, #32
 8001242:	f107 0108 	add.w	r1, r7, #8
 8001246:	4831      	ldr	r0, [pc, #196]	@ (800130c <main+0x3d8>)
 8001248:	f003 f800 	bl	800424c <HAL_CAN_AddTxMessage>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <main+0x322>
				// Transmission Error
				Error_Handler();
 8001252:	f001 f857 	bl	8002304 <Error_Handler>
				}
		  }
		  if(RxHeader.StdId == 0x00000006){
 8001256:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <main+0x3c8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b06      	cmp	r3, #6
 800125c:	d11b      	bne.n	8001296 <main+0x362>
			  EEPROM_Read(0x0000, readData, sizeof(readData));
 800125e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001262:	2204      	movs	r2, #4
 8001264:	4619      	mov	r1, r3
 8001266:	2000      	movs	r0, #0
 8001268:	f000 fde8 	bl	8001e3c <EEPROM_Read>
			  HAL_Delay(10);
 800126c:	200a      	movs	r0, #10
 800126e:	f001 fb83 	bl	8002978 <HAL_Delay>
			  send_can_data((readData[0] << 24)|(readData[1] << 16)|(readData[2] << 8)|readData[3] ,0);
 8001272:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001276:	061a      	lsls	r2, r3, #24
 8001278:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800127c:	041b      	lsls	r3, r3, #16
 800127e:	431a      	orrs	r2, r3
 8001280:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	4313      	orrs	r3, r2
 8001288:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800128c:	4313      	orrs	r3, r2
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f000 ff6b 	bl	800216c <send_can_data>
		  }
		  if(RxHeader.StdId == 0x00000007){
 8001296:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <main+0x3c8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b07      	cmp	r3, #7
 800129c:	d106      	bne.n	80012ac <main+0x378>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2120      	movs	r1, #32
 80012a2:	481b      	ldr	r0, [pc, #108]	@ (8001310 <main+0x3dc>)
 80012a4:	f003 fc3c 	bl	8004b20 <HAL_GPIO_WritePin>
			  lin_communication();
 80012a8:	f000 fc7a 	bl	8001ba0 <lin_communication>
		  }
		  if(RxHeader.StdId == 0x00000008){
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <main+0x3c8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d117      	bne.n	80012e4 <main+0x3b0>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1);
 80012b4:	bf00      	nop
 80012b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012be:	f003 fc17 	bl	8004af0 <HAL_GPIO_ReadPin>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d0f6      	beq.n	80012b6 <main+0x382>
			  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1);
 80012c8:	bf00      	nop
 80012ca:	2104      	movs	r1, #4
 80012cc:	4810      	ldr	r0, [pc, #64]	@ (8001310 <main+0x3dc>)
 80012ce:	f003 fc0f 	bl	8004af0 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d0f8      	beq.n	80012ca <main+0x396>
			  send_can_data(RxHeader.StdId, 1);
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <main+0x3c8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2101      	movs	r1, #1
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 ff44 	bl	800216c <send_can_data>
		  }
		  RxHeader.DLC = 0;
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <main+0x3c8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
		  RxHeader.StdId = 0x00000000;
 80012ea:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <main+0x3c8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
		  memset(RxData, 0, sizeof(RxData));
 80012f0:	2208      	movs	r2, #8
 80012f2:	2100      	movs	r1, #0
 80012f4:	4807      	ldr	r0, [pc, #28]	@ (8001314 <main+0x3e0>)
 80012f6:	f007 fe09 	bl	8008f0c <memset>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80012fa:	e655      	b.n	8000fa8 <main+0x74>
 80012fc:	20000294 	.word	0x20000294
 8001300:	200002b8 	.word	0x200002b8
 8001304:	42c80000 	.word	0x42c80000
 8001308:	447a0000 	.word	0x447a0000
 800130c:	200000e0 	.word	0x200000e0
 8001310:	48000400 	.word	0x48000400
 8001314:	200002b0 	.word	0x200002b0

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b096      	sub	sp, #88	@ 0x58
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	2244      	movs	r2, #68	@ 0x44
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f007 fdf0 	bl	8008f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	463b      	mov	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800133a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800133e:	f004 f9fd 	bl	800573c <HAL_PWREx_ControlVoltageScaling>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001348:	f000 ffdc 	bl	8002304 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800134c:	2302      	movs	r3, #2
 800134e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001350:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001354:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001356:	2340      	movs	r3, #64	@ 0x40
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135a:	2302      	movs	r3, #2
 800135c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800135e:	2302      	movs	r3, #2
 8001360:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001362:	2301      	movs	r3, #1
 8001364:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001366:	230a      	movs	r3, #10
 8001368:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800136a:	2307      	movs	r3, #7
 800136c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800136e:	2302      	movs	r3, #2
 8001370:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001372:	2302      	movs	r3, #2
 8001374:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4618      	mov	r0, r3
 800137c:	f004 fa34 	bl	80057e8 <HAL_RCC_OscConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001386:	f000 ffbd 	bl	8002304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138a:	230f      	movs	r3, #15
 800138c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138e:	2303      	movs	r3, #3
 8001390:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800139e:	463b      	mov	r3, r7
 80013a0:	2104      	movs	r1, #4
 80013a2:	4618      	mov	r0, r3
 80013a4:	f004 fe34 	bl	8006010 <HAL_RCC_ClockConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013ae:	f000 ffa9 	bl	8002304 <Error_Handler>
  }
}
 80013b2:	bf00      	nop
 80013b4:	3758      	adds	r7, #88	@ 0x58
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013d2:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 80013d4:	4a37      	ldr	r2, [pc, #220]	@ (80014b4 <MX_ADC1_Init+0xf8>)
 80013d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013de:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e4:	4b32      	ldr	r3, [pc, #200]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013ea:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f0:	4b2f      	ldr	r3, [pc, #188]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 80013f2:	2204      	movs	r2, #4
 80013f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013f6:	4b2e      	ldr	r3, [pc, #184]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013fc:	4b2c      	ldr	r3, [pc, #176]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001402:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 8001404:	2203      	movs	r2, #3
 8001406:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001408:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001410:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 8001412:	2200      	movs	r2, #0
 8001414:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001416:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 8001418:	2200      	movs	r2, #0
 800141a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800141c:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001424:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 8001426:	2200      	movs	r2, #0
 8001428:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800142a:	4b21      	ldr	r3, [pc, #132]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001432:	481f      	ldr	r0, [pc, #124]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 8001434:	f001 fcec 	bl	8002e10 <HAL_ADC_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800143e:	f000 ff61 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <MX_ADC1_Init+0xfc>)
 8001444:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001446:	2306      	movs	r3, #6
 8001448:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800144a:	2304      	movs	r3, #4
 800144c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800144e:	237f      	movs	r3, #127	@ 0x7f
 8001450:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001452:	2304      	movs	r3, #4
 8001454:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145a:	463b      	mov	r3, r7
 800145c:	4619      	mov	r1, r3
 800145e:	4814      	ldr	r0, [pc, #80]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 8001460:	f001 ff4e 	bl	8003300 <HAL_ADC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800146a:	f000 ff4b 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <MX_ADC1_Init+0x100>)
 8001470:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001472:	230c      	movs	r3, #12
 8001474:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001476:	463b      	mov	r3, r7
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 800147c:	f001 ff40 	bl	8003300 <HAL_ADC_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001486:	f000 ff3d 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800148a:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <MX_ADC1_Init+0x104>)
 800148c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800148e:	2312      	movs	r3, #18
 8001490:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	@ (80014b0 <MX_ADC1_Init+0xf4>)
 8001498:	f001 ff32 	bl	8003300 <HAL_ADC_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80014a2:	f000 ff2f 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000078 	.word	0x20000078
 80014b4:	50040000 	.word	0x50040000
 80014b8:	04300002 	.word	0x04300002
 80014bc:	08600004 	.word	0x08600004
 80014c0:	0c900008 	.word	0x0c900008

080014c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014ca:	4b25      	ldr	r3, [pc, #148]	@ (8001560 <MX_CAN1_Init+0x9c>)
 80014cc:	4a25      	ldr	r2, [pc, #148]	@ (8001564 <MX_CAN1_Init+0xa0>)
 80014ce:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80014d0:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <MX_CAN1_Init+0x9c>)
 80014d2:	2210      	movs	r2, #16
 80014d4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014d6:	4b22      	ldr	r3, [pc, #136]	@ (8001560 <MX_CAN1_Init+0x9c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014dc:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <MX_CAN1_Init+0x9c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80014e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <MX_CAN1_Init+0x9c>)
 80014e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014e8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <MX_CAN1_Init+0x9c>)
 80014ec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80014f0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <MX_CAN1_Init+0x9c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014f8:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <MX_CAN1_Init+0x9c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014fe:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <MX_CAN1_Init+0x9c>)
 8001500:	2200      	movs	r2, #0
 8001502:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001504:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <MX_CAN1_Init+0x9c>)
 8001506:	2200      	movs	r2, #0
 8001508:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <MX_CAN1_Init+0x9c>)
 800150c:	2200      	movs	r2, #0
 800150e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001510:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <MX_CAN1_Init+0x9c>)
 8001512:	2200      	movs	r2, #0
 8001514:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001516:	4812      	ldr	r0, [pc, #72]	@ (8001560 <MX_CAN1_Init+0x9c>)
 8001518:	f002 fc8f 	bl	8003e3a <HAL_CAN_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001522:	f000 feef 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001526:	2301      	movs	r3, #1
 8001528:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000;
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0000;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001546:	2301      	movs	r3, #1
 8001548:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;
 800154a:	230e      	movs	r3, #14
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800154e:	463b      	mov	r3, r7
 8001550:	4619      	mov	r1, r3
 8001552:	4803      	ldr	r0, [pc, #12]	@ (8001560 <MX_CAN1_Init+0x9c>)
 8001554:	f002 fd6c 	bl	8004030 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	3728      	adds	r7, #40	@ 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200000e0 	.word	0x200000e0
 8001564:	40006400 	.word	0x40006400

08001568 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <MX_I2C1_Init+0x74>)
 800156e:	4a1c      	ldr	r2, [pc, #112]	@ (80015e0 <MX_I2C1_Init+0x78>)
 8001570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F12981;
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_I2C1_Init+0x74>)
 8001574:	4a1b      	ldr	r2, [pc, #108]	@ (80015e4 <MX_I2C1_Init+0x7c>)
 8001576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <MX_I2C1_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <MX_I2C1_Init+0x74>)
 8001580:	2201      	movs	r2, #1
 8001582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <MX_I2C1_Init+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <MX_I2C1_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <MX_I2C1_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <MX_I2C1_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159c:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <MX_I2C1_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a2:	480e      	ldr	r0, [pc, #56]	@ (80015dc <MX_I2C1_Init+0x74>)
 80015a4:	f003 fad4 	bl	8004b50 <HAL_I2C_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015ae:	f000 fea9 	bl	8002304 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015b2:	2100      	movs	r1, #0
 80015b4:	4809      	ldr	r0, [pc, #36]	@ (80015dc <MX_I2C1_Init+0x74>)
 80015b6:	f004 f81b 	bl	80055f0 <HAL_I2CEx_ConfigAnalogFilter>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015c0:	f000 fea0 	bl	8002304 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015c4:	2100      	movs	r1, #0
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_I2C1_Init+0x74>)
 80015c8:	f004 f85d 	bl	8005686 <HAL_I2CEx_ConfigDigitalFilter>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015d2:	f000 fe97 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000108 	.word	0x20000108
 80015e0:	40005400 	.word	0x40005400
 80015e4:	00f12981 	.word	0x00f12981

080015e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <MX_SPI2_Init+0x74>)
 80015ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001660 <MX_SPI2_Init+0x78>)
 80015f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <MX_SPI2_Init+0x74>)
 80015f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015fa:	4b18      	ldr	r3, [pc, #96]	@ (800165c <MX_SPI2_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001600:	4b16      	ldr	r3, [pc, #88]	@ (800165c <MX_SPI2_Init+0x74>)
 8001602:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001606:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001608:	4b14      	ldr	r3, [pc, #80]	@ (800165c <MX_SPI2_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800160e:	4b13      	ldr	r3, [pc, #76]	@ (800165c <MX_SPI2_Init+0x74>)
 8001610:	2201      	movs	r2, #1
 8001612:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <MX_SPI2_Init+0x74>)
 8001616:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800161a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <MX_SPI2_Init+0x74>)
 800161e:	2228      	movs	r2, #40	@ 0x28
 8001620:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <MX_SPI2_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <MX_SPI2_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800162e:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <MX_SPI2_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <MX_SPI2_Init+0x74>)
 8001636:	2207      	movs	r2, #7
 8001638:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800163a:	4b08      	ldr	r3, [pc, #32]	@ (800165c <MX_SPI2_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <MX_SPI2_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <MX_SPI2_Init+0x74>)
 8001648:	f005 fa64 	bl	8006b14 <HAL_SPI_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001652:	f000 fe57 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000015c 	.word	0x2000015c
 8001660:	40003800 	.word	0x40003800

08001664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	@ 0x28
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001676:	463b      	mov	r3, r7
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	615a      	str	r2, [r3, #20]
 8001686:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001688:	4b3f      	ldr	r3, [pc, #252]	@ (8001788 <MX_TIM2_Init+0x124>)
 800168a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800168e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 199;
 8001690:	4b3d      	ldr	r3, [pc, #244]	@ (8001788 <MX_TIM2_Init+0x124>)
 8001692:	22c7      	movs	r2, #199	@ 0xc7
 8001694:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	4b3c      	ldr	r3, [pc, #240]	@ (8001788 <MX_TIM2_Init+0x124>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 800169c:	4b3a      	ldr	r3, [pc, #232]	@ (8001788 <MX_TIM2_Init+0x124>)
 800169e:	2213      	movs	r2, #19
 80016a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a2:	4b39      	ldr	r3, [pc, #228]	@ (8001788 <MX_TIM2_Init+0x124>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a8:	4b37      	ldr	r3, [pc, #220]	@ (8001788 <MX_TIM2_Init+0x124>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016ae:	4836      	ldr	r0, [pc, #216]	@ (8001788 <MX_TIM2_Init+0x124>)
 80016b0:	f005 ffcc 	bl	800764c <HAL_TIM_PWM_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80016ba:	f000 fe23 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	482e      	ldr	r0, [pc, #184]	@ (8001788 <MX_TIM2_Init+0x124>)
 80016ce:	f006 fdb5 	bl	800823c <HAL_TIMEx_MasterConfigSynchronization>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80016d8:	f000 fe14 	bl	8002304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016dc:	2360      	movs	r3, #96	@ 0x60
 80016de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 80016e0:	230a      	movs	r3, #10
 80016e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ec:	463b      	mov	r3, r7
 80016ee:	2200      	movs	r2, #0
 80016f0:	4619      	mov	r1, r3
 80016f2:	4825      	ldr	r0, [pc, #148]	@ (8001788 <MX_TIM2_Init+0x124>)
 80016f4:	f006 f970 	bl	80079d8 <HAL_TIM_PWM_ConfigChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80016fe:	f000 fe01 	bl	8002304 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001702:	463b      	mov	r3, r7
 8001704:	2204      	movs	r2, #4
 8001706:	4619      	mov	r1, r3
 8001708:	481f      	ldr	r0, [pc, #124]	@ (8001788 <MX_TIM2_Init+0x124>)
 800170a:	f006 f965 	bl	80079d8 <HAL_TIM_PWM_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001714:	f000 fdf6 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4619      	mov	r1, r3
 8001726:	4818      	ldr	r0, [pc, #96]	@ (8001788 <MX_TIM2_Init+0x124>)
 8001728:	f006 fd88 	bl	800823c <HAL_TIMEx_MasterConfigSynchronization>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM2_Init+0xd2>
   {
     Error_Handler();
 8001732:	f000 fde7 	bl	8002304 <Error_Handler>
   }
   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001736:	2360      	movs	r3, #96	@ 0x60
 8001738:	603b      	str	r3, [r7, #0]
   sConfigOC.Pulse = 10;
 800173a:	230a      	movs	r3, #10
 800173c:	607b      	str	r3, [r7, #4]
   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	2200      	movs	r2, #0
 800174a:	4619      	mov	r1, r3
 800174c:	480e      	ldr	r0, [pc, #56]	@ (8001788 <MX_TIM2_Init+0x124>)
 800174e:	f006 f943 	bl	80079d8 <HAL_TIM_PWM_ConfigChannel>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM2_Init+0xf8>
   {
     Error_Handler();
 8001758:	f000 fdd4 	bl	8002304 <Error_Handler>
   }
   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	2204      	movs	r2, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4809      	ldr	r0, [pc, #36]	@ (8001788 <MX_TIM2_Init+0x124>)
 8001764:	f006 f938 	bl	80079d8 <HAL_TIM_PWM_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM2_Init+0x10e>
   {
     Error_Handler();
 800176e:	f000 fdc9 	bl	8002304 <Error_Handler>
   }
   /* USER CODE BEGIN TIM2_Init 2 */

   /* USER CODE END TIM2_Init 2 */
   HAL_TIM_MspPostInit(&htim2);
 8001772:	4805      	ldr	r0, [pc, #20]	@ (8001788 <MX_TIM2_Init+0x124>)
 8001774:	f000 ff5a 	bl	800262c <HAL_TIM_MspPostInit>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001778:	4803      	ldr	r0, [pc, #12]	@ (8001788 <MX_TIM2_Init+0x124>)
 800177a:	f000 ff57 	bl	800262c <HAL_TIM_MspPostInit>

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200001c0 	.word	0x200001c0

0800178c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <MX_USART3_UART_Init+0x58>)
 8001792:	4a15      	ldr	r2, [pc, #84]	@ (80017e8 <MX_USART3_UART_Init+0x5c>)
 8001794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <MX_USART3_UART_Init+0x58>)
 8001798:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800179c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <MX_USART3_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <MX_USART3_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <MX_USART3_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <MX_USART3_UART_Init+0x58>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <MX_USART3_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <MX_USART3_UART_Init+0x58>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <MX_USART3_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <MX_USART3_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_LIN_Init(&huart3, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 80017ce:	2100      	movs	r1, #0
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <MX_USART3_UART_Init+0x58>)
 80017d2:	f006 fda1 	bl	8008318 <HAL_LIN_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 80017dc:	f000 fd92 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	2000020c 	.word	0x2000020c
 80017e8:	40004800 	.word	0x40004800

080017ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	4b47      	ldr	r3, [pc, #284]	@ (8001920 <MX_GPIO_Init+0x134>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	4a46      	ldr	r2, [pc, #280]	@ (8001920 <MX_GPIO_Init+0x134>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180e:	4b44      	ldr	r3, [pc, #272]	@ (8001920 <MX_GPIO_Init+0x134>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b41      	ldr	r3, [pc, #260]	@ (8001920 <MX_GPIO_Init+0x134>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181e:	4a40      	ldr	r2, [pc, #256]	@ (8001920 <MX_GPIO_Init+0x134>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001826:	4b3e      	ldr	r3, [pc, #248]	@ (8001920 <MX_GPIO_Init+0x134>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4b3b      	ldr	r3, [pc, #236]	@ (8001920 <MX_GPIO_Init+0x134>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	4a3a      	ldr	r2, [pc, #232]	@ (8001920 <MX_GPIO_Init+0x134>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183e:	4b38      	ldr	r3, [pc, #224]	@ (8001920 <MX_GPIO_Init+0x134>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, topDir_Pin|baseDir_Pin|led2_Pin|led1_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f240 610c 	movw	r1, #1548	@ 0x60c
 8001850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001854:	f003 f964 	bl	8004b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENTop_Pin|EN_Base_Pin|GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 800185e:	4831      	ldr	r0, [pc, #196]	@ (8001924 <MX_GPIO_Init+0x138>)
 8001860:	f003 f95e 	bl	8004b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, solenoidTop_Pin|solenoidBase_Pin, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	21c0      	movs	r1, #192	@ 0xc0
 8001868:	482f      	ldr	r0, [pc, #188]	@ (8001928 <MX_GPIO_Init+0x13c>)
 800186a:	f003 f959 	bl	8004b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : topDir_Pin baseDir_Pin led2_Pin led1_Pin */
  GPIO_InitStruct.Pin = topDir_Pin|baseDir_Pin|led2_Pin|led1_Pin;
 800186e:	f240 630c 	movw	r3, #1548	@ 0x60c
 8001872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188a:	f002 ffb7 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : alarmTop_Pin alarmBase_Pin proxMinTop_Pin proxMaxTop_Pin
                           dips1_Pin */
  GPIO_InitStruct.Pin = alarmTop_Pin|alarmBase_Pin|proxMinTop_Pin|proxMaxTop_Pin
 800188e:	f44f 631f 	mov.w	r3, #2544	@ 0x9f0
 8001892:	60fb      	str	r3, [r7, #12]
                          |dips1_Pin|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	4619      	mov	r1, r3
 80018a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a6:	f002 ffa9 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : proxMinBase_Pin proxMaxBase_Pin systemSw_Pin */
  GPIO_InitStruct.Pin = proxMinBase_Pin|proxMaxBase_Pin|systemSw_Pin|GPIO_PIN_5|GPIO_PIN_2;
 80018aa:	2327      	movs	r3, #39	@ 0x27
 80018ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	4619      	mov	r1, r3
 80018bc:	4819      	ldr	r0, [pc, #100]	@ (8001924 <MX_GPIO_Init+0x138>)
 80018be:	f002 ff9d 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ENTop_Pin EN_Base_Pin PB12 */
  GPIO_InitStruct.Pin = ENTop_Pin|EN_Base_Pin|GPIO_PIN_12;
 80018c2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80018c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	4619      	mov	r1, r3
 80018da:	4812      	ldr	r0, [pc, #72]	@ (8001924 <MX_GPIO_Init+0x138>)
 80018dc:	f002 ff8e 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : solenoidTop_Pin solenoidBase_Pin */
  GPIO_InitStruct.Pin = solenoidTop_Pin|solenoidBase_Pin;
 80018e0:	23c0      	movs	r3, #192	@ 0xc0
 80018e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4619      	mov	r1, r3
 80018f6:	480c      	ldr	r0, [pc, #48]	@ (8001928 <MX_GPIO_Init+0x13c>)
 80018f8:	f002 ff80 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : byps_Pin dips2_Pin */
  GPIO_InitStruct.Pin = byps_Pin|dips2_Pin;
 80018fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_GPIO_Init+0x13c>)
 8001912:	f002 ff73 	bl	80047fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	48000400 	.word	0x48000400
 8001928:	48000800 	.word	0x48000800

0800192c <Read_ADC_MultipleChannels>:
//    TxData[5] = volt3_scaled & 0xFF;
//    TxData[6] = 0x00;  // Reserved Byte
//    TxData[7] = 0x00;  // Reserved Byte
//}

void Read_ADC_MultipleChannels() {
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 3; i++) {
 8001932:	2300      	movs	r3, #0
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	e014      	b.n	8001962 <Read_ADC_MultipleChannels+0x36>
        HAL_ADC_Start(&hadc1);  // Start ADC conversion
 8001938:	480e      	ldr	r0, [pc, #56]	@ (8001974 <Read_ADC_MultipleChannels+0x48>)
 800193a:	f001 fbaf 	bl	800309c <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 10);  // Wait for conversion
 800193e:	210a      	movs	r1, #10
 8001940:	480c      	ldr	r0, [pc, #48]	@ (8001974 <Read_ADC_MultipleChannels+0x48>)
 8001942:	f001 fc41 	bl	80031c8 <HAL_ADC_PollForConversion>
        adc_values[i] = HAL_ADC_GetValue(&hadc1);  // Read ADC value
 8001946:	79fc      	ldrb	r4, [r7, #7]
 8001948:	480a      	ldr	r0, [pc, #40]	@ (8001974 <Read_ADC_MultipleChannels+0x48>)
 800194a:	f001 fccc 	bl	80032e6 <HAL_ADC_GetValue>
 800194e:	4603      	mov	r3, r0
 8001950:	4a09      	ldr	r2, [pc, #36]	@ (8001978 <Read_ADC_MultipleChannels+0x4c>)
 8001952:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        HAL_ADC_Stop(&hadc1);  // Stop ADC
 8001956:	4807      	ldr	r0, [pc, #28]	@ (8001974 <Read_ADC_MultipleChannels+0x48>)
 8001958:	f001 fc03 	bl	8003162 <HAL_ADC_Stop>
    for (uint8_t i = 0; i < 3; i++) {
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	3301      	adds	r3, #1
 8001960:	71fb      	strb	r3, [r7, #7]
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d9e7      	bls.n	8001938 <Read_ADC_MultipleChannels+0xc>
    }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bd90      	pop	{r4, r7, pc}
 8001972:	bf00      	nop
 8001974:	20000078 	.word	0x20000078
 8001978:	200002b8 	.word	0x200002b8
 800197c:	00000000 	.word	0x00000000

08001980 <temperature_in_celcius>:

float temperature_in_celcius(uint32_t adc_value){
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b08a      	sub	sp, #40	@ 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	float voltage, resistance, temperature;
    voltage = (adc_value * VREF) / 4095.0;
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7fe fdc3 	bl	8000514 <__aeabi_ui2d>
 800198e:	a34b      	add	r3, pc, #300	@ (adr r3, 8001abc <temperature_in_celcius+0x13c>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe fe38 	bl	8000608 <__aeabi_dmul>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	a348      	add	r3, pc, #288	@ (adr r3, 8001ac4 <temperature_in_celcius+0x144>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	f7fe ff59 	bl	800085c <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff f8d9 	bl	8000b68 <__aeabi_d2f>
 80019b6:	4603      	mov	r3, r0
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24

    resistance = R_FIXED * (voltage / (VREF - voltage));
 80019ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019bc:	f7fe fdcc 	bl	8000558 <__aeabi_f2d>
 80019c0:	4604      	mov	r4, r0
 80019c2:	460d      	mov	r5, r1
 80019c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019c6:	f7fe fdc7 	bl	8000558 <__aeabi_f2d>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	a13b      	add	r1, pc, #236	@ (adr r1, 8001abc <temperature_in_celcius+0x13c>)
 80019d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019d4:	f7fe fc60 	bl	8000298 <__aeabi_dsub>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4620      	mov	r0, r4
 80019de:	4629      	mov	r1, r5
 80019e0:	f7fe ff3c 	bl	800085c <__aeabi_ddiv>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	a337      	add	r3, pc, #220	@ (adr r3, 8001acc <temperature_in_celcius+0x14c>)
 80019ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f2:	f7fe fe09 	bl	8000608 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff f8b3 	bl	8000b68 <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	623b      	str	r3, [r7, #32]

    float A = 0.001129148, B = 0.000234125, C = 0.0000000876741;
 8001a06:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab0 <temperature_in_celcius+0x130>)
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab4 <temperature_in_celcius+0x134>)
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <temperature_in_celcius+0x138>)
 8001a10:	617b      	str	r3, [r7, #20]
    float logR = log(resistance);
 8001a12:	6a38      	ldr	r0, [r7, #32]
 8001a14:	f7fe fda0 	bl	8000558 <__aeabi_f2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	ec43 2b10 	vmov	d0, r2, r3
 8001a20:	f007 fef2 	bl	8009808 <log>
 8001a24:	ec53 2b10 	vmov	r2, r3, d0
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff f89c 	bl	8000b68 <__aeabi_d2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	613b      	str	r3, [r7, #16]
    float temp_kelvin = 1.0 / (A + (B * logR) + (C * logR * logR * logR));
 8001a34:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a38:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a40:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a48:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a70:	edc7 7a03 	vstr	s15, [r7, #12]
    float temp_celsius = temp_kelvin - 273.15;
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7fe fd6f 	bl	8000558 <__aeabi_f2d>
 8001a7a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001aa8 <temperature_in_celcius+0x128>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fc0a 	bl	8000298 <__aeabi_dsub>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7ff f86c 	bl	8000b68 <__aeabi_d2f>
 8001a90:	4603      	mov	r3, r0
 8001a92:	60bb      	str	r3, [r7, #8]

    return temp_celsius;
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	ee07 3a90 	vmov	s15, r3
}
 8001a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9e:	3728      	adds	r7, #40	@ 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	66666666 	.word	0x66666666
 8001aac:	40711266 	.word	0x40711266
 8001ab0:	3a93ffeb 	.word	0x3a93ffeb
 8001ab4:	39757f73 	.word	0x39757f73
 8001ab8:	33bc4759 	.word	0x33bc4759
 8001abc:	66666666 	.word	0x66666666
 8001ac0:	400a6666 	.word	0x400a6666
 8001ac4:	00000000 	.word	0x00000000
 8001ac8:	40affe00 	.word	0x40affe00
 8001acc:	00000000 	.word	0x00000000
 8001ad0:	40c38800 	.word	0x40c38800
 8001ad4:	00000000 	.word	0x00000000

08001ad8 <voltage_montior_5v>:

float voltage_montior_5v(uint32_t adc_value){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    // Convert ADC value to voltage
    float adc_voltage = (adc_value * VREF) / 4095.0;
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7fe fd17 	bl	8000514 <__aeabi_ui2d>
 8001ae6:	a312      	add	r3, pc, #72	@ (adr r3, 8001b30 <voltage_montior_5v+0x58>)
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	f7fe fd8c 	bl	8000608 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	a30f      	add	r3, pc, #60	@ (adr r3, 8001b38 <voltage_montior_5v+0x60>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fead 	bl	800085c <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7ff f82d 	bl	8000b68 <__aeabi_d2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	60fb      	str	r3, [r7, #12]
    float voltage = adc_voltage * SCALE_FACTOR;  // Scale back to original 5V
 8001b12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b1a:	edc7 7a02 	vstr	s15, [r7, #8]

    return voltage;
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	ee07 3a90 	vmov	s15, r3
}
 8001b24:	eeb0 0a67 	vmov.f32	s0, s15
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	66666666 	.word	0x66666666
 8001b34:	400a6666 	.word	0x400a6666
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	40affe00 	.word	0x40affe00

08001b40 <voltage_montior_3v>:

float voltage_montior_3v(uint32_t adc_value){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
    // Convert ADC value to voltage
    float adc_voltage = (adc_value * VREF) / 4095.0;
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7fe fce3 	bl	8000514 <__aeabi_ui2d>
 8001b4e:	a310      	add	r3, pc, #64	@ (adr r3, 8001b90 <voltage_montior_3v+0x50>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fd58 	bl	8000608 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	a30d      	add	r3, pc, #52	@ (adr r3, 8001b98 <voltage_montior_3v+0x58>)
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	f7fe fe79 	bl	800085c <__aeabi_ddiv>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7fe fff9 	bl	8000b68 <__aeabi_d2f>
 8001b76:	4603      	mov	r3, r0
 8001b78:	60fb      	str	r3, [r7, #12]

    return adc_voltage;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	ee07 3a90 	vmov	s15, r3
}
 8001b80:	eeb0 0a67 	vmov.f32	s0, s15
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	f3af 8000 	nop.w
 8001b90:	66666666 	.word	0x66666666
 8001b94:	400a6666 	.word	0x400a6666
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40affe00 	.word	0x40affe00

08001ba0 <lin_communication>:

void lin_communication(){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
	uint8_t TxData_Lin[20];
	TxData_Lin[0] = 0x55; //sync field
 8001ba6:	2355      	movs	r3, #85	@ 0x55
 8001ba8:	703b      	strb	r3, [r7, #0]
	TxData_Lin[1] = pid_Calc(0x34); //protectedID
 8001baa:	2034      	movs	r0, #52	@ 0x34
 8001bac:	f000 f82c 	bl	8001c08 <pid_Calc>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	707b      	strb	r3, [r7, #1]
	for(int i=0; i<8; i++){
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e00a      	b.n	8001bd0 <lin_communication+0x30>
		TxData_Lin[i+2] = i;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	3318      	adds	r3, #24
 8001bc4:	443b      	add	r3, r7
 8001bc6:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(int i=0; i<8; i++){
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b07      	cmp	r3, #7
 8001bd4:	ddf1      	ble.n	8001bba <lin_communication+0x1a>
	}
	TxData_Lin[10] = checksum_Calc(TxData_Lin[1], TxData_Lin+2, 8);
 8001bd6:	7878      	ldrb	r0, [r7, #1]
 8001bd8:	463b      	mov	r3, r7
 8001bda:	3302      	adds	r3, #2
 8001bdc:	2208      	movs	r2, #8
 8001bde:	4619      	mov	r1, r3
 8001be0:	f000 f863 	bl	8001caa <checksum_Calc>
 8001be4:	4603      	mov	r3, r0
 8001be6:	72bb      	strb	r3, [r7, #10]
	HAL_LIN_SendBreak(&huart3);
 8001be8:	4806      	ldr	r0, [pc, #24]	@ (8001c04 <lin_communication+0x64>)
 8001bea:	f006 fc8c 	bl	8008506 <HAL_LIN_SendBreak>
	HAL_UART_Transmit(&huart3, TxData_Lin, 11, 1000);
 8001bee:	4639      	mov	r1, r7
 8001bf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf4:	220b      	movs	r2, #11
 8001bf6:	4803      	ldr	r0, [pc, #12]	@ (8001c04 <lin_communication+0x64>)
 8001bf8:	f006 fbfc 	bl	80083f4 <HAL_UART_Transmit>
}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2000020c 	.word	0x2000020c

08001c08 <pid_Calc>:

uint8_t pid_Calc(uint8_t ID){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
	if(ID > 0x3F) Error_Handler();
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c16:	d901      	bls.n	8001c1c <pid_Calc+0x14>
 8001c18:	f000 fb74 	bl	8002304 <Error_Handler>
	uint8_t IDBuf[6];
	for(int i=0; i<6; i++){
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e010      	b.n	8001c44 <pid_Calc+0x3c>
		IDBuf[i] = (ID>>i)&0x01;
 8001c22:	79fa      	ldrb	r2, [r7, #7]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa42 f303 	asr.w	r3, r2, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	b2d9      	uxtb	r1, r3
 8001c32:	f107 020c 	add.w	r2, r7, #12
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	4413      	add	r3, r2
 8001c3a:	460a      	mov	r2, r1
 8001c3c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<6; i++){
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b05      	cmp	r3, #5
 8001c48:	ddeb      	ble.n	8001c22 <pid_Calc+0x1a>
	}
	uint8_t P0 = (IDBuf[0]^IDBuf[1]^IDBuf[2]^IDBuf[4])&0x01;
 8001c4a:	7b3a      	ldrb	r2, [r7, #12]
 8001c4c:	7b7b      	ldrb	r3, [r7, #13]
 8001c4e:	4053      	eors	r3, r2
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	7bbb      	ldrb	r3, [r7, #14]
 8001c54:	4053      	eors	r3, r2
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	7c3b      	ldrb	r3, [r7, #16]
 8001c5a:	4053      	eors	r3, r2
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	74fb      	strb	r3, [r7, #19]
	uint8_t P1 = ~((IDBuf[1]^IDBuf[3]^IDBuf[4]^IDBuf[5])&0x01);
 8001c64:	7b7a      	ldrb	r2, [r7, #13]
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	4053      	eors	r3, r2
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	7c3b      	ldrb	r3, [r7, #16]
 8001c6e:	4053      	eors	r3, r2
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	7c7b      	ldrb	r3, [r7, #17]
 8001c74:	4053      	eors	r3, r2
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	74bb      	strb	r3, [r7, #18]
	ID = ID | (P0<<6) | (P1<<7);
 8001c82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c86:	019b      	lsls	r3, r3, #6
 8001c88:	b25a      	sxtb	r2, r3
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	b25a      	sxtb	r2, r3
 8001c92:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001c96:	01db      	lsls	r3, r3, #7
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	71fb      	strb	r3, [r7, #7]
	return ID;
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <checksum_Calc>:

uint8_t checksum_Calc(uint8_t PID, uint8_t *data, uint8_t size){
 8001caa:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001cae:	b089      	sub	sp, #36	@ 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	71bb      	strb	r3, [r7, #6]
 8001cbc:	466b      	mov	r3, sp
 8001cbe:	4618      	mov	r0, r3
	uint8_t buffer[size+2];
 8001cc0:	79bb      	ldrb	r3, [r7, #6]
 8001cc2:	1c99      	adds	r1, r3, #2
 8001cc4:	1e4b      	subs	r3, r1, #1
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	460a      	mov	r2, r1
 8001cca:	2300      	movs	r3, #0
 8001ccc:	4690      	mov	r8, r2
 8001cce:	4699      	mov	r9, r3
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cdc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ce0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	4614      	mov	r4, r2
 8001cea:	461d      	mov	r5, r3
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	00eb      	lsls	r3, r5, #3
 8001cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cfa:	00e2      	lsls	r2, r4, #3
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	3307      	adds	r3, #7
 8001d00:	08db      	lsrs	r3, r3, #3
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	ebad 0d03 	sub.w	sp, sp, r3
 8001d08:	466b      	mov	r3, sp
 8001d0a:	3300      	adds	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
	uint16_t sum=0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	83fb      	strh	r3, [r7, #30]
	buffer[0] = PID;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	79fa      	ldrb	r2, [r7, #7]
 8001d16:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++){
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	e00a      	b.n	8001d34 <checksum_Calc+0x8a>
		buffer[i+1] = data[i];
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	441a      	add	r2, r3
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	3301      	adds	r3, #1
 8001d28:	7811      	ldrb	r1, [r2, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<size; i++){
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	3301      	adds	r3, #1
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	dbf0      	blt.n	8001d1e <checksum_Calc+0x74>
	}
	for(int i=0;i>size;i++){
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e010      	b.n	8001d64 <checksum_Calc+0xba>
		sum = sum+buffer[i];
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	4413      	add	r3, r2
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	8bfb      	ldrh	r3, [r7, #30]
 8001d4e:	4413      	add	r3, r2
 8001d50:	83fb      	strh	r3, [r7, #30]
		if(sum > 0xff) sum = sum - 0xff;
 8001d52:	8bfb      	ldrh	r3, [r7, #30]
 8001d54:	2bff      	cmp	r3, #255	@ 0xff
 8001d56:	d902      	bls.n	8001d5e <checksum_Calc+0xb4>
 8001d58:	8bfb      	ldrh	r3, [r7, #30]
 8001d5a:	3bff      	subs	r3, #255	@ 0xff
 8001d5c:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i>size;i++){
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dcea      	bgt.n	8001d42 <checksum_Calc+0x98>
	}
	sum = 0xff - sum;
 8001d6c:	8bfb      	ldrh	r3, [r7, #30]
 8001d6e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001d72:	83fb      	strh	r3, [r7, #30]
	return sum;
 8001d74:	8bfb      	ldrh	r3, [r7, #30]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	4685      	mov	sp, r0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	@ 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001d84:	4770      	bx	lr
	...

08001d88 <EEPROM_Write>:

void EEPROM_Write(uint16_t memAddr, uint8_t *data, uint16_t len){
 8001d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d8c:	b087      	sub	sp, #28
 8001d8e:	af02      	add	r7, sp, #8
 8001d90:	4603      	mov	r3, r0
 8001d92:	6039      	str	r1, [r7, #0]
 8001d94:	80fb      	strh	r3, [r7, #6]
 8001d96:	4613      	mov	r3, r2
 8001d98:	80bb      	strh	r3, [r7, #4]
 8001d9a:	466b      	mov	r3, sp
 8001d9c:	461e      	mov	r6, r3
    uint8_t buffer[len + 2];
 8001d9e:	88bb      	ldrh	r3, [r7, #4]
 8001da0:	1c99      	adds	r1, r3, #2
 8001da2:	1e4b      	subs	r3, r1, #1
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	460a      	mov	r2, r1
 8001da8:	2300      	movs	r3, #0
 8001daa:	4690      	mov	r8, r2
 8001dac:	4699      	mov	r9, r3
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	4614      	mov	r4, r2
 8001dc8:	461d      	mov	r5, r3
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	00eb      	lsls	r3, r5, #3
 8001dd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dd8:	00e2      	lsls	r2, r4, #3
 8001dda:	460b      	mov	r3, r1
 8001ddc:	3307      	adds	r3, #7
 8001dde:	08db      	lsrs	r3, r3, #3
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	ebad 0d03 	sub.w	sp, sp, r3
 8001de6:	ab02      	add	r3, sp, #8
 8001de8:	3300      	adds	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]

    buffer[0] = (memAddr >> 8) & 0xFF;  // High byte of address
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	701a      	strb	r2, [r3, #0]
    buffer[1] = memAddr & 0xFF;         // Low byte of address
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	705a      	strb	r2, [r3, #1]

    memcpy(&buffer[2], data, len);  // Copy data to buffer
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	3302      	adds	r3, #2
 8001e04:	88ba      	ldrh	r2, [r7, #4]
 8001e06:	6839      	ldr	r1, [r7, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f007 f8b3 	bl	8008f74 <memcpy>

    HAL_I2C_Master_Transmit(&hi2c1, EEPROM_I2C_ADDR, buffer, len + 2, HAL_MAX_DELAY);
 8001e0e:	88bb      	ldrh	r3, [r7, #4]
 8001e10:	3302      	adds	r3, #2
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	9200      	str	r2, [sp, #0]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	21a0      	movs	r1, #160	@ 0xa0
 8001e1e:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <EEPROM_Write+0xb0>)
 8001e20:	f002 ff32 	bl	8004c88 <HAL_I2C_Master_Transmit>
    HAL_Delay(5);  // EEPROM write cycle time (max 5ms)
 8001e24:	2005      	movs	r0, #5
 8001e26:	f000 fda7 	bl	8002978 <HAL_Delay>
 8001e2a:	46b5      	mov	sp, r6
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e36:	bf00      	nop
 8001e38:	20000108 	.word	0x20000108

08001e3c <EEPROM_Read>:

void EEPROM_Read(uint16_t memAddr, uint8_t *buffer, uint16_t len){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	80fb      	strh	r3, [r7, #6]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	80bb      	strh	r3, [r7, #4]
    uint8_t addr[2];

    addr[0] = (memAddr >> 8) & 0xFF;  // High byte of address
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	733b      	strb	r3, [r7, #12]
    addr[1] = memAddr & 0xFF;         // Low byte of address
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	737b      	strb	r3, [r7, #13]

    HAL_I2C_Master_Transmit(&hi2c1, EEPROM_I2C_ADDR, addr, 2, HAL_MAX_DELAY);
 8001e5c:	f107 020c 	add.w	r2, r7, #12
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	2302      	movs	r3, #2
 8001e68:	21a0      	movs	r1, #160	@ 0xa0
 8001e6a:	4808      	ldr	r0, [pc, #32]	@ (8001e8c <EEPROM_Read+0x50>)
 8001e6c:	f002 ff0c 	bl	8004c88 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, EEPROM_I2C_ADDR, buffer, len, HAL_MAX_DELAY);
 8001e70:	88bb      	ldrh	r3, [r7, #4]
 8001e72:	f04f 32ff 	mov.w	r2, #4294967295
 8001e76:	9200      	str	r2, [sp, #0]
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	21a0      	movs	r1, #160	@ 0xa0
 8001e7c:	4803      	ldr	r0, [pc, #12]	@ (8001e8c <EEPROM_Read+0x50>)
 8001e7e:	f003 f81b 	bl	8004eb8 <HAL_I2C_Master_Receive>
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000108 	.word	0x20000108

08001e90 <startSolenoidValveTest>:

void startSolenoidValveTest(){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
    for(int i = 0; i < 2; i++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	e014      	b.n	8001ec6 <startSolenoidValveTest+0x36>
    {
        HAL_GPIO_WritePin(solenoidBase_GPIO_Port, solenoidBase_Pin, GPIO_PIN_SET);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	2180      	movs	r1, #128	@ 0x80
 8001ea0:	481a      	ldr	r0, [pc, #104]	@ (8001f0c <startSolenoidValveTest+0x7c>)
 8001ea2:	f002 fe3d 	bl	8004b20 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8001ea6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001eaa:	f000 fd65 	bl	8002978 <HAL_Delay>
        HAL_GPIO_WritePin(solenoidBase_GPIO_Port, solenoidBase_Pin, GPIO_PIN_RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2180      	movs	r1, #128	@ 0x80
 8001eb2:	4816      	ldr	r0, [pc, #88]	@ (8001f0c <startSolenoidValveTest+0x7c>)
 8001eb4:	f002 fe34 	bl	8004b20 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8001eb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ebc:	f000 fd5c 	bl	8002978 <HAL_Delay>
    for(int i = 0; i < 2; i++)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	dde7      	ble.n	8001e9c <startSolenoidValveTest+0xc>
    }
    for(int i = 0; i < 2; i++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	e014      	b.n	8001efc <startSolenoidValveTest+0x6c>
    {

        HAL_GPIO_WritePin(solenoidTop_GPIO_Port, solenoidTop_Pin, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2140      	movs	r1, #64	@ 0x40
 8001ed6:	480d      	ldr	r0, [pc, #52]	@ (8001f0c <startSolenoidValveTest+0x7c>)
 8001ed8:	f002 fe22 	bl	8004b20 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8001edc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ee0:	f000 fd4a 	bl	8002978 <HAL_Delay>
        HAL_GPIO_WritePin(solenoidTop_GPIO_Port, solenoidTop_Pin, GPIO_PIN_RESET);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2140      	movs	r1, #64	@ 0x40
 8001ee8:	4808      	ldr	r0, [pc, #32]	@ (8001f0c <startSolenoidValveTest+0x7c>)
 8001eea:	f002 fe19 	bl	8004b20 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8001eee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ef2:	f000 fd41 	bl	8002978 <HAL_Delay>
    for(int i = 0; i < 2; i++)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	dde7      	ble.n	8001ed2 <startSolenoidValveTest+0x42>
    }
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	48000800 	.word	0x48000800

08001f10 <Set_Motor_Direction>:
void Set_Motor_Direction(uint8_t direction) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
    if (direction == 1) {
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10c      	bne.n	8001f3a <Set_Motor_Direction+0x2a>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // Forward
 8001f20:	2201      	movs	r2, #1
 8001f22:	2104      	movs	r1, #4
 8001f24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f28:	f002 fdfa 	bl	8004b20 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	2108      	movs	r1, #8
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f34:	f002 fdf4 	bl	8004b20 <HAL_GPIO_WritePin>
 8001f38:	e00b      	b.n	8001f52 <Set_Motor_Direction+0x42>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // Forward
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2104      	movs	r1, #4
 8001f3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f42:	f002 fded 	bl	8004b20 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2108      	movs	r1, #8
 8001f4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f4e:	f002 fde7 	bl	8004b20 <HAL_GPIO_WritePin>
    }
    HAL_Delay(1);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f000 fd10 	bl	8002978 <HAL_Delay>
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <Enable_Motor>:

void Enable_Motor(uint8_t enable) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
    if (enable == 1) {
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d10c      	bne.n	8001f8a <Enable_Motor+0x2a>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // Enable motor
 8001f70:	2201      	movs	r2, #1
 8001f72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f76:	480d      	ldr	r0, [pc, #52]	@ (8001fac <Enable_Motor+0x4c>)
 8001f78:	f002 fdd2 	bl	8004b20 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // Enable motor
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f82:	480a      	ldr	r0, [pc, #40]	@ (8001fac <Enable_Motor+0x4c>)
 8001f84:	f002 fdcc 	bl	8004b20 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // Enable motor
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // Enable motor
    }
}
 8001f88:	e00b      	b.n	8001fa2 <Enable_Motor+0x42>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // Enable motor
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f90:	4806      	ldr	r0, [pc, #24]	@ (8001fac <Enable_Motor+0x4c>)
 8001f92:	f002 fdc5 	bl	8004b20 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // Enable motor
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f9c:	4803      	ldr	r0, [pc, #12]	@ (8001fac <Enable_Motor+0x4c>)
 8001f9e:	f002 fdbf 	bl	8004b20 <HAL_GPIO_WritePin>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	48000400 	.word	0x48000400

08001fb0 <Generate_Steps>:

void Generate_Steps(uint32_t num_steps, uint8_t direction){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
    // Set the direction
    Set_Motor_Direction(direction);
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ffa6 	bl	8001f10 <Set_Motor_Direction>

    // Enable the motor
    Enable_Motor(0);
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f7ff ffcb 	bl	8001f60 <Enable_Motor>

    // Enable PWM
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001fca:	2100      	movs	r1, #0
 8001fcc:	480c      	ldr	r0, [pc, #48]	@ (8002000 <Generate_Steps+0x50>)
 8001fce:	f005 fb95 	bl	80076fc <HAL_TIM_PWM_Start>

    uint32_t move_time = (num_steps * 10) / 1000; // Convert step time to milliseconds
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <Generate_Steps+0x54>)
 8001fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8001fe4:	099b      	lsrs	r3, r3, #6
 8001fe6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(1);
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f000 fcc5 	bl	8002978 <HAL_Delay>

    // Disable PWM
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4803      	ldr	r0, [pc, #12]	@ (8002000 <Generate_Steps+0x50>)
 8001ff2:	f005 fc69 	bl	80078c8 <HAL_TIM_PWM_Stop>

//    Enable_Motor(1);
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200001c0 	.word	0x200001c0
 8002004:	10624dd3 	.word	0x10624dd3

08002008 <TLE9255_Init>:

void TLE9255_Init(){
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800200c:	2201      	movs	r2, #1
 800200e:	2120      	movs	r1, #32
 8002010:	4828      	ldr	r0, [pc, #160]	@ (80020b4 <TLE9255_Init+0xac>)
 8002012:	f002 fd85 	bl	8004b20 <HAL_GPIO_WritePin>
	  TLE9255_WriteReg(0x01, 0x08);
 8002016:	2108      	movs	r1, #8
 8002018:	2001      	movs	r0, #1
 800201a:	f000 f901 	bl	8002220 <TLE9255_WriteReg>
	  HAL_Delay(1);
 800201e:	2001      	movs	r0, #1
 8002020:	f000 fcaa 	bl	8002978 <HAL_Delay>
	  TLE9255_WriteReg(0x06, 0x05);
 8002024:	2105      	movs	r1, #5
 8002026:	2006      	movs	r0, #6
 8002028:	f000 f8fa 	bl	8002220 <TLE9255_WriteReg>
	  HAL_Delay(1);
 800202c:	2001      	movs	r0, #1
 800202e:	f000 fca3 	bl	8002978 <HAL_Delay>
	  TLE9255_WriteReg(0x07, 0x08);
 8002032:	2108      	movs	r1, #8
 8002034:	2007      	movs	r0, #7
 8002036:	f000 f8f3 	bl	8002220 <TLE9255_WriteReg>
	  HAL_Delay(1);
 800203a:	2001      	movs	r0, #1
 800203c:	f000 fc9c 	bl	8002978 <HAL_Delay>
	  TLE9255_WriteReg(0x08, 0x80);
 8002040:	2180      	movs	r1, #128	@ 0x80
 8002042:	2008      	movs	r0, #8
 8002044:	f000 f8ec 	bl	8002220 <TLE9255_WriteReg>
	  HAL_Delay(1);
 8002048:	2001      	movs	r0, #1
 800204a:	f000 fc95 	bl	8002978 <HAL_Delay>
	  TLE9255_WriteReg(0x09, 0x00);
 800204e:	2100      	movs	r1, #0
 8002050:	2009      	movs	r0, #9
 8002052:	f000 f8e5 	bl	8002220 <TLE9255_WriteReg>
	  HAL_Delay(1);
 8002056:	2001      	movs	r0, #1
 8002058:	f000 fc8e 	bl	8002978 <HAL_Delay>
	  TLE9255_WriteReg(0x0A, 0x00);
 800205c:	2100      	movs	r1, #0
 800205e:	200a      	movs	r0, #10
 8002060:	f000 f8de 	bl	8002220 <TLE9255_WriteReg>
	  HAL_Delay(1);
 8002064:	2001      	movs	r0, #1
 8002066:	f000 fc87 	bl	8002978 <HAL_Delay>
	  TLE9255_WriteReg(0x0B, 0x00);
 800206a:	2100      	movs	r1, #0
 800206c:	200b      	movs	r0, #11
 800206e:	f000 f8d7 	bl	8002220 <TLE9255_WriteReg>
	  HAL_Delay(1);
 8002072:	2001      	movs	r0, #1
 8002074:	f000 fc80 	bl	8002978 <HAL_Delay>
	  TLE9255_WriteReg(0x0C, 0x00);
 8002078:	2100      	movs	r1, #0
 800207a:	200c      	movs	r0, #12
 800207c:	f000 f8d0 	bl	8002220 <TLE9255_WriteReg>
	  HAL_Delay(1);
 8002080:	2001      	movs	r0, #1
 8002082:	f000 fc79 	bl	8002978 <HAL_Delay>
	  TLE9255_WriteReg(0x0D, 0x00);
 8002086:	2100      	movs	r1, #0
 8002088:	200d      	movs	r0, #13
 800208a:	f000 f8c9 	bl	8002220 <TLE9255_WriteReg>
	  HAL_Delay(1);
 800208e:	2001      	movs	r0, #1
 8002090:	f000 fc72 	bl	8002978 <HAL_Delay>
	  TLE9255_WriteReg(0x0E, 0x00);
 8002094:	2100      	movs	r1, #0
 8002096:	200e      	movs	r0, #14
 8002098:	f000 f8c2 	bl	8002220 <TLE9255_WriteReg>
	  HAL_Delay(1);
 800209c:	2001      	movs	r0, #1
 800209e:	f000 fc6b 	bl	8002978 <HAL_Delay>
	  TLE9255_WriteReg(0x0f, 0x08);
 80020a2:	2108      	movs	r1, #8
 80020a4:	200f      	movs	r0, #15
 80020a6:	f000 f8bb 	bl	8002220 <TLE9255_WriteReg>
	  HAL_Delay(1);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f000 fc64 	bl	8002978 <HAL_Delay>

}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	48000400 	.word	0x48000400

080020b8 <blink_led>:

void blink_led(int num)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	if(num == 1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d11e      	bne.n	8002104 <blink_led+0x4c>
	{
		for(int i = 0; i< 5; i++){
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	e018      	b.n	80020fe <blink_led+0x46>
			HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 80020cc:	2201      	movs	r2, #1
 80020ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020d6:	f002 fd23 	bl	8004b20 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80020da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020de:	f000 fc4b 	bl	8002978 <HAL_Delay>
			HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80020e2:	2200      	movs	r2, #0
 80020e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ec:	f002 fd18 	bl	8004b20 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80020f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020f4:	f000 fc40 	bl	8002978 <HAL_Delay>
		for(int i = 0; i< 5; i++){
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3301      	adds	r3, #1
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b04      	cmp	r3, #4
 8002102:	dde3      	ble.n	80020cc <blink_led+0x14>
		}
	}
	if(num == 2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d12c      	bne.n	8002164 <blink_led+0xac>
	{
		for(int i = 0; i< 5; i++){
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	e026      	b.n	800215e <blink_led+0xa6>
			HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8002110:	2201      	movs	r2, #1
 8002112:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800211a:	f002 fd01 	bl	8004b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 800211e:	2201      	movs	r2, #1
 8002120:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002128:	f002 fcfa 	bl	8004b20 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 800212c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002130:	f000 fc22 	bl	8002978 <HAL_Delay>
			HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8002134:	2200      	movs	r2, #0
 8002136:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800213a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800213e:	f002 fcef 	bl	8004b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002148:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800214c:	f002 fce8 	bl	8004b20 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8002150:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002154:	f000 fc10 	bl	8002978 <HAL_Delay>
		for(int i = 0; i< 5; i++){
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	3301      	adds	r3, #1
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b04      	cmp	r3, #4
 8002162:	ddd5      	ble.n	8002110 <blink_led+0x58>
		}
	}


}
 8002164:	bf00      	nop
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <send_can_data>:



void send_can_data(uint32_t Header, int ack){
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	@ 0x30
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
	uint8_t testData[8];
	if(ack == 0){
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d117      	bne.n	80021ac <send_can_data+0x40>
		  testData[0] = 0x00;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		  testData[1] = 0x00;
 8002182:	2300      	movs	r3, #0
 8002184:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		  testData[2] = 0x00;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		  testData[3] = 0x00;
 800218e:	2300      	movs	r3, #0
 8002190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		  testData[4] = 0x00;
 8002194:	2300      	movs	r3, #0
 8002196:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		  testData[5] = 0x00;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		  testData[6] = 0x00;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		  testData[7] = 0x00;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}
	if(ack == 1){
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d117      	bne.n	80021e2 <send_can_data+0x76>
		  testData[0] = 0x01;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		  testData[1] = 0x01;
 80021b8:	2301      	movs	r3, #1
 80021ba:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		  testData[2] = 0x01;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		  testData[3] = 0x01;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		  testData[4] = 0x01;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		  testData[5] = 0x01;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		  testData[6] = 0x01;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		  testData[7] = 0x01;
 80021dc:	2301      	movs	r3, #1
 80021de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

  // Send CAN message
  CAN_TxHeaderTypeDef TxHeader;
  uint32_t TxMailbox;
  TxHeader.StdId = Header;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	613b      	str	r3, [r7, #16]
  TxHeader.ExtId = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  TxHeader.RTR = CAN_RTR_DATA;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  TxHeader.IDE = CAN_ID_STD;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  TxHeader.DLC = 8; // Data length code (8 bytes)
 80021f2:	2308      	movs	r3, #8
 80021f4:	623b      	str	r3, [r7, #32]

  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, testData, &TxMailbox) != HAL_OK) {
 80021f6:	f107 030c 	add.w	r3, r7, #12
 80021fa:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80021fe:	f107 0110 	add.w	r1, r7, #16
 8002202:	4806      	ldr	r0, [pc, #24]	@ (800221c <send_can_data+0xb0>)
 8002204:	f002 f822 	bl	800424c <HAL_CAN_AddTxMessage>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <send_can_data+0xa6>
	// Transmission Error
	Error_Handler();
 800220e:	f000 f879 	bl	8002304 <Error_Handler>
  }
}
 8002212:	bf00      	nop
 8002214:	3730      	adds	r7, #48	@ 0x30
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200000e0 	.word	0x200000e0

08002220 <TLE9255_WriteReg>:
// ** SPI Write Register **
uint8_t TLE9255_WriteReg(uint8_t reg, uint8_t value)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b094      	sub	sp, #80	@ 0x50
 8002224:	af02      	add	r7, sp, #8
 8002226:	4603      	mov	r3, r0
 8002228:	460a      	mov	r2, r1
 800222a:	71fb      	strb	r3, [r7, #7]
 800222c:	4613      	mov	r3, r2
 800222e:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2] = { reg | 0x80, value }; // Write command (MSB cleared)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800223c:	79bb      	ldrb	r3, [r7, #6]
 800223e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t rxData[2];

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // CSN LOW
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002248:	482a      	ldr	r0, [pc, #168]	@ (80022f4 <TLE9255_WriteReg+0xd4>)
 800224a:	f002 fc69 	bl	8004b20 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, txData, 2, HAL_MAX_DELAY);
 800224e:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	2202      	movs	r2, #2
 8002258:	4827      	ldr	r0, [pc, #156]	@ (80022f8 <TLE9255_WriteReg+0xd8>)
 800225a:	f004 fcfe 	bl	8006c5a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // CSN HIGH
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002264:	4823      	ldr	r0, [pc, #140]	@ (80022f4 <TLE9255_WriteReg+0xd4>)
 8002266:	f002 fc5b 	bl	8004b20 <HAL_GPIO_WritePin>
    txData[0] = reg & 0x7f;
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // CSN LOW
 8002276:	2200      	movs	r2, #0
 8002278:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800227c:	481d      	ldr	r0, [pc, #116]	@ (80022f4 <TLE9255_WriteReg+0xd4>)
 800227e:	f002 fc4f 	bl	8004b20 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, txData, rxData, 2, HAL_MAX_DELAY);
 8002282:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002286:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2302      	movs	r3, #2
 8002292:	4819      	ldr	r0, [pc, #100]	@ (80022f8 <TLE9255_WriteReg+0xd8>)
 8002294:	f004 fe57 	bl	8006f46 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002298:	2201      	movs	r2, #1
 800229a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800229e:	4815      	ldr	r0, [pc, #84]	@ (80022f4 <TLE9255_WriteReg+0xd4>)
 80022a0:	f002 fc3e 	bl	8004b20 <HAL_GPIO_WritePin>
    char response[50];
    memset(response, 0, sizeof(response));
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	2232      	movs	r2, #50	@ 0x32
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f006 fe2d 	bl	8008f0c <memset>
    snprintf(response, sizeof(response), "SPI Write Complete : %02X, %02X\n", rxData[0], rxData[1]);
 80022b2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80022b6:	461a      	mov	r2, r3
 80022b8:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80022bc:	f107 000c 	add.w	r0, r7, #12
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	4613      	mov	r3, r2
 80022c4:	4a0d      	ldr	r2, [pc, #52]	@ (80022fc <TLE9255_WriteReg+0xdc>)
 80022c6:	2132      	movs	r1, #50	@ 0x32
 80022c8:	f006 fdea 	bl	8008ea0 <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fd ff85 	bl	80001e0 <strlen>
 80022d6:	4603      	mov	r3, r0
 80022d8:	b29a      	uxth	r2, r3
 80022da:	f107 010c 	add.w	r1, r7, #12
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	4807      	ldr	r0, [pc, #28]	@ (8002300 <TLE9255_WriteReg+0xe0>)
 80022e4:	f006 f886 	bl	80083f4 <HAL_UART_Transmit>
//
//    memset(response, 0, sizeof(response));
//    snprintf(response, sizeof(response), "SPI Read Data Values : %02X, %02X\t\n", rxData[0], rxData[1]);
//    HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);

    return rxData[1];
 80022e8:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3748      	adds	r7, #72	@ 0x48
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	48000400 	.word	0x48000400
 80022f8:	2000015c 	.word	0x2000015c
 80022fc:	08009c1c 	.word	0x08009c1c
 8002300:	2000020c 	.word	0x2000020c

08002304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002308:	b672      	cpsid	i
}
 800230a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <Error_Handler+0x8>

08002310 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <HAL_MspInit+0x44>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231a:	4a0e      	ldr	r2, [pc, #56]	@ (8002354 <HAL_MspInit+0x44>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6613      	str	r3, [r2, #96]	@ 0x60
 8002322:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <HAL_MspInit+0x44>)
 8002324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <HAL_MspInit+0x44>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002332:	4a08      	ldr	r2, [pc, #32]	@ (8002354 <HAL_MspInit+0x44>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002338:	6593      	str	r3, [r2, #88]	@ 0x58
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_MspInit+0x44>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000

08002358 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b0a4      	sub	sp, #144	@ 0x90
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	2268      	movs	r2, #104	@ 0x68
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f006 fdc7 	bl	8008f0c <memset>
  if(hadc->Instance==ADC1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a26      	ldr	r2, [pc, #152]	@ (800241c <HAL_ADC_MspInit+0xc4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d144      	bne.n	8002412 <HAL_ADC_MspInit+0xba>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002388:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800238c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800238e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002392:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002394:	2302      	movs	r3, #2
 8002396:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002398:	2301      	movs	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800239c:	2308      	movs	r3, #8
 800239e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80023a0:	2307      	movs	r3, #7
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80023a4:	2302      	movs	r3, #2
 80023a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80023a8:	2302      	movs	r3, #2
 80023aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80023ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023b0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4618      	mov	r0, r3
 80023b8:	f004 f84e 	bl	8006458 <HAL_RCCEx_PeriphCLKConfig>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80023c2:	f7ff ff9f 	bl	8002304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <HAL_ADC_MspInit+0xc8>)
 80023c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ca:	4a15      	ldr	r2, [pc, #84]	@ (8002420 <HAL_ADC_MspInit+0xc8>)
 80023cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023d2:	4b13      	ldr	r3, [pc, #76]	@ (8002420 <HAL_ADC_MspInit+0xc8>)
 80023d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023de:	4b10      	ldr	r3, [pc, #64]	@ (8002420 <HAL_ADC_MspInit+0xc8>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002420 <HAL_ADC_MspInit+0xc8>)
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <HAL_ADC_MspInit+0xc8>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = pcbTempMon_Pin|pcb5vMon_Pin|pcb3vMon_Pin;
 80023f6:	2307      	movs	r3, #7
 80023f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80023fa:	230b      	movs	r3, #11
 80023fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002406:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	@ (8002424 <HAL_ADC_MspInit+0xcc>)
 800240e:	f002 f9f5 	bl	80047fc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002412:	bf00      	nop
 8002414:	3790      	adds	r7, #144	@ 0x90
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	50040000 	.word	0x50040000
 8002420:	40021000 	.word	0x40021000
 8002424:	48000800 	.word	0x48000800

08002428 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a17      	ldr	r2, [pc, #92]	@ (80024a4 <HAL_CAN_MspInit+0x7c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d128      	bne.n	800249c <HAL_CAN_MspInit+0x74>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800244a:	4b17      	ldr	r3, [pc, #92]	@ (80024a8 <HAL_CAN_MspInit+0x80>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	4a16      	ldr	r2, [pc, #88]	@ (80024a8 <HAL_CAN_MspInit+0x80>)
 8002450:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002454:	6593      	str	r3, [r2, #88]	@ 0x58
 8002456:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <HAL_CAN_MspInit+0x80>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_CAN_MspInit+0x80>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002466:	4a10      	ldr	r2, [pc, #64]	@ (80024a8 <HAL_CAN_MspInit+0x80>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800246e:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <HAL_CAN_MspInit+0x80>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800247a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800247e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002488:	2303      	movs	r3, #3
 800248a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800248c:	2309      	movs	r3, #9
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	4619      	mov	r1, r3
 8002496:	4805      	ldr	r0, [pc, #20]	@ (80024ac <HAL_CAN_MspInit+0x84>)
 8002498:	f002 f9b0 	bl	80047fc <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800249c:	bf00      	nop
 800249e:	3728      	adds	r7, #40	@ 0x28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40006400 	.word	0x40006400
 80024a8:	40021000 	.word	0x40021000
 80024ac:	48000400 	.word	0x48000400

080024b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b0a4      	sub	sp, #144	@ 0x90
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2268      	movs	r2, #104	@ 0x68
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f006 fd1b 	bl	8008f0c <memset>
  if(hi2c->Instance==I2C1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a20      	ldr	r2, [pc, #128]	@ (800255c <HAL_I2C_MspInit+0xac>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d139      	bne.n	8002554 <HAL_I2C_MspInit+0xa4>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024e0:	2340      	movs	r3, #64	@ 0x40
 80024e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024e4:	2300      	movs	r3, #0
 80024e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	4618      	mov	r0, r3
 80024ee:	f003 ffb3 	bl	8006458 <HAL_RCCEx_PeriphCLKConfig>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80024f8:	f7ff ff04 	bl	8002304 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fc:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <HAL_I2C_MspInit+0xb0>)
 80024fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002500:	4a17      	ldr	r2, [pc, #92]	@ (8002560 <HAL_I2C_MspInit+0xb0>)
 8002502:	f043 0302 	orr.w	r3, r3, #2
 8002506:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002508:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <HAL_I2C_MspInit+0xb0>)
 800250a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002514:	23c0      	movs	r3, #192	@ 0xc0
 8002516:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002518:	2312      	movs	r3, #18
 800251a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002524:	2303      	movs	r3, #3
 8002526:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800252a:	2304      	movs	r3, #4
 800252c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002530:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002534:	4619      	mov	r1, r3
 8002536:	480b      	ldr	r0, [pc, #44]	@ (8002564 <HAL_I2C_MspInit+0xb4>)
 8002538:	f002 f960 	bl	80047fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800253c:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <HAL_I2C_MspInit+0xb0>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	4a07      	ldr	r2, [pc, #28]	@ (8002560 <HAL_I2C_MspInit+0xb0>)
 8002542:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002546:	6593      	str	r3, [r2, #88]	@ 0x58
 8002548:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_I2C_MspInit+0xb0>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002554:	bf00      	nop
 8002556:	3790      	adds	r7, #144	@ 0x90
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40005400 	.word	0x40005400
 8002560:	40021000 	.word	0x40021000
 8002564:	48000400 	.word	0x48000400

08002568 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a17      	ldr	r2, [pc, #92]	@ (80025e4 <HAL_SPI_MspInit+0x7c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d128      	bne.n	80025dc <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800258a:	4b17      	ldr	r3, [pc, #92]	@ (80025e8 <HAL_SPI_MspInit+0x80>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258e:	4a16      	ldr	r2, [pc, #88]	@ (80025e8 <HAL_SPI_MspInit+0x80>)
 8002590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002594:	6593      	str	r3, [r2, #88]	@ 0x58
 8002596:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <HAL_SPI_MspInit+0x80>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a2:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <HAL_SPI_MspInit+0x80>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a6:	4a10      	ldr	r2, [pc, #64]	@ (80025e8 <HAL_SPI_MspInit+0x80>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ae:	4b0e      	ldr	r3, [pc, #56]	@ (80025e8 <HAL_SPI_MspInit+0x80>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80025ba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80025be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025cc:	2305      	movs	r3, #5
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4619      	mov	r1, r3
 80025d6:	4805      	ldr	r0, [pc, #20]	@ (80025ec <HAL_SPI_MspInit+0x84>)
 80025d8:	f002 f910 	bl	80047fc <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80025dc:	bf00      	nop
 80025de:	3728      	adds	r7, #40	@ 0x28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40003800 	.word	0x40003800
 80025e8:	40021000 	.word	0x40021000
 80025ec:	48000400 	.word	0x48000400

080025f0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002600:	d10b      	bne.n	800261a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002602:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <HAL_TIM_PWM_MspInit+0x38>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	4a08      	ldr	r2, [pc, #32]	@ (8002628 <HAL_TIM_PWM_MspInit+0x38>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6593      	str	r3, [r2, #88]	@ 0x58
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_TIM_PWM_MspInit+0x38>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000

0800262c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800264c:	d11c      	bne.n	8002688 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <HAL_TIM_MspPostInit+0x64>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002652:	4a0f      	ldr	r2, [pc, #60]	@ (8002690 <HAL_TIM_MspPostInit+0x64>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800265a:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <HAL_TIM_MspPostInit+0x64>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = pulseSignalTop_Pin|pulseSignalBase_Pin;
 8002666:	2303      	movs	r3, #3
 8002668:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002676:	2301      	movs	r3, #1
 8002678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	f107 030c 	add.w	r3, r7, #12
 800267e:	4619      	mov	r1, r3
 8002680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002684:	f002 f8ba 	bl	80047fc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002688:	bf00      	nop
 800268a:	3720      	adds	r7, #32
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000

08002694 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b0a4      	sub	sp, #144	@ 0x90
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	2268      	movs	r2, #104	@ 0x68
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f006 fc29 	bl	8008f0c <memset>
  if(huart->Instance==USART3)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a20      	ldr	r2, [pc, #128]	@ (8002740 <HAL_UART_MspInit+0xac>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d139      	bne.n	8002738 <HAL_UART_MspInit+0xa4>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026c4:	2304      	movs	r3, #4
 80026c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80026c8:	2300      	movs	r3, #0
 80026ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 fec1 	bl	8006458 <HAL_RCCEx_PeriphCLKConfig>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026dc:	f7ff fe12 	bl	8002304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80026e0:	4b18      	ldr	r3, [pc, #96]	@ (8002744 <HAL_UART_MspInit+0xb0>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	4a17      	ldr	r2, [pc, #92]	@ (8002744 <HAL_UART_MspInit+0xb0>)
 80026e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80026ec:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <HAL_UART_MspInit+0xb0>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f8:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <HAL_UART_MspInit+0xb0>)
 80026fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fc:	4a11      	ldr	r2, [pc, #68]	@ (8002744 <HAL_UART_MspInit+0xb0>)
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002704:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <HAL_UART_MspInit+0xb0>)
 8002706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002710:	2330      	movs	r3, #48	@ 0x30
 8002712:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002726:	2307      	movs	r3, #7
 8002728:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002730:	4619      	mov	r1, r3
 8002732:	4805      	ldr	r0, [pc, #20]	@ (8002748 <HAL_UART_MspInit+0xb4>)
 8002734:	f002 f862 	bl	80047fc <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8002738:	bf00      	nop
 800273a:	3790      	adds	r7, #144	@ 0x90
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40004800 	.word	0x40004800
 8002744:	40021000 	.word	0x40021000
 8002748:	48000800 	.word	0x48000800

0800274c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <NMI_Handler+0x4>

08002754 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <HardFault_Handler+0x4>

0800275c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <MemManage_Handler+0x4>

08002764 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <BusFault_Handler+0x4>

0800276c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002770:	bf00      	nop
 8002772:	e7fd      	b.n	8002770 <UsageFault_Handler+0x4>

08002774 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027a2:	f000 f8c9 	bl	8002938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b4:	4a14      	ldr	r2, [pc, #80]	@ (8002808 <_sbrk+0x5c>)
 80027b6:	4b15      	ldr	r3, [pc, #84]	@ (800280c <_sbrk+0x60>)
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c0:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <_sbrk+0x64>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c8:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <_sbrk+0x64>)
 80027ca:	4a12      	ldr	r2, [pc, #72]	@ (8002814 <_sbrk+0x68>)
 80027cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ce:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <_sbrk+0x64>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d207      	bcs.n	80027ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027dc:	f006 fb9e 	bl	8008f1c <__errno>
 80027e0:	4603      	mov	r3, r0
 80027e2:	220c      	movs	r2, #12
 80027e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	e009      	b.n	8002800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027ec:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <_sbrk+0x64>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027f2:	4b07      	ldr	r3, [pc, #28]	@ (8002810 <_sbrk+0x64>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	4a05      	ldr	r2, [pc, #20]	@ (8002810 <_sbrk+0x64>)
 80027fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027fe:	68fb      	ldr	r3, [r7, #12]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20020000 	.word	0x20020000
 800280c:	00000400 	.word	0x00000400
 8002810:	200002c4 	.word	0x200002c4
 8002814:	20000418 	.word	0x20000418

08002818 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <SystemInit+0x20>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002822:	4a05      	ldr	r2, [pc, #20]	@ (8002838 <SystemInit+0x20>)
 8002824:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002828:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800283c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002874 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002840:	f7ff ffea 	bl	8002818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002844:	480c      	ldr	r0, [pc, #48]	@ (8002878 <LoopForever+0x6>)
  ldr r1, =_edata
 8002846:	490d      	ldr	r1, [pc, #52]	@ (800287c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002848:	4a0d      	ldr	r2, [pc, #52]	@ (8002880 <LoopForever+0xe>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800284c:	e002      	b.n	8002854 <LoopCopyDataInit>

0800284e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800284e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002852:	3304      	adds	r3, #4

08002854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002858:	d3f9      	bcc.n	800284e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285a:	4a0a      	ldr	r2, [pc, #40]	@ (8002884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800285c:	4c0a      	ldr	r4, [pc, #40]	@ (8002888 <LoopForever+0x16>)
  movs r3, #0
 800285e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002860:	e001      	b.n	8002866 <LoopFillZerobss>

08002862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002864:	3204      	adds	r2, #4

08002866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002868:	d3fb      	bcc.n	8002862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800286a:	f006 fb5d 	bl	8008f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800286e:	f7fe fb61 	bl	8000f34 <main>

08002872 <LoopForever>:

LoopForever:
    b LoopForever
 8002872:	e7fe      	b.n	8002872 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800287c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002880:	08009d08 	.word	0x08009d08
  ldr r2, =_sbss
 8002884:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002888:	20000414 	.word	0x20000414

0800288c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800288c:	e7fe      	b.n	800288c <ADC1_IRQHandler>

0800288e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002898:	2003      	movs	r0, #3
 800289a:	f001 ff7b 	bl	8004794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800289e:	200f      	movs	r0, #15
 80028a0:	f000 f80e 	bl	80028c0 <HAL_InitTick>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	71fb      	strb	r3, [r7, #7]
 80028ae:	e001      	b.n	80028b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028b0:	f7ff fd2e 	bl	8002310 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028b4:	79fb      	ldrb	r3, [r7, #7]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028cc:	4b17      	ldr	r3, [pc, #92]	@ (800292c <HAL_InitTick+0x6c>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d023      	beq.n	800291c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028d4:	4b16      	ldr	r3, [pc, #88]	@ (8002930 <HAL_InitTick+0x70>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b14      	ldr	r3, [pc, #80]	@ (800292c <HAL_InitTick+0x6c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	4619      	mov	r1, r3
 80028de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 ff79 	bl	80047e2 <HAL_SYSTICK_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b0f      	cmp	r3, #15
 80028fa:	d809      	bhi.n	8002910 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028fc:	2200      	movs	r2, #0
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	f001 ff51 	bl	80047aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002908:	4a0a      	ldr	r2, [pc, #40]	@ (8002934 <HAL_InitTick+0x74>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e007      	b.n	8002920 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	e004      	b.n	8002920 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
 800291a:	e001      	b.n	8002920 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000008 	.word	0x20000008
 8002930:	20000000 	.word	0x20000000
 8002934:	20000004 	.word	0x20000004

08002938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800293c:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <HAL_IncTick+0x20>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	4b06      	ldr	r3, [pc, #24]	@ (800295c <HAL_IncTick+0x24>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4413      	add	r3, r2
 8002948:	4a04      	ldr	r2, [pc, #16]	@ (800295c <HAL_IncTick+0x24>)
 800294a:	6013      	str	r3, [r2, #0]
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000008 	.word	0x20000008
 800295c:	200002c8 	.word	0x200002c8

08002960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return uwTick;
 8002964:	4b03      	ldr	r3, [pc, #12]	@ (8002974 <HAL_GetTick+0x14>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	200002c8 	.word	0x200002c8

08002978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002980:	f7ff ffee 	bl	8002960 <HAL_GetTick>
 8002984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d005      	beq.n	800299e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002992:	4b0a      	ldr	r3, [pc, #40]	@ (80029bc <HAL_Delay+0x44>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800299e:	bf00      	nop
 80029a0:	f7ff ffde 	bl	8002960 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d8f7      	bhi.n	80029a0 <HAL_Delay+0x28>
  {
  }
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000008 	.word	0x20000008

080029c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	609a      	str	r2, [r3, #8]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	609a      	str	r2, [r3, #8]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3360      	adds	r3, #96	@ 0x60
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <LL_ADC_SetOffset+0x44>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	03fff000 	.word	0x03fff000

08002a70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3360      	adds	r3, #96	@ 0x60
 8002a7e:	461a      	mov	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3360      	adds	r3, #96	@ 0x60
 8002aac:	461a      	mov	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	615a      	str	r2, [r3, #20]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b087      	sub	sp, #28
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3330      	adds	r3, #48	@ 0x30
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	4413      	add	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	211f      	movs	r1, #31
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	401a      	ands	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	0e9b      	lsrs	r3, r3, #26
 8002b56:	f003 011f 	and.w	r1, r3, #31
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	431a      	orrs	r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b087      	sub	sp, #28
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3314      	adds	r3, #20
 8002b86:	461a      	mov	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	0e5b      	lsrs	r3, r3, #25
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	4413      	add	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	0d1b      	lsrs	r3, r3, #20
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2107      	movs	r1, #7
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	401a      	ands	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	0d1b      	lsrs	r3, r3, #20
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bc0:	bf00      	nop
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be4:	43db      	mvns	r3, r3
 8002be6:	401a      	ands	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f003 0318 	and.w	r3, r3, #24
 8002bee:	4908      	ldr	r1, [pc, #32]	@ (8002c10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bf0:	40d9      	lsrs	r1, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	400b      	ands	r3, r1
 8002bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	0007ffff 	.word	0x0007ffff

08002c14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002c24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6093      	str	r3, [r2, #8]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c4c:	d101      	bne.n	8002c52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c9c:	d101      	bne.n	8002ca2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cc4:	f043 0201 	orr.w	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ce8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cec:	f043 0202 	orr.w	r2, r3, #2
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <LL_ADC_IsEnabled+0x18>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <LL_ADC_IsEnabled+0x1a>
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d101      	bne.n	8002d3e <LL_ADC_IsDisableOngoing+0x18>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <LL_ADC_IsDisableOngoing+0x1a>
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d60:	f043 0204 	orr.w	r2, r3, #4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d88:	f043 0210 	orr.w	r2, r3, #16
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d101      	bne.n	8002db4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dd6:	f043 0220 	orr.w	r2, r3, #32
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d101      	bne.n	8002e02 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e129      	b.n	800307e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d109      	bne.n	8002e4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff fa8d 	bl	8002358 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fef1 	bl	8002c38 <LL_ADC_IsDeepPowerDownEnabled>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d004      	beq.n	8002e66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fed7 	bl	8002c14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff0c 	bl	8002c88 <LL_ADC_IsInternalRegulatorEnabled>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d115      	bne.n	8002ea2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fef0 	bl	8002c60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e80:	4b81      	ldr	r3, [pc, #516]	@ (8003088 <HAL_ADC_Init+0x278>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	4a81      	ldr	r2, [pc, #516]	@ (800308c <HAL_ADC_Init+0x27c>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	099b      	lsrs	r3, r3, #6
 8002e8e:	3301      	adds	r3, #1
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e94:	e002      	b.n	8002e9c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f9      	bne.n	8002e96 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff feee 	bl	8002c88 <LL_ADC_IsInternalRegulatorEnabled>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10d      	bne.n	8002ece <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb6:	f043 0210 	orr.w	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ff62 	bl	8002d9c <LL_ADC_REG_IsConversionOngoing>
 8002ed8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 80c2 	bne.w	800306c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f040 80be 	bne.w	800306c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002ef8:	f043 0202 	orr.w	r2, r3, #2
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fefb 	bl	8002d00 <LL_ADC_IsEnabled>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10b      	bne.n	8002f28 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f10:	485f      	ldr	r0, [pc, #380]	@ (8003090 <HAL_ADC_Init+0x280>)
 8002f12:	f7ff fef5 	bl	8002d00 <LL_ADC_IsEnabled>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4619      	mov	r1, r3
 8002f22:	485c      	ldr	r0, [pc, #368]	@ (8003094 <HAL_ADC_Init+0x284>)
 8002f24:	f7ff fd4c 	bl	80029c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	7e5b      	ldrb	r3, [r3, #25]
 8002f2c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f32:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002f38:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002f3e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f46:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d106      	bne.n	8002f64 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	045b      	lsls	r3, r3, #17
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d009      	beq.n	8002f80 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f78:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	4b44      	ldr	r3, [pc, #272]	@ (8003098 <HAL_ADC_Init+0x288>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	69b9      	ldr	r1, [r7, #24]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff26 	bl	8002dea <LL_ADC_INJ_IsConversionOngoing>
 8002f9e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d140      	bne.n	8003028 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d13d      	bne.n	8003028 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7e1b      	ldrb	r3, [r3, #24]
 8002fb4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fb6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fbe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002fce:	f023 0306 	bic.w	r3, r3, #6
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	69b9      	ldr	r1, [r7, #24]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d118      	bne.n	8003018 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ff0:	f023 0304 	bic.w	r3, r3, #4
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ffc:	4311      	orrs	r1, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003002:	4311      	orrs	r1, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003008:	430a      	orrs	r2, r1
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	e007      	b.n	8003028 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d10c      	bne.n	800304a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	f023 010f 	bic.w	r1, r3, #15
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	1e5a      	subs	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	631a      	str	r2, [r3, #48]	@ 0x30
 8003048:	e007      	b.n	800305a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 020f 	bic.w	r2, r2, #15
 8003058:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305e:	f023 0303 	bic.w	r3, r3, #3
 8003062:	f043 0201 	orr.w	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	659a      	str	r2, [r3, #88]	@ 0x58
 800306a:	e007      	b.n	800307c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003070:	f043 0210 	orr.w	r2, r3, #16
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800307c:	7ffb      	ldrb	r3, [r7, #31]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000000 	.word	0x20000000
 800308c:	053e2d63 	.word	0x053e2d63
 8003090:	50040000 	.word	0x50040000
 8003094:	50040300 	.word	0x50040300
 8003098:	fff0c007 	.word	0xfff0c007

0800309c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fe77 	bl	8002d9c <LL_ADC_REG_IsConversionOngoing>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d14f      	bne.n	8003154 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_ADC_Start+0x26>
 80030be:	2302      	movs	r3, #2
 80030c0:	e04b      	b.n	800315a <HAL_ADC_Start+0xbe>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fdd0 	bl	8003c70 <ADC_Enable>
 80030d0:	4603      	mov	r3, r0
 80030d2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d137      	bne.n	800314a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030fa:	d106      	bne.n	800310a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003100:	f023 0206 	bic.w	r2, r3, #6
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003108:	e002      	b.n	8003110 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	221c      	movs	r2, #28
 8003116:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003132:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003136:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fe02 	bl	8002d4c <LL_ADC_REG_StartConversion>
 8003148:	e006      	b.n	8003158 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003152:	e001      	b.n	8003158 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003154:	2302      	movs	r3, #2
 8003156:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003158:	7bfb      	ldrb	r3, [r7, #15]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_ADC_Stop+0x16>
 8003174:	2302      	movs	r3, #2
 8003176:	e023      	b.n	80031c0 <HAL_ADC_Stop+0x5e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003180:	2103      	movs	r1, #3
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fcb8 	bl	8003af8 <ADC_ConversionStop>
 8003188:	4603      	mov	r3, r0
 800318a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d111      	bne.n	80031b6 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fdf2 	bl	8003d7c <ADC_Disable>
 8003198:	4603      	mov	r3, r0
 800319a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	f043 0201 	orr.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80031be:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d102      	bne.n	80031e0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80031da:	2308      	movs	r3, #8
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	e010      	b.n	8003202 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f2:	f043 0220 	orr.w	r2, r3, #32
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e06f      	b.n	80032de <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80031fe:	2304      	movs	r3, #4
 8003200:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003202:	f7ff fbad 	bl	8002960 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003208:	e021      	b.n	800324e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d01d      	beq.n	800324e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003212:	f7ff fba5 	bl	8002960 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <HAL_ADC_PollForConversion+0x60>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d112      	bne.n	800324e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10b      	bne.n	800324e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323a:	f043 0204 	orr.w	r2, r3, #4
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e047      	b.n	80032de <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0d6      	beq.n	800320a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fc43 	bl	8002af8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01c      	beq.n	80032b2 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	7e5b      	ldrb	r3, [r3, #25]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d118      	bne.n	80032b2 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b08      	cmp	r3, #8
 800328c:	d111      	bne.n	80032b2 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003292:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d105      	bne.n	80032b2 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032aa:	f043 0201 	orr.w	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d104      	bne.n	80032ca <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2208      	movs	r2, #8
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e008      	b.n	80032dc <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	220c      	movs	r2, #12
 80032da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b0b6      	sub	sp, #216	@ 0xd8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003310:	2300      	movs	r3, #0
 8003312:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x22>
 800331e:	2302      	movs	r3, #2
 8003320:	e3d5      	b.n	8003ace <HAL_ADC_ConfigChannel+0x7ce>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fd34 	bl	8002d9c <LL_ADC_REG_IsConversionOngoing>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 83ba 	bne.w	8003ab0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b05      	cmp	r3, #5
 800334a:	d824      	bhi.n	8003396 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	3b02      	subs	r3, #2
 8003352:	2b03      	cmp	r3, #3
 8003354:	d81b      	bhi.n	800338e <HAL_ADC_ConfigChannel+0x8e>
 8003356:	a201      	add	r2, pc, #4	@ (adr r2, 800335c <HAL_ADC_ConfigChannel+0x5c>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	0800336d 	.word	0x0800336d
 8003360:	08003375 	.word	0x08003375
 8003364:	0800337d 	.word	0x0800337d
 8003368:	08003385 	.word	0x08003385
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800336c:	230c      	movs	r3, #12
 800336e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003372:	e010      	b.n	8003396 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003374:	2312      	movs	r3, #18
 8003376:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800337a:	e00c      	b.n	8003396 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800337c:	2318      	movs	r3, #24
 800337e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003382:	e008      	b.n	8003396 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003384:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800338c:	e003      	b.n	8003396 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800338e:	2306      	movs	r3, #6
 8003390:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003394:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80033a4:	f7ff fbbb 	bl	8002b1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fcf5 	bl	8002d9c <LL_ADC_REG_IsConversionOngoing>
 80033b2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fd15 	bl	8002dea <LL_ADC_INJ_IsConversionOngoing>
 80033c0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f040 81bf 	bne.w	800374c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f040 81ba 	bne.w	800374c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033e0:	d10f      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	4619      	mov	r1, r3
 80033ee:	f7ff fbc2 	bl	8002b76 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fb69 	bl	8002ad2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003400:	e00e      	b.n	8003420 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6819      	ldr	r1, [r3, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	461a      	mov	r2, r3
 8003410:	f7ff fbb1 	bl	8002b76 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fb59 	bl	8002ad2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	08db      	lsrs	r3, r3, #3
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b04      	cmp	r3, #4
 8003440:	d00a      	beq.n	8003458 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6919      	ldr	r1, [r3, #16]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003452:	f7ff fae9 	bl	8002a28 <LL_ADC_SetOffset>
 8003456:	e179      	b.n	800374c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2100      	movs	r1, #0
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fb06 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003464:	4603      	mov	r3, r0
 8003466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x184>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2100      	movs	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fafb 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 800347a:	4603      	mov	r3, r0
 800347c:	0e9b      	lsrs	r3, r3, #26
 800347e:	f003 021f 	and.w	r2, r3, #31
 8003482:	e01e      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x1c2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2100      	movs	r1, #0
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff faf0 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003490:	4603      	mov	r3, r0
 8003492:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80034b2:	2320      	movs	r3, #32
 80034b4:	e004      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80034b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d105      	bne.n	80034da <HAL_ADC_ConfigChannel+0x1da>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	0e9b      	lsrs	r3, r3, #26
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	e018      	b.n	800350c <HAL_ADC_ConfigChannel+0x20c>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80034ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80034f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80034f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80034fe:	2320      	movs	r3, #32
 8003500:	e004      	b.n	800350c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003502:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800350c:	429a      	cmp	r2, r3
 800350e:	d106      	bne.n	800351e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2200      	movs	r2, #0
 8003516:	2100      	movs	r1, #0
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fabf 	bl	8002a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2101      	movs	r1, #1
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff faa3 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 800352a:	4603      	mov	r3, r0
 800352c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10a      	bne.n	800354a <HAL_ADC_ConfigChannel+0x24a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2101      	movs	r1, #1
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fa98 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003540:	4603      	mov	r3, r0
 8003542:	0e9b      	lsrs	r3, r3, #26
 8003544:	f003 021f 	and.w	r2, r3, #31
 8003548:	e01e      	b.n	8003588 <HAL_ADC_ConfigChannel+0x288>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2101      	movs	r1, #1
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fa8d 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003556:	4603      	mov	r3, r0
 8003558:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003568:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800356c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003570:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003578:	2320      	movs	r3, #32
 800357a:	e004      	b.n	8003586 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800357c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003590:	2b00      	cmp	r3, #0
 8003592:	d105      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x2a0>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	e018      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x2d2>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80035b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80035bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80035c4:	2320      	movs	r3, #32
 80035c6:	e004      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80035c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035cc:	fab3 f383 	clz	r3, r3
 80035d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d106      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2200      	movs	r2, #0
 80035dc:	2101      	movs	r1, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fa5c 	bl	8002a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2102      	movs	r1, #2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fa40 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10a      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x310>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2102      	movs	r1, #2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fa35 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003606:	4603      	mov	r3, r0
 8003608:	0e9b      	lsrs	r3, r3, #26
 800360a:	f003 021f 	and.w	r2, r3, #31
 800360e:	e01e      	b.n	800364e <HAL_ADC_ConfigChannel+0x34e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2102      	movs	r1, #2
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fa2a 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 800361c:	4603      	mov	r3, r0
 800361e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800362e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003632:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800363e:	2320      	movs	r3, #32
 8003640:	e004      	b.n	800364c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003642:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x366>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	e014      	b.n	8003690 <HAL_ADC_ConfigChannel+0x390>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003676:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800367a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003682:	2320      	movs	r3, #32
 8003684:	e004      	b.n	8003690 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003686:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003690:	429a      	cmp	r2, r3
 8003692:	d106      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2200      	movs	r2, #0
 800369a:	2102      	movs	r1, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff f9fd 	bl	8002a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2103      	movs	r1, #3
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f9e1 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x3ce>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2103      	movs	r1, #3
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff f9d6 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80036c4:	4603      	mov	r3, r0
 80036c6:	0e9b      	lsrs	r3, r3, #26
 80036c8:	f003 021f 	and.w	r2, r3, #31
 80036cc:	e017      	b.n	80036fe <HAL_ADC_ConfigChannel+0x3fe>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2103      	movs	r1, #3
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff f9cb 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80036da:	4603      	mov	r3, r0
 80036dc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036e0:	fa93 f3a3 	rbit	r3, r3
 80036e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80036e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036e8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80036ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80036f0:	2320      	movs	r3, #32
 80036f2:	e003      	b.n	80036fc <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80036f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003706:	2b00      	cmp	r3, #0
 8003708:	d105      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x416>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	0e9b      	lsrs	r3, r3, #26
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	e011      	b.n	800373a <HAL_ADC_ConfigChannel+0x43a>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003724:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003726:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003728:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800372e:	2320      	movs	r3, #32
 8003730:	e003      	b.n	800373a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003732:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003734:	fab3 f383 	clz	r3, r3
 8003738:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800373a:	429a      	cmp	r2, r3
 800373c:	d106      	bne.n	800374c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2200      	movs	r2, #0
 8003744:	2103      	movs	r1, #3
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff f9a8 	bl	8002a9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fad5 	bl	8002d00 <LL_ADC_IsEnabled>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	f040 813f 	bne.w	80039dc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6819      	ldr	r1, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	461a      	mov	r2, r3
 800376c:	f7ff fa2e 	bl	8002bcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a8e      	ldr	r2, [pc, #568]	@ (80039b0 <HAL_ADC_ConfigChannel+0x6b0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	f040 8130 	bne.w	80039dc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10b      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x4a4>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	0e9b      	lsrs	r3, r3, #26
 8003792:	3301      	adds	r3, #1
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	2b09      	cmp	r3, #9
 800379a:	bf94      	ite	ls
 800379c:	2301      	movls	r3, #1
 800379e:	2300      	movhi	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	e019      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x4d8>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80037b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80037b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80037bc:	2320      	movs	r3, #32
 80037be:	e003      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80037c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	3301      	adds	r3, #1
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	2b09      	cmp	r3, #9
 80037d0:	bf94      	ite	ls
 80037d2:	2301      	movls	r3, #1
 80037d4:	2300      	movhi	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d079      	beq.n	80038d0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d107      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x4f8>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	0e9b      	lsrs	r3, r3, #26
 80037ee:	3301      	adds	r3, #1
 80037f0:	069b      	lsls	r3, r3, #26
 80037f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037f6:	e015      	b.n	8003824 <HAL_ADC_ConfigChannel+0x524>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003800:	fa93 f3a3 	rbit	r3, r3
 8003804:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003808:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800380a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003810:	2320      	movs	r3, #32
 8003812:	e003      	b.n	800381c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	3301      	adds	r3, #1
 800381e:	069b      	lsls	r3, r3, #26
 8003820:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382c:	2b00      	cmp	r3, #0
 800382e:	d109      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x544>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	0e9b      	lsrs	r3, r3, #26
 8003836:	3301      	adds	r3, #1
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	2101      	movs	r1, #1
 800383e:	fa01 f303 	lsl.w	r3, r1, r3
 8003842:	e017      	b.n	8003874 <HAL_ADC_ConfigChannel+0x574>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003854:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003856:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800385c:	2320      	movs	r3, #32
 800385e:	e003      	b.n	8003868 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	3301      	adds	r3, #1
 800386a:	f003 031f 	and.w	r3, r3, #31
 800386e:	2101      	movs	r1, #1
 8003870:	fa01 f303 	lsl.w	r3, r1, r3
 8003874:	ea42 0103 	orr.w	r1, r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <HAL_ADC_ConfigChannel+0x59a>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	0e9b      	lsrs	r3, r3, #26
 800388a:	3301      	adds	r3, #1
 800388c:	f003 021f 	and.w	r2, r3, #31
 8003890:	4613      	mov	r3, r2
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	4413      	add	r3, r2
 8003896:	051b      	lsls	r3, r3, #20
 8003898:	e018      	b.n	80038cc <HAL_ADC_ConfigChannel+0x5cc>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80038a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80038ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80038b2:	2320      	movs	r3, #32
 80038b4:	e003      	b.n	80038be <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80038b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b8:	fab3 f383 	clz	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	3301      	adds	r3, #1
 80038c0:	f003 021f 	and.w	r2, r3, #31
 80038c4:	4613      	mov	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038cc:	430b      	orrs	r3, r1
 80038ce:	e080      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d107      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x5ec>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	0e9b      	lsrs	r3, r3, #26
 80038e2:	3301      	adds	r3, #1
 80038e4:	069b      	lsls	r3, r3, #26
 80038e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038ea:	e015      	b.n	8003918 <HAL_ADC_ConfigChannel+0x618>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80038fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003904:	2320      	movs	r3, #32
 8003906:	e003      	b.n	8003910 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	3301      	adds	r3, #1
 8003912:	069b      	lsls	r3, r3, #26
 8003914:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x638>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	0e9b      	lsrs	r3, r3, #26
 800392a:	3301      	adds	r3, #1
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	2101      	movs	r1, #1
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	e017      	b.n	8003968 <HAL_ADC_ConfigChannel+0x668>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	fa93 f3a3 	rbit	r3, r3
 8003944:	61bb      	str	r3, [r7, #24]
  return result;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003950:	2320      	movs	r3, #32
 8003952:	e003      	b.n	800395c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	fab3 f383 	clz	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	3301      	adds	r3, #1
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	2101      	movs	r1, #1
 8003964:	fa01 f303 	lsl.w	r3, r1, r3
 8003968:	ea42 0103 	orr.w	r1, r2, r3
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10d      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x694>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	0e9b      	lsrs	r3, r3, #26
 800397e:	3301      	adds	r3, #1
 8003980:	f003 021f 	and.w	r2, r3, #31
 8003984:	4613      	mov	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4413      	add	r3, r2
 800398a:	3b1e      	subs	r3, #30
 800398c:	051b      	lsls	r3, r3, #20
 800398e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003992:	e01d      	b.n	80039d0 <HAL_ADC_ConfigChannel+0x6d0>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	fa93 f3a3 	rbit	r3, r3
 80039a0:	60fb      	str	r3, [r7, #12]
  return result;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d103      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80039ac:	2320      	movs	r3, #32
 80039ae:	e005      	b.n	80039bc <HAL_ADC_ConfigChannel+0x6bc>
 80039b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	3301      	adds	r3, #1
 80039be:	f003 021f 	and.w	r2, r3, #31
 80039c2:	4613      	mov	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	4413      	add	r3, r2
 80039c8:	3b1e      	subs	r3, #30
 80039ca:	051b      	lsls	r3, r3, #20
 80039cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039d6:	4619      	mov	r1, r3
 80039d8:	f7ff f8cd 	bl	8002b76 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x7d8>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d06c      	beq.n	8003ac2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039e8:	483c      	ldr	r0, [pc, #240]	@ (8003adc <HAL_ADC_ConfigChannel+0x7dc>)
 80039ea:	f7ff f80f 	bl	8002a0c <LL_ADC_GetCommonPathInternalCh>
 80039ee:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a3a      	ldr	r2, [pc, #232]	@ (8003ae0 <HAL_ADC_ConfigChannel+0x7e0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d127      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d121      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a35      	ldr	r2, [pc, #212]	@ (8003ae4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d157      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	482f      	ldr	r0, [pc, #188]	@ (8003adc <HAL_ADC_ConfigChannel+0x7dc>)
 8003a1e:	f7fe ffe2 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a22:	4b31      	ldr	r3, [pc, #196]	@ (8003ae8 <HAL_ADC_ConfigChannel+0x7e8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	099b      	lsrs	r3, r3, #6
 8003a28:	4a30      	ldr	r2, [pc, #192]	@ (8003aec <HAL_ADC_ConfigChannel+0x7ec>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	4613      	mov	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a3c:	e002      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f9      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a4a:	e03a      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a27      	ldr	r2, [pc, #156]	@ (8003af0 <HAL_ADC_ConfigChannel+0x7f0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d113      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10d      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d12a      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a74:	4619      	mov	r1, r3
 8003a76:	4819      	ldr	r0, [pc, #100]	@ (8003adc <HAL_ADC_ConfigChannel+0x7dc>)
 8003a78:	f7fe ffb5 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a7c:	e021      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1c      	ldr	r2, [pc, #112]	@ (8003af4 <HAL_ADC_ConfigChannel+0x7f4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d11c      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d116      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a12      	ldr	r2, [pc, #72]	@ (8003ae4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d111      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003aa2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	480c      	ldr	r0, [pc, #48]	@ (8003adc <HAL_ADC_ConfigChannel+0x7dc>)
 8003aaa:	f7fe ff9c 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
 8003aae:	e008      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003aca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	37d8      	adds	r7, #216	@ 0xd8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	80080000 	.word	0x80080000
 8003adc:	50040300 	.word	0x50040300
 8003ae0:	c7520000 	.word	0xc7520000
 8003ae4:	50040000 	.word	0x50040000
 8003ae8:	20000000 	.word	0x20000000
 8003aec:	053e2d63 	.word	0x053e2d63
 8003af0:	cb840000 	.word	0xcb840000
 8003af4:	80000001 	.word	0x80000001

08003af8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff f944 	bl	8002d9c <LL_ADC_REG_IsConversionOngoing>
 8003b14:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff f965 	bl	8002dea <LL_ADC_INJ_IsConversionOngoing>
 8003b20:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d103      	bne.n	8003b30 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8098 	beq.w	8003c60 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d02a      	beq.n	8003b94 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	7e5b      	ldrb	r3, [r3, #25]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d126      	bne.n	8003b94 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	7e1b      	ldrb	r3, [r3, #24]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d122      	bne.n	8003b94 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003b52:	e014      	b.n	8003b7e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	4a45      	ldr	r2, [pc, #276]	@ (8003c6c <ADC_ConversionStop+0x174>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d90d      	bls.n	8003b78 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b60:	f043 0210 	orr.w	r2, r3, #16
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6c:	f043 0201 	orr.w	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e074      	b.n	8003c62 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b88:	2b40      	cmp	r3, #64	@ 0x40
 8003b8a:	d1e3      	bne.n	8003b54 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2240      	movs	r2, #64	@ 0x40
 8003b92:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d014      	beq.n	8003bc4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff f8fc 	bl	8002d9c <LL_ADC_REG_IsConversionOngoing>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff f8b9 	bl	8002d26 <LL_ADC_IsDisableOngoing>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d104      	bne.n	8003bc4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff f8d8 	bl	8002d74 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d014      	beq.n	8003bf4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff f90b 	bl	8002dea <LL_ADC_INJ_IsConversionOngoing>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00c      	beq.n	8003bf4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff f8a1 	bl	8002d26 <LL_ADC_IsDisableOngoing>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d104      	bne.n	8003bf4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff f8e7 	bl	8002dc2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d005      	beq.n	8003c06 <ADC_ConversionStop+0x10e>
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d105      	bne.n	8003c0c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c00:	230c      	movs	r3, #12
 8003c02:	617b      	str	r3, [r7, #20]
        break;
 8003c04:	e005      	b.n	8003c12 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c06:	2308      	movs	r3, #8
 8003c08:	617b      	str	r3, [r7, #20]
        break;
 8003c0a:	e002      	b.n	8003c12 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	617b      	str	r3, [r7, #20]
        break;
 8003c10:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c12:	f7fe fea5 	bl	8002960 <HAL_GetTick>
 8003c16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c18:	e01b      	b.n	8003c52 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c1a:	f7fe fea1 	bl	8002960 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b05      	cmp	r3, #5
 8003c26:	d914      	bls.n	8003c52 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00d      	beq.n	8003c52 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3a:	f043 0210 	orr.w	r2, r3, #16
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c46:	f043 0201 	orr.w	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e007      	b.n	8003c62 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1dc      	bne.n	8003c1a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3720      	adds	r7, #32
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	a33fffff 	.word	0xa33fffff

08003c70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff f83d 	bl	8002d00 <LL_ADC_IsEnabled>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d169      	bne.n	8003d60 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	4b36      	ldr	r3, [pc, #216]	@ (8003d6c <ADC_Enable+0xfc>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00d      	beq.n	8003cb6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9e:	f043 0210 	orr.w	r2, r3, #16
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003caa:	f043 0201 	orr.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e055      	b.n	8003d62 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fff8 	bl	8002cb0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003cc0:	482b      	ldr	r0, [pc, #172]	@ (8003d70 <ADC_Enable+0x100>)
 8003cc2:	f7fe fea3 	bl	8002a0c <LL_ADC_GetCommonPathInternalCh>
 8003cc6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003cc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d013      	beq.n	8003cf8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cd0:	4b28      	ldr	r3, [pc, #160]	@ (8003d74 <ADC_Enable+0x104>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	099b      	lsrs	r3, r3, #6
 8003cd6:	4a28      	ldr	r2, [pc, #160]	@ (8003d78 <ADC_Enable+0x108>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	099b      	lsrs	r3, r3, #6
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003cea:	e002      	b.n	8003cf2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f9      	bne.n	8003cec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003cf8:	f7fe fe32 	bl	8002960 <HAL_GetTick>
 8003cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cfe:	e028      	b.n	8003d52 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe fffb 	bl	8002d00 <LL_ADC_IsEnabled>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d104      	bne.n	8003d1a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe ffcb 	bl	8002cb0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d1a:	f7fe fe21 	bl	8002960 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d914      	bls.n	8003d52 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d00d      	beq.n	8003d52 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3a:	f043 0210 	orr.w	r2, r3, #16
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d46:	f043 0201 	orr.w	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e007      	b.n	8003d62 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d1cf      	bne.n	8003d00 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	8000003f 	.word	0x8000003f
 8003d70:	50040300 	.word	0x50040300
 8003d74:	20000000 	.word	0x20000000
 8003d78:	053e2d63 	.word	0x053e2d63

08003d7c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe ffcc 	bl	8002d26 <LL_ADC_IsDisableOngoing>
 8003d8e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fe ffb3 	bl	8002d00 <LL_ADC_IsEnabled>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d047      	beq.n	8003e30 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d144      	bne.n	8003e30 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030d 	and.w	r3, r3, #13
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d10c      	bne.n	8003dce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe ff8d 	bl	8002cd8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dc6:	f7fe fdcb 	bl	8002960 <HAL_GetTick>
 8003dca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dcc:	e029      	b.n	8003e22 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd2:	f043 0210 	orr.w	r2, r3, #16
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dde:	f043 0201 	orr.w	r2, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e023      	b.n	8003e32 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dea:	f7fe fdb9 	bl	8002960 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d914      	bls.n	8003e22 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00d      	beq.n	8003e22 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0a:	f043 0210 	orr.w	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e16:	f043 0201 	orr.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e007      	b.n	8003e32 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1dc      	bne.n	8003dea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0ed      	b.n	8004028 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7fe fae5 	bl	8002428 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0201 	orr.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e6e:	f7fe fd77 	bl	8002960 <HAL_GetTick>
 8003e72:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e74:	e012      	b.n	8003e9c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e76:	f7fe fd73 	bl	8002960 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b0a      	cmp	r3, #10
 8003e82:	d90b      	bls.n	8003e9c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2205      	movs	r2, #5
 8003e94:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0c5      	b.n	8004028 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0e5      	beq.n	8003e76 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0202 	bic.w	r2, r2, #2
 8003eb8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eba:	f7fe fd51 	bl	8002960 <HAL_GetTick>
 8003ebe:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ec0:	e012      	b.n	8003ee8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ec2:	f7fe fd4d 	bl	8002960 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b0a      	cmp	r3, #10
 8003ece:	d90b      	bls.n	8003ee8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2205      	movs	r2, #5
 8003ee0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e09f      	b.n	8004028 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e5      	bne.n	8003ec2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	7e1b      	ldrb	r3, [r3, #24]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d108      	bne.n	8003f10 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e007      	b.n	8003f20 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	7e5b      	ldrb	r3, [r3, #25]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d108      	bne.n	8003f3a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e007      	b.n	8003f4a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	7e9b      	ldrb	r3, [r3, #26]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d108      	bne.n	8003f64 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0220 	orr.w	r2, r2, #32
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	e007      	b.n	8003f74 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0220 	bic.w	r2, r2, #32
 8003f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	7edb      	ldrb	r3, [r3, #27]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d108      	bne.n	8003f8e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0210 	bic.w	r2, r2, #16
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e007      	b.n	8003f9e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0210 	orr.w	r2, r2, #16
 8003f9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	7f1b      	ldrb	r3, [r3, #28]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d108      	bne.n	8003fb8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0208 	orr.w	r2, r2, #8
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e007      	b.n	8003fc8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0208 	bic.w	r2, r2, #8
 8003fc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	7f5b      	ldrb	r3, [r3, #29]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d108      	bne.n	8003fe2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0204 	orr.w	r2, r2, #4
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	e007      	b.n	8003ff2 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0204 	bic.w	r2, r2, #4
 8003ff0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	ea42 0103 	orr.w	r1, r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	1e5a      	subs	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004046:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004048:	7cfb      	ldrb	r3, [r7, #19]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d003      	beq.n	8004056 <HAL_CAN_ConfigFilter+0x26>
 800404e:	7cfb      	ldrb	r3, [r7, #19]
 8004050:	2b02      	cmp	r3, #2
 8004052:	f040 80aa 	bne.w	80041aa <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800405c:	f043 0201 	orr.w	r2, r3, #1
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	2201      	movs	r2, #1
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	43db      	mvns	r3, r3
 8004080:	401a      	ands	r2, r3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d123      	bne.n	80040d8 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	43db      	mvns	r3, r3
 800409a:	401a      	ands	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	3248      	adds	r2, #72	@ 0x48
 80040b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	3348      	adds	r3, #72	@ 0x48
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	440b      	add	r3, r1
 80040d6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d122      	bne.n	8004126 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004100:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	3248      	adds	r2, #72	@ 0x48
 8004106:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800411a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800411c:	6979      	ldr	r1, [r7, #20]
 800411e:	3348      	adds	r3, #72	@ 0x48
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	440b      	add	r3, r1
 8004124:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	43db      	mvns	r3, r3
 8004138:	401a      	ands	r2, r3
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004140:	e007      	b.n	8004152 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	431a      	orrs	r2, r3
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	43db      	mvns	r3, r3
 8004164:	401a      	ands	r2, r3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800416c:	e007      	b.n	800417e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	431a      	orrs	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d107      	bne.n	8004196 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	431a      	orrs	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800419c:	f023 0201 	bic.w	r2, r3, #1
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	e006      	b.n	80041b8 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
  }
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d12e      	bne.n	8004236 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0201 	bic.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041f0:	f7fe fbb6 	bl	8002960 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041f6:	e012      	b.n	800421e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041f8:	f7fe fbb2 	bl	8002960 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b0a      	cmp	r3, #10
 8004204:	d90b      	bls.n	800421e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2205      	movs	r2, #5
 8004216:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e012      	b.n	8004244 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e5      	bne.n	80041f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	e006      	b.n	8004244 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
  }
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800424c:	b480      	push	{r7}
 800424e:	b089      	sub	sp, #36	@ 0x24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004260:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800426a:	7ffb      	ldrb	r3, [r7, #31]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d003      	beq.n	8004278 <HAL_CAN_AddTxMessage+0x2c>
 8004270:	7ffb      	ldrb	r3, [r7, #31]
 8004272:	2b02      	cmp	r3, #2
 8004274:	f040 80ad 	bne.w	80043d2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8095 	beq.w	80043c2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	0e1b      	lsrs	r3, r3, #24
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80042a2:	2201      	movs	r2, #1
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	409a      	lsls	r2, r3
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10d      	bne.n	80042d0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042be:	68f9      	ldr	r1, [r7, #12]
 80042c0:	6809      	ldr	r1, [r1, #0]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	3318      	adds	r3, #24
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	440b      	add	r3, r1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e00f      	b.n	80042f0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042da:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042e0:	68f9      	ldr	r1, [r7, #12]
 80042e2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80042e4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	3318      	adds	r3, #24
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	440b      	add	r3, r1
 80042ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6819      	ldr	r1, [r3, #0]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	3318      	adds	r3, #24
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	440b      	add	r3, r1
 8004300:	3304      	adds	r3, #4
 8004302:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	7d1b      	ldrb	r3, [r3, #20]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d111      	bne.n	8004330 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	3318      	adds	r3, #24
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	4413      	add	r3, r2
 8004318:	3304      	adds	r3, #4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	6811      	ldr	r1, [r2, #0]
 8004320:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	3318      	adds	r3, #24
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	440b      	add	r3, r1
 800432c:	3304      	adds	r3, #4
 800432e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3307      	adds	r3, #7
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	061a      	lsls	r2, r3, #24
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3306      	adds	r3, #6
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3305      	adds	r3, #5
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	4313      	orrs	r3, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	3204      	adds	r2, #4
 8004350:	7812      	ldrb	r2, [r2, #0]
 8004352:	4610      	mov	r0, r2
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	6811      	ldr	r1, [r2, #0]
 8004358:	ea43 0200 	orr.w	r2, r3, r0
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	440b      	add	r3, r1
 8004362:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004366:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3303      	adds	r3, #3
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	061a      	lsls	r2, r3, #24
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3302      	adds	r3, #2
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3301      	adds	r3, #1
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	4313      	orrs	r3, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	7812      	ldrb	r2, [r2, #0]
 8004388:	4610      	mov	r0, r2
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	6811      	ldr	r1, [r2, #0]
 800438e:	ea43 0200 	orr.w	r2, r3, r0
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	440b      	add	r3, r1
 8004398:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800439c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	3318      	adds	r3, #24
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	4413      	add	r3, r2
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	6811      	ldr	r1, [r2, #0]
 80043b0:	f043 0201 	orr.w	r2, r3, #1
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	3318      	adds	r3, #24
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	440b      	add	r3, r1
 80043bc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e00e      	b.n	80043e0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e006      	b.n	80043e0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
  }
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3724      	adds	r7, #36	@ 0x24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004400:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004402:	7dfb      	ldrb	r3, [r7, #23]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d003      	beq.n	8004410 <HAL_CAN_GetRxMessage+0x24>
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	2b02      	cmp	r3, #2
 800440c:	f040 8103 	bne.w	8004616 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10e      	bne.n	8004434 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d116      	bne.n	8004452 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0f7      	b.n	8004624 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d107      	bne.n	8004452 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e0e8      	b.n	8004624 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	331b      	adds	r3, #27
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	4413      	add	r3, r2
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0204 	and.w	r2, r3, #4
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10c      	bne.n	800448a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	331b      	adds	r3, #27
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	4413      	add	r3, r2
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	0d5b      	lsrs	r3, r3, #21
 8004480:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e00b      	b.n	80044a2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	331b      	adds	r3, #27
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	4413      	add	r3, r2
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	08db      	lsrs	r3, r3, #3
 800449a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	331b      	adds	r3, #27
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	4413      	add	r3, r2
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0202 	and.w	r2, r3, #2
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	331b      	adds	r3, #27
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	4413      	add	r3, r2
 80044c4:	3304      	adds	r3, #4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2208      	movs	r2, #8
 80044d4:	611a      	str	r2, [r3, #16]
 80044d6:	e00b      	b.n	80044f0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	331b      	adds	r3, #27
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	4413      	add	r3, r2
 80044e4:	3304      	adds	r3, #4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 020f 	and.w	r2, r3, #15
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	331b      	adds	r3, #27
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	4413      	add	r3, r2
 80044fc:	3304      	adds	r3, #4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	0a1b      	lsrs	r3, r3, #8
 8004502:	b2da      	uxtb	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	331b      	adds	r3, #27
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	4413      	add	r3, r2
 8004514:	3304      	adds	r3, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	b29a      	uxth	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	4413      	add	r3, r2
 800452a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	b2da      	uxtb	r2, r3
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	4413      	add	r3, r2
 8004540:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	0a1a      	lsrs	r2, r3, #8
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	3301      	adds	r3, #1
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	4413      	add	r3, r2
 800455a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	0c1a      	lsrs	r2, r3, #16
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	3302      	adds	r3, #2
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	4413      	add	r3, r2
 8004574:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	0e1a      	lsrs	r2, r3, #24
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	3303      	adds	r3, #3
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	4413      	add	r3, r2
 800458e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	3304      	adds	r3, #4
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	0a1a      	lsrs	r2, r3, #8
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	3305      	adds	r3, #5
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	4413      	add	r3, r2
 80045c0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	0c1a      	lsrs	r2, r3, #16
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	3306      	adds	r3, #6
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	4413      	add	r3, r2
 80045da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	0e1a      	lsrs	r2, r3, #24
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	3307      	adds	r3, #7
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d108      	bne.n	8004602 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0220 	orr.w	r2, r2, #32
 80045fe:	60da      	str	r2, [r3, #12]
 8004600:	e007      	b.n	8004612 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0220 	orr.w	r2, r2, #32
 8004610:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	e006      	b.n	8004624 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
  }
}
 8004624:	4618      	mov	r0, r3
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004640:	4b0c      	ldr	r3, [pc, #48]	@ (8004674 <__NVIC_SetPriorityGrouping+0x44>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800464c:	4013      	ands	r3, r2
 800464e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800465c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004662:	4a04      	ldr	r2, [pc, #16]	@ (8004674 <__NVIC_SetPriorityGrouping+0x44>)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	60d3      	str	r3, [r2, #12]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800467c:	4b04      	ldr	r3, [pc, #16]	@ (8004690 <__NVIC_GetPriorityGrouping+0x18>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	0a1b      	lsrs	r3, r3, #8
 8004682:	f003 0307 	and.w	r3, r3, #7
}
 8004686:	4618      	mov	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	db0a      	blt.n	80046be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	490c      	ldr	r1, [pc, #48]	@ (80046e0 <__NVIC_SetPriority+0x4c>)
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	0112      	lsls	r2, r2, #4
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	440b      	add	r3, r1
 80046b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046bc:	e00a      	b.n	80046d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4908      	ldr	r1, [pc, #32]	@ (80046e4 <__NVIC_SetPriority+0x50>)
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	3b04      	subs	r3, #4
 80046cc:	0112      	lsls	r2, r2, #4
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	440b      	add	r3, r1
 80046d2:	761a      	strb	r2, [r3, #24]
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	e000e100 	.word	0xe000e100
 80046e4:	e000ed00 	.word	0xe000ed00

080046e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b089      	sub	sp, #36	@ 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f1c3 0307 	rsb	r3, r3, #7
 8004702:	2b04      	cmp	r3, #4
 8004704:	bf28      	it	cs
 8004706:	2304      	movcs	r3, #4
 8004708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3304      	adds	r3, #4
 800470e:	2b06      	cmp	r3, #6
 8004710:	d902      	bls.n	8004718 <NVIC_EncodePriority+0x30>
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	3b03      	subs	r3, #3
 8004716:	e000      	b.n	800471a <NVIC_EncodePriority+0x32>
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800471c:	f04f 32ff 	mov.w	r2, #4294967295
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43da      	mvns	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	401a      	ands	r2, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004730:	f04f 31ff 	mov.w	r1, #4294967295
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	fa01 f303 	lsl.w	r3, r1, r3
 800473a:	43d9      	mvns	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004740:	4313      	orrs	r3, r2
         );
}
 8004742:	4618      	mov	r0, r3
 8004744:	3724      	adds	r7, #36	@ 0x24
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3b01      	subs	r3, #1
 800475c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004760:	d301      	bcc.n	8004766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004762:	2301      	movs	r3, #1
 8004764:	e00f      	b.n	8004786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004766:	4a0a      	ldr	r2, [pc, #40]	@ (8004790 <SysTick_Config+0x40>)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3b01      	subs	r3, #1
 800476c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800476e:	210f      	movs	r1, #15
 8004770:	f04f 30ff 	mov.w	r0, #4294967295
 8004774:	f7ff ff8e 	bl	8004694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004778:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <SysTick_Config+0x40>)
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800477e:	4b04      	ldr	r3, [pc, #16]	@ (8004790 <SysTick_Config+0x40>)
 8004780:	2207      	movs	r2, #7
 8004782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	e000e010 	.word	0xe000e010

08004794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff ff47 	bl	8004630 <__NVIC_SetPriorityGrouping>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b086      	sub	sp, #24
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	4603      	mov	r3, r0
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047bc:	f7ff ff5c 	bl	8004678 <__NVIC_GetPriorityGrouping>
 80047c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	6978      	ldr	r0, [r7, #20]
 80047c8:	f7ff ff8e 	bl	80046e8 <NVIC_EncodePriority>
 80047cc:	4602      	mov	r2, r0
 80047ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047d2:	4611      	mov	r1, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff ff5d 	bl	8004694 <__NVIC_SetPriority>
}
 80047da:	bf00      	nop
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff ffb0 	bl	8004750 <SysTick_Config>
 80047f0:	4603      	mov	r3, r0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800480a:	e154      	b.n	8004ab6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	2101      	movs	r1, #1
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	fa01 f303 	lsl.w	r3, r1, r3
 8004818:	4013      	ands	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 8146 	beq.w	8004ab0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	2b01      	cmp	r3, #1
 800482e:	d005      	beq.n	800483c <HAL_GPIO_Init+0x40>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d130      	bne.n	800489e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	2203      	movs	r2, #3
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4013      	ands	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004872:	2201      	movs	r2, #1
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4013      	ands	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	091b      	lsrs	r3, r3, #4
 8004888:	f003 0201 	and.w	r2, r3, #1
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d017      	beq.n	80048da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	2203      	movs	r2, #3
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4013      	ands	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d123      	bne.n	800492e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	08da      	lsrs	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3208      	adds	r2, #8
 80048ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	220f      	movs	r2, #15
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4013      	ands	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	08da      	lsrs	r2, r3, #3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3208      	adds	r2, #8
 8004928:	6939      	ldr	r1, [r7, #16]
 800492a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	2203      	movs	r2, #3
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4013      	ands	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f003 0203 	and.w	r2, r3, #3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80a0 	beq.w	8004ab0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004970:	4b58      	ldr	r3, [pc, #352]	@ (8004ad4 <HAL_GPIO_Init+0x2d8>)
 8004972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004974:	4a57      	ldr	r2, [pc, #348]	@ (8004ad4 <HAL_GPIO_Init+0x2d8>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	6613      	str	r3, [r2, #96]	@ 0x60
 800497c:	4b55      	ldr	r3, [pc, #340]	@ (8004ad4 <HAL_GPIO_Init+0x2d8>)
 800497e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004988:	4a53      	ldr	r2, [pc, #332]	@ (8004ad8 <HAL_GPIO_Init+0x2dc>)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	089b      	lsrs	r3, r3, #2
 800498e:	3302      	adds	r3, #2
 8004990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004994:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	220f      	movs	r2, #15
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4013      	ands	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049b2:	d019      	beq.n	80049e8 <HAL_GPIO_Init+0x1ec>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a49      	ldr	r2, [pc, #292]	@ (8004adc <HAL_GPIO_Init+0x2e0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d013      	beq.n	80049e4 <HAL_GPIO_Init+0x1e8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a48      	ldr	r2, [pc, #288]	@ (8004ae0 <HAL_GPIO_Init+0x2e4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00d      	beq.n	80049e0 <HAL_GPIO_Init+0x1e4>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a47      	ldr	r2, [pc, #284]	@ (8004ae4 <HAL_GPIO_Init+0x2e8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d007      	beq.n	80049dc <HAL_GPIO_Init+0x1e0>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a46      	ldr	r2, [pc, #280]	@ (8004ae8 <HAL_GPIO_Init+0x2ec>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d101      	bne.n	80049d8 <HAL_GPIO_Init+0x1dc>
 80049d4:	2304      	movs	r3, #4
 80049d6:	e008      	b.n	80049ea <HAL_GPIO_Init+0x1ee>
 80049d8:	2307      	movs	r3, #7
 80049da:	e006      	b.n	80049ea <HAL_GPIO_Init+0x1ee>
 80049dc:	2303      	movs	r3, #3
 80049de:	e004      	b.n	80049ea <HAL_GPIO_Init+0x1ee>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e002      	b.n	80049ea <HAL_GPIO_Init+0x1ee>
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <HAL_GPIO_Init+0x1ee>
 80049e8:	2300      	movs	r3, #0
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	f002 0203 	and.w	r2, r2, #3
 80049f0:	0092      	lsls	r2, r2, #2
 80049f2:	4093      	lsls	r3, r2
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049fa:	4937      	ldr	r1, [pc, #220]	@ (8004ad8 <HAL_GPIO_Init+0x2dc>)
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	089b      	lsrs	r3, r3, #2
 8004a00:	3302      	adds	r3, #2
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a08:	4b38      	ldr	r3, [pc, #224]	@ (8004aec <HAL_GPIO_Init+0x2f0>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	43db      	mvns	r3, r3
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4013      	ands	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004aec <HAL_GPIO_Init+0x2f0>)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a32:	4b2e      	ldr	r3, [pc, #184]	@ (8004aec <HAL_GPIO_Init+0x2f0>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a56:	4a25      	ldr	r2, [pc, #148]	@ (8004aec <HAL_GPIO_Init+0x2f0>)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a5c:	4b23      	ldr	r3, [pc, #140]	@ (8004aec <HAL_GPIO_Init+0x2f0>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a80:	4a1a      	ldr	r2, [pc, #104]	@ (8004aec <HAL_GPIO_Init+0x2f0>)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004a86:	4b19      	ldr	r3, [pc, #100]	@ (8004aec <HAL_GPIO_Init+0x2f0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4013      	ands	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aaa:	4a10      	ldr	r2, [pc, #64]	@ (8004aec <HAL_GPIO_Init+0x2f0>)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f47f aea3 	bne.w	800480c <HAL_GPIO_Init+0x10>
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	371c      	adds	r7, #28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40010000 	.word	0x40010000
 8004adc:	48000400 	.word	0x48000400
 8004ae0:	48000800 	.word	0x48000800
 8004ae4:	48000c00 	.word	0x48000c00
 8004ae8:	48001000 	.word	0x48001000
 8004aec:	40010400 	.word	0x40010400

08004af0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	887b      	ldrh	r3, [r7, #2]
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
 8004b0c:	e001      	b.n	8004b12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	807b      	strh	r3, [r7, #2]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b30:	787b      	ldrb	r3, [r7, #1]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b36:	887a      	ldrh	r2, [r7, #2]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b3c:	e002      	b.n	8004b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b3e:	887a      	ldrh	r2, [r7, #2]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e08d      	b.n	8004c7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fd fc9a 	bl	80024b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2224      	movs	r2, #36	@ 0x24
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ba0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d107      	bne.n	8004bca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bc6:	609a      	str	r2, [r3, #8]
 8004bc8:	e006      	b.n	8004bd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004bd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d108      	bne.n	8004bf2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bee:	605a      	str	r2, [r3, #4]
 8004bf0:	e007      	b.n	8004c02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69d9      	ldr	r1, [r3, #28]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1a      	ldr	r2, [r3, #32]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	461a      	mov	r2, r3
 8004c94:	460b      	mov	r3, r1
 8004c96:	817b      	strh	r3, [r7, #10]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	f040 80fd 	bne.w	8004ea4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_I2C_Master_Transmit+0x30>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e0f6      	b.n	8004ea6 <HAL_I2C_Master_Transmit+0x21e>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cc0:	f7fd fe4e 	bl	8002960 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2319      	movs	r3, #25
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 fa0a 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e0e1      	b.n	8004ea6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2221      	movs	r2, #33	@ 0x21
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2210      	movs	r2, #16
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	893a      	ldrh	r2, [r7, #8]
 8004d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2bff      	cmp	r3, #255	@ 0xff
 8004d12:	d906      	bls.n	8004d22 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	22ff      	movs	r2, #255	@ 0xff
 8004d18:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004d1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e007      	b.n	8004d32 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004d2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d30:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d024      	beq.n	8004d84 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3e:	781a      	ldrb	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	3301      	adds	r3, #1
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	8979      	ldrh	r1, [r7, #10]
 8004d76:	4b4e      	ldr	r3, [pc, #312]	@ (8004eb0 <HAL_I2C_Master_Transmit+0x228>)
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fc05 	bl	800558c <I2C_TransferConfig>
 8004d82:	e066      	b.n	8004e52 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	8979      	ldrh	r1, [r7, #10]
 8004d8c:	4b48      	ldr	r3, [pc, #288]	@ (8004eb0 <HAL_I2C_Master_Transmit+0x228>)
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fbfa 	bl	800558c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d98:	e05b      	b.n	8004e52 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	6a39      	ldr	r1, [r7, #32]
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f9fd 	bl	800519e <I2C_WaitOnTXISFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e07b      	b.n	8004ea6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	781a      	ldrb	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d034      	beq.n	8004e52 <HAL_I2C_Master_Transmit+0x1ca>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d130      	bne.n	8004e52 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	2200      	movs	r2, #0
 8004df8:	2180      	movs	r1, #128	@ 0x80
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 f976 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e04d      	b.n	8004ea6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2bff      	cmp	r3, #255	@ 0xff
 8004e12:	d90e      	bls.n	8004e32 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	22ff      	movs	r2, #255	@ 0xff
 8004e18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	8979      	ldrh	r1, [r7, #10]
 8004e22:	2300      	movs	r3, #0
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fbae 	bl	800558c <I2C_TransferConfig>
 8004e30:	e00f      	b.n	8004e52 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	8979      	ldrh	r1, [r7, #10]
 8004e44:	2300      	movs	r3, #0
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 fb9d 	bl	800558c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d19e      	bne.n	8004d9a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	6a39      	ldr	r1, [r7, #32]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f9e3 	bl	800522c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e01a      	b.n	8004ea6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2220      	movs	r2, #32
 8004e76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb4 <HAL_I2C_Master_Transmit+0x22c>)
 8004e84:	400b      	ands	r3, r1
 8004e86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e000      	b.n	8004ea6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
  }
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	80002000 	.word	0x80002000
 8004eb4:	fe00e800 	.word	0xfe00e800

08004eb8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	607a      	str	r2, [r7, #4]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	817b      	strh	r3, [r7, #10]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	f040 80db 	bne.w	8005090 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_I2C_Master_Receive+0x30>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e0d4      	b.n	8005092 <HAL_I2C_Master_Receive+0x1da>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ef0:	f7fd fd36 	bl	8002960 <HAL_GetTick>
 8004ef4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	2319      	movs	r3, #25
 8004efc:	2201      	movs	r2, #1
 8004efe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 f8f2 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e0bf      	b.n	8005092 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2222      	movs	r2, #34	@ 0x22
 8004f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2210      	movs	r2, #16
 8004f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	893a      	ldrh	r2, [r7, #8]
 8004f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2bff      	cmp	r3, #255	@ 0xff
 8004f42:	d90e      	bls.n	8004f62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2201      	movs	r2, #1
 8004f48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	8979      	ldrh	r1, [r7, #10]
 8004f52:	4b52      	ldr	r3, [pc, #328]	@ (800509c <HAL_I2C_Master_Receive+0x1e4>)
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fb16 	bl	800558c <I2C_TransferConfig>
 8004f60:	e06d      	b.n	800503e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	8979      	ldrh	r1, [r7, #10]
 8004f74:	4b49      	ldr	r3, [pc, #292]	@ (800509c <HAL_I2C_Master_Receive+0x1e4>)
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fb05 	bl	800558c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004f82:	e05c      	b.n	800503e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	6a39      	ldr	r1, [r7, #32]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f993 	bl	80052b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e07c      	b.n	8005092 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d034      	beq.n	800503e <HAL_I2C_Master_Receive+0x186>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d130      	bne.n	800503e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2180      	movs	r1, #128	@ 0x80
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f880 	bl	80050ec <I2C_WaitOnFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e04d      	b.n	8005092 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2bff      	cmp	r3, #255	@ 0xff
 8004ffe:	d90e      	bls.n	800501e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	22ff      	movs	r2, #255	@ 0xff
 8005004:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500a:	b2da      	uxtb	r2, r3
 800500c:	8979      	ldrh	r1, [r7, #10]
 800500e:	2300      	movs	r3, #0
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fab8 	bl	800558c <I2C_TransferConfig>
 800501c:	e00f      	b.n	800503e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502c:	b2da      	uxtb	r2, r3
 800502e:	8979      	ldrh	r1, [r7, #10]
 8005030:	2300      	movs	r3, #0
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 faa7 	bl	800558c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d19d      	bne.n	8004f84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	6a39      	ldr	r1, [r7, #32]
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f8ed 	bl	800522c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e01a      	b.n	8005092 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2220      	movs	r2, #32
 8005062:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6859      	ldr	r1, [r3, #4]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b0c      	ldr	r3, [pc, #48]	@ (80050a0 <HAL_I2C_Master_Receive+0x1e8>)
 8005070:	400b      	ands	r3, r1
 8005072:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	e000      	b.n	8005092 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005090:	2302      	movs	r3, #2
  }
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	80002400 	.word	0x80002400
 80050a0:	fe00e800 	.word	0xfe00e800

080050a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d103      	bne.n	80050c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2200      	movs	r2, #0
 80050c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d007      	beq.n	80050e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	619a      	str	r2, [r3, #24]
  }
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050fc:	e03b      	b.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	6839      	ldr	r1, [r7, #0]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f962 	bl	80053cc <I2C_IsErrorOccurred>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e041      	b.n	8005196 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d02d      	beq.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511a:	f7fd fc21 	bl	8002960 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d302      	bcc.n	8005130 <I2C_WaitOnFlagUntilTimeout+0x44>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d122      	bne.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4013      	ands	r3, r2
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	429a      	cmp	r2, r3
 800513e:	bf0c      	ite	eq
 8005140:	2301      	moveq	r3, #1
 8005142:	2300      	movne	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	429a      	cmp	r2, r3
 800514c:	d113      	bne.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e00f      	b.n	8005196 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4013      	ands	r3, r2
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	429a      	cmp	r2, r3
 8005184:	bf0c      	ite	eq
 8005186:	2301      	moveq	r3, #1
 8005188:	2300      	movne	r3, #0
 800518a:	b2db      	uxtb	r3, r3
 800518c:	461a      	mov	r2, r3
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	429a      	cmp	r2, r3
 8005192:	d0b4      	beq.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051aa:	e033      	b.n	8005214 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f90b 	bl	80053cc <I2C_IsErrorOccurred>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e031      	b.n	8005224 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d025      	beq.n	8005214 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c8:	f7fd fbca 	bl	8002960 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d302      	bcc.n	80051de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d11a      	bne.n	8005214 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d013      	beq.n	8005214 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f0:	f043 0220 	orr.w	r2, r3, #32
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e007      	b.n	8005224 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b02      	cmp	r3, #2
 8005220:	d1c4      	bne.n	80051ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005238:	e02f      	b.n	800529a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f8c4 	bl	80053cc <I2C_IsErrorOccurred>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e02d      	b.n	80052aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524e:	f7fd fb87 	bl	8002960 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	429a      	cmp	r2, r3
 800525c:	d302      	bcc.n	8005264 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d11a      	bne.n	800529a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b20      	cmp	r3, #32
 8005270:	d013      	beq.n	800529a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005276:	f043 0220 	orr.w	r2, r3, #32
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e007      	b.n	80052aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d1c8      	bne.n	800523a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80052c4:	e071      	b.n	80053aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f87e 	bl	80053cc <I2C_IsErrorOccurred>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	d13b      	bne.n	8005360 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d138      	bne.n	8005360 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d105      	bne.n	8005308 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	2b10      	cmp	r3, #16
 8005314:	d121      	bne.n	800535a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2210      	movs	r2, #16
 800531c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2204      	movs	r2, #4
 8005322:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2220      	movs	r2, #32
 800532a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6859      	ldr	r1, [r3, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b24      	ldr	r3, [pc, #144]	@ (80053c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005338:	400b      	ands	r3, r1
 800533a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	75fb      	strb	r3, [r7, #23]
 8005358:	e002      	b.n	8005360 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005360:	f7fd fafe 	bl	8002960 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	429a      	cmp	r2, r3
 800536e:	d302      	bcc.n	8005376 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d119      	bne.n	80053aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005376:	7dfb      	ldrb	r3, [r7, #23]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d116      	bne.n	80053aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b04      	cmp	r3, #4
 8005388:	d00f      	beq.n	80053aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	f043 0220 	orr.w	r2, r3, #32
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d002      	beq.n	80053be <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d083      	beq.n	80052c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	fe00e800 	.word	0xfe00e800

080053cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08a      	sub	sp, #40	@ 0x28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d068      	beq.n	80054ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2210      	movs	r2, #16
 80053fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005400:	e049      	b.n	8005496 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005408:	d045      	beq.n	8005496 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800540a:	f7fd faa9 	bl	8002960 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	429a      	cmp	r2, r3
 8005418:	d302      	bcc.n	8005420 <I2C_IsErrorOccurred+0x54>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d13a      	bne.n	8005496 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800542a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005432:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800543e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005442:	d121      	bne.n	8005488 <I2C_IsErrorOccurred+0xbc>
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800544a:	d01d      	beq.n	8005488 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800544c:	7cfb      	ldrb	r3, [r7, #19]
 800544e:	2b20      	cmp	r3, #32
 8005450:	d01a      	beq.n	8005488 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005460:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005462:	f7fd fa7d 	bl	8002960 <HAL_GetTick>
 8005466:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005468:	e00e      	b.n	8005488 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800546a:	f7fd fa79 	bl	8002960 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b19      	cmp	r3, #25
 8005476:	d907      	bls.n	8005488 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	f043 0320 	orr.w	r3, r3, #32
 800547e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005486:	e006      	b.n	8005496 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b20      	cmp	r3, #32
 8005494:	d1e9      	bne.n	800546a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d003      	beq.n	80054ac <I2C_IsErrorOccurred+0xe0>
 80054a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0aa      	beq.n	8005402 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80054ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d103      	bne.n	80054bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2220      	movs	r2, #32
 80054ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	f043 0304 	orr.w	r3, r3, #4
 80054c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00b      	beq.n	80054f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00b      	beq.n	8005516 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	f043 0308 	orr.w	r3, r3, #8
 8005504:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800550e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	f043 0302 	orr.w	r3, r3, #2
 8005526:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005530:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01c      	beq.n	800557a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f7ff fdaf 	bl	80050a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6859      	ldr	r1, [r3, #4]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	4b0d      	ldr	r3, [pc, #52]	@ (8005588 <I2C_IsErrorOccurred+0x1bc>)
 8005552:	400b      	ands	r3, r1
 8005554:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	431a      	orrs	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800557a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800557e:	4618      	mov	r0, r3
 8005580:	3728      	adds	r7, #40	@ 0x28
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	fe00e800 	.word	0xfe00e800

0800558c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	460b      	mov	r3, r1
 8005598:	817b      	strh	r3, [r7, #10]
 800559a:	4613      	mov	r3, r2
 800559c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800559e:	897b      	ldrh	r3, [r7, #10]
 80055a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055a4:	7a7b      	ldrb	r3, [r7, #9]
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	0d5b      	lsrs	r3, r3, #21
 80055c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80055ca:	4b08      	ldr	r3, [pc, #32]	@ (80055ec <I2C_TransferConfig+0x60>)
 80055cc:	430b      	orrs	r3, r1
 80055ce:	43db      	mvns	r3, r3
 80055d0:	ea02 0103 	and.w	r1, r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	03ff63ff 	.word	0x03ff63ff

080055f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b20      	cmp	r3, #32
 8005604:	d138      	bne.n	8005678 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005610:	2302      	movs	r3, #2
 8005612:	e032      	b.n	800567a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2224      	movs	r2, #36	@ 0x24
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0201 	bic.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005642:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6819      	ldr	r1, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005674:	2300      	movs	r3, #0
 8005676:	e000      	b.n	800567a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005678:	2302      	movs	r3, #2
  }
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b20      	cmp	r3, #32
 800569a:	d139      	bne.n	8005710 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e033      	b.n	8005712 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2224      	movs	r2, #36	@ 0x24
 80056b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0201 	bic.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80056d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	e000      	b.n	8005712 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005710:	2302      	movs	r3, #2
  }
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
	...

08005720 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005724:	4b04      	ldr	r3, [pc, #16]	@ (8005738 <HAL_PWREx_GetVoltageRange+0x18>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800572c:	4618      	mov	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40007000 	.word	0x40007000

0800573c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800574a:	d130      	bne.n	80057ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800574c:	4b23      	ldr	r3, [pc, #140]	@ (80057dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005758:	d038      	beq.n	80057cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800575a:	4b20      	ldr	r3, [pc, #128]	@ (80057dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005762:	4a1e      	ldr	r2, [pc, #120]	@ (80057dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005764:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005768:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800576a:	4b1d      	ldr	r3, [pc, #116]	@ (80057e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2232      	movs	r2, #50	@ 0x32
 8005770:	fb02 f303 	mul.w	r3, r2, r3
 8005774:	4a1b      	ldr	r2, [pc, #108]	@ (80057e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005776:	fba2 2303 	umull	r2, r3, r2, r3
 800577a:	0c9b      	lsrs	r3, r3, #18
 800577c:	3301      	adds	r3, #1
 800577e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005780:	e002      	b.n	8005788 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3b01      	subs	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005788:	4b14      	ldr	r3, [pc, #80]	@ (80057dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005794:	d102      	bne.n	800579c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1f2      	bne.n	8005782 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800579c:	4b0f      	ldr	r3, [pc, #60]	@ (80057dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a8:	d110      	bne.n	80057cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e00f      	b.n	80057ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80057ae:	4b0b      	ldr	r3, [pc, #44]	@ (80057dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ba:	d007      	beq.n	80057cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057bc:	4b07      	ldr	r3, [pc, #28]	@ (80057dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057c4:	4a05      	ldr	r2, [pc, #20]	@ (80057dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40007000 	.word	0x40007000
 80057e0:	20000000 	.word	0x20000000
 80057e4:	431bde83 	.word	0x431bde83

080057e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	f000 bc02 	b.w	8006000 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057fc:	4b96      	ldr	r3, [pc, #600]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 030c 	and.w	r3, r3, #12
 8005804:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005806:	4b94      	ldr	r3, [pc, #592]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 80e4 	beq.w	80059e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <HAL_RCC_OscConfig+0x4c>
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	2b0c      	cmp	r3, #12
 8005828:	f040 808b 	bne.w	8005942 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b01      	cmp	r3, #1
 8005830:	f040 8087 	bne.w	8005942 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005834:	4b88      	ldr	r3, [pc, #544]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <HAL_RCC_OscConfig+0x64>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e3d9      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1a      	ldr	r2, [r3, #32]
 8005850:	4b81      	ldr	r3, [pc, #516]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <HAL_RCC_OscConfig+0x7e>
 800585c:	4b7e      	ldr	r3, [pc, #504]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005864:	e005      	b.n	8005872 <HAL_RCC_OscConfig+0x8a>
 8005866:	4b7c      	ldr	r3, [pc, #496]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005872:	4293      	cmp	r3, r2
 8005874:	d223      	bcs.n	80058be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fd8c 	bl	8006398 <RCC_SetFlashLatencyFromMSIRange>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e3ba      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800588a:	4b73      	ldr	r3, [pc, #460]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a72      	ldr	r2, [pc, #456]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005890:	f043 0308 	orr.w	r3, r3, #8
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	4b70      	ldr	r3, [pc, #448]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	496d      	ldr	r1, [pc, #436]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058a8:	4b6b      	ldr	r3, [pc, #428]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	4968      	ldr	r1, [pc, #416]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	604b      	str	r3, [r1, #4]
 80058bc:	e025      	b.n	800590a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058be:	4b66      	ldr	r3, [pc, #408]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a65      	ldr	r2, [pc, #404]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80058c4:	f043 0308 	orr.w	r3, r3, #8
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	4b63      	ldr	r3, [pc, #396]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	4960      	ldr	r1, [pc, #384]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058dc:	4b5e      	ldr	r3, [pc, #376]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	495b      	ldr	r1, [pc, #364]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fd4c 	bl	8006398 <RCC_SetFlashLatencyFromMSIRange>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e37a      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800590a:	f000 fc81 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 800590e:	4602      	mov	r2, r0
 8005910:	4b51      	ldr	r3, [pc, #324]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	4950      	ldr	r1, [pc, #320]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 800591c:	5ccb      	ldrb	r3, [r1, r3]
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	fa22 f303 	lsr.w	r3, r2, r3
 8005926:	4a4e      	ldr	r2, [pc, #312]	@ (8005a60 <HAL_RCC_OscConfig+0x278>)
 8005928:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800592a:	4b4e      	ldr	r3, [pc, #312]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fc ffc6 	bl	80028c0 <HAL_InitTick>
 8005934:	4603      	mov	r3, r0
 8005936:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d052      	beq.n	80059e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	e35e      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d032      	beq.n	80059b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800594a:	4b43      	ldr	r3, [pc, #268]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a42      	ldr	r2, [pc, #264]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005950:	f043 0301 	orr.w	r3, r3, #1
 8005954:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005956:	f7fd f803 	bl	8002960 <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800595e:	f7fc ffff 	bl	8002960 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e347      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005970:	4b39      	ldr	r3, [pc, #228]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800597c:	4b36      	ldr	r3, [pc, #216]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a35      	ldr	r2, [pc, #212]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005982:	f043 0308 	orr.w	r3, r3, #8
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	4b33      	ldr	r3, [pc, #204]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	4930      	ldr	r1, [pc, #192]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005996:	4313      	orrs	r3, r2
 8005998:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800599a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	492b      	ldr	r1, [pc, #172]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	604b      	str	r3, [r1, #4]
 80059ae:	e01a      	b.n	80059e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80059b0:	4b29      	ldr	r3, [pc, #164]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a28      	ldr	r2, [pc, #160]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059bc:	f7fc ffd0 	bl	8002960 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059c4:	f7fc ffcc 	bl	8002960 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e314      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059d6:	4b20      	ldr	r3, [pc, #128]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f0      	bne.n	80059c4 <HAL_RCC_OscConfig+0x1dc>
 80059e2:	e000      	b.n	80059e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d073      	beq.n	8005ada <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d005      	beq.n	8005a04 <HAL_RCC_OscConfig+0x21c>
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	2b0c      	cmp	r3, #12
 80059fc:	d10e      	bne.n	8005a1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d10b      	bne.n	8005a1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a04:	4b14      	ldr	r3, [pc, #80]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d063      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x2f0>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d15f      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e2f1      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a24:	d106      	bne.n	8005a34 <HAL_RCC_OscConfig+0x24c>
 8005a26:	4b0c      	ldr	r3, [pc, #48]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	e025      	b.n	8005a80 <HAL_RCC_OscConfig+0x298>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a3c:	d114      	bne.n	8005a68 <HAL_RCC_OscConfig+0x280>
 8005a3e:	4b06      	ldr	r3, [pc, #24]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a05      	ldr	r2, [pc, #20]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	4b03      	ldr	r3, [pc, #12]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a02      	ldr	r2, [pc, #8]	@ (8005a58 <HAL_RCC_OscConfig+0x270>)
 8005a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	e013      	b.n	8005a80 <HAL_RCC_OscConfig+0x298>
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	08009c7c 	.word	0x08009c7c
 8005a60:	20000000 	.word	0x20000000
 8005a64:	20000004 	.word	0x20000004
 8005a68:	4ba0      	ldr	r3, [pc, #640]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a9f      	ldr	r2, [pc, #636]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	4b9d      	ldr	r3, [pc, #628]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a9c      	ldr	r2, [pc, #624]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d013      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a88:	f7fc ff6a 	bl	8002960 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a90:	f7fc ff66 	bl	8002960 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b64      	cmp	r3, #100	@ 0x64
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e2ae      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aa2:	4b92      	ldr	r3, [pc, #584]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0f0      	beq.n	8005a90 <HAL_RCC_OscConfig+0x2a8>
 8005aae:	e014      	b.n	8005ada <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab0:	f7fc ff56 	bl	8002960 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ab8:	f7fc ff52 	bl	8002960 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b64      	cmp	r3, #100	@ 0x64
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e29a      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005aca:	4b88      	ldr	r3, [pc, #544]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1f0      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x2d0>
 8005ad6:	e000      	b.n	8005ada <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d060      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d005      	beq.n	8005af8 <HAL_RCC_OscConfig+0x310>
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	2b0c      	cmp	r3, #12
 8005af0:	d119      	bne.n	8005b26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d116      	bne.n	8005b26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005af8:	4b7c      	ldr	r3, [pc, #496]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <HAL_RCC_OscConfig+0x328>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e277      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b10:	4b76      	ldr	r3, [pc, #472]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	061b      	lsls	r3, r3, #24
 8005b1e:	4973      	ldr	r1, [pc, #460]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b24:	e040      	b.n	8005ba8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d023      	beq.n	8005b76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b2e:	4b6f      	ldr	r3, [pc, #444]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a6e      	ldr	r2, [pc, #440]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3a:	f7fc ff11 	bl	8002960 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b42:	f7fc ff0d 	bl	8002960 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e255      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b54:	4b65      	ldr	r3, [pc, #404]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0f0      	beq.n	8005b42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b60:	4b62      	ldr	r3, [pc, #392]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	061b      	lsls	r3, r3, #24
 8005b6e:	495f      	ldr	r1, [pc, #380]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	604b      	str	r3, [r1, #4]
 8005b74:	e018      	b.n	8005ba8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b76:	4b5d      	ldr	r3, [pc, #372]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a5c      	ldr	r2, [pc, #368]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b82:	f7fc feed 	bl	8002960 <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b8a:	f7fc fee9 	bl	8002960 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e231      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b9c:	4b53      	ldr	r3, [pc, #332]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1f0      	bne.n	8005b8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d03c      	beq.n	8005c2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01c      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bc2:	4a4a      	ldr	r2, [pc, #296]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bcc:	f7fc fec8 	bl	8002960 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd4:	f7fc fec4 	bl	8002960 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e20c      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005be6:	4b41      	ldr	r3, [pc, #260]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0ef      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x3ec>
 8005bf4:	e01b      	b.n	8005c2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bfc:	4a3b      	ldr	r2, [pc, #236]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005bfe:	f023 0301 	bic.w	r3, r3, #1
 8005c02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c06:	f7fc feab 	bl	8002960 <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c0e:	f7fc fea7 	bl	8002960 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e1ef      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c20:	4b32      	ldr	r3, [pc, #200]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1ef      	bne.n	8005c0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 80a6 	beq.w	8005d88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c40:	4b2a      	ldr	r3, [pc, #168]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10d      	bne.n	8005c68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c4c:	4b27      	ldr	r3, [pc, #156]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c50:	4a26      	ldr	r2, [pc, #152]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c56:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c58:	4b24      	ldr	r3, [pc, #144]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c64:	2301      	movs	r3, #1
 8005c66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c68:	4b21      	ldr	r3, [pc, #132]	@ (8005cf0 <HAL_RCC_OscConfig+0x508>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d118      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c74:	4b1e      	ldr	r3, [pc, #120]	@ (8005cf0 <HAL_RCC_OscConfig+0x508>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf0 <HAL_RCC_OscConfig+0x508>)
 8005c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c80:	f7fc fe6e 	bl	8002960 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c88:	f7fc fe6a 	bl	8002960 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e1b2      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c9a:	4b15      	ldr	r3, [pc, #84]	@ (8005cf0 <HAL_RCC_OscConfig+0x508>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f0      	beq.n	8005c88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d108      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x4d8>
 8005cae:	4b0f      	ldr	r3, [pc, #60]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005cb6:	f043 0301 	orr.w	r3, r3, #1
 8005cba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cbe:	e029      	b.n	8005d14 <HAL_RCC_OscConfig+0x52c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b05      	cmp	r3, #5
 8005cc6:	d115      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x50c>
 8005cc8:	4b08      	ldr	r3, [pc, #32]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cce:	4a07      	ldr	r2, [pc, #28]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005cd0:	f043 0304 	orr.w	r3, r3, #4
 8005cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cd8:	4b04      	ldr	r3, [pc, #16]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cde:	4a03      	ldr	r2, [pc, #12]	@ (8005cec <HAL_RCC_OscConfig+0x504>)
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ce8:	e014      	b.n	8005d14 <HAL_RCC_OscConfig+0x52c>
 8005cea:	bf00      	nop
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	40007000 	.word	0x40007000
 8005cf4:	4b9a      	ldr	r3, [pc, #616]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfa:	4a99      	ldr	r2, [pc, #612]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005cfc:	f023 0301 	bic.w	r3, r3, #1
 8005d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d04:	4b96      	ldr	r3, [pc, #600]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d0a:	4a95      	ldr	r2, [pc, #596]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005d0c:	f023 0304 	bic.w	r3, r3, #4
 8005d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d016      	beq.n	8005d4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1c:	f7fc fe20 	bl	8002960 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d22:	e00a      	b.n	8005d3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d24:	f7fc fe1c 	bl	8002960 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e162      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d3a:	4b89      	ldr	r3, [pc, #548]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0ed      	beq.n	8005d24 <HAL_RCC_OscConfig+0x53c>
 8005d48:	e015      	b.n	8005d76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4a:	f7fc fe09 	bl	8002960 <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d50:	e00a      	b.n	8005d68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d52:	f7fc fe05 	bl	8002960 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e14b      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d68:	4b7d      	ldr	r3, [pc, #500]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1ed      	bne.n	8005d52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d76:	7ffb      	ldrb	r3, [r7, #31]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d105      	bne.n	8005d88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d7c:	4b78      	ldr	r3, [pc, #480]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d80:	4a77      	ldr	r2, [pc, #476]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d86:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d03c      	beq.n	8005e0e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01c      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d9c:	4b70      	ldr	r3, [pc, #448]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005da2:	4a6f      	ldr	r2, [pc, #444]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dac:	f7fc fdd8 	bl	8002960 <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005db4:	f7fc fdd4 	bl	8002960 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e11c      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005dc6:	4b66      	ldr	r3, [pc, #408]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0ef      	beq.n	8005db4 <HAL_RCC_OscConfig+0x5cc>
 8005dd4:	e01b      	b.n	8005e0e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005dd6:	4b62      	ldr	r3, [pc, #392]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ddc:	4a60      	ldr	r2, [pc, #384]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005dde:	f023 0301 	bic.w	r3, r3, #1
 8005de2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de6:	f7fc fdbb 	bl	8002960 <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dee:	f7fc fdb7 	bl	8002960 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e0ff      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e00:	4b57      	ldr	r3, [pc, #348]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1ef      	bne.n	8005dee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 80f3 	beq.w	8005ffe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	f040 80c9 	bne.w	8005fb4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005e22:	4b4f      	ldr	r3, [pc, #316]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f003 0203 	and.w	r2, r3, #3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d12c      	bne.n	8005e90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e40:	3b01      	subs	r3, #1
 8005e42:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d123      	bne.n	8005e90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e52:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d11b      	bne.n	8005e90 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e62:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d113      	bne.n	8005e90 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	3b01      	subs	r3, #1
 8005e76:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d109      	bne.n	8005e90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d06b      	beq.n	8005f68 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	2b0c      	cmp	r3, #12
 8005e94:	d062      	beq.n	8005f5c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e96:	4b32      	ldr	r3, [pc, #200]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e0ac      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005eac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eb0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005eb2:	f7fc fd55 	bl	8002960 <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eba:	f7fc fd51 	bl	8002960 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e099      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ecc:	4b24      	ldr	r3, [pc, #144]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1f0      	bne.n	8005eba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ed8:	4b21      	ldr	r3, [pc, #132]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	4b21      	ldr	r3, [pc, #132]	@ (8005f64 <HAL_RCC_OscConfig+0x77c>)
 8005ede:	4013      	ands	r3, r2
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005ee8:	3a01      	subs	r2, #1
 8005eea:	0112      	lsls	r2, r2, #4
 8005eec:	4311      	orrs	r1, r2
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ef2:	0212      	lsls	r2, r2, #8
 8005ef4:	4311      	orrs	r1, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005efa:	0852      	lsrs	r2, r2, #1
 8005efc:	3a01      	subs	r2, #1
 8005efe:	0552      	lsls	r2, r2, #21
 8005f00:	4311      	orrs	r1, r2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005f06:	0852      	lsrs	r2, r2, #1
 8005f08:	3a01      	subs	r2, #1
 8005f0a:	0652      	lsls	r2, r2, #25
 8005f0c:	4311      	orrs	r1, r2
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005f12:	06d2      	lsls	r2, r2, #27
 8005f14:	430a      	orrs	r2, r1
 8005f16:	4912      	ldr	r1, [pc, #72]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005f1c:	4b10      	ldr	r3, [pc, #64]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0f      	ldr	r2, [pc, #60]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f28:	4b0d      	ldr	r3, [pc, #52]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f34:	f7fc fd14 	bl	8002960 <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f3c:	f7fc fd10 	bl	8002960 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e058      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f4e:	4b04      	ldr	r3, [pc, #16]	@ (8005f60 <HAL_RCC_OscConfig+0x778>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f0      	beq.n	8005f3c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f5a:	e050      	b.n	8005ffe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e04f      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
 8005f60:	40021000 	.word	0x40021000
 8005f64:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f68:	4b27      	ldr	r3, [pc, #156]	@ (8006008 <HAL_RCC_OscConfig+0x820>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d144      	bne.n	8005ffe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f74:	4b24      	ldr	r3, [pc, #144]	@ (8006008 <HAL_RCC_OscConfig+0x820>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a23      	ldr	r2, [pc, #140]	@ (8006008 <HAL_RCC_OscConfig+0x820>)
 8005f7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f80:	4b21      	ldr	r3, [pc, #132]	@ (8006008 <HAL_RCC_OscConfig+0x820>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	4a20      	ldr	r2, [pc, #128]	@ (8006008 <HAL_RCC_OscConfig+0x820>)
 8005f86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f8c:	f7fc fce8 	bl	8002960 <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f94:	f7fc fce4 	bl	8002960 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e02c      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fa6:	4b18      	ldr	r3, [pc, #96]	@ (8006008 <HAL_RCC_OscConfig+0x820>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0f0      	beq.n	8005f94 <HAL_RCC_OscConfig+0x7ac>
 8005fb2:	e024      	b.n	8005ffe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	2b0c      	cmp	r3, #12
 8005fb8:	d01f      	beq.n	8005ffa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fba:	4b13      	ldr	r3, [pc, #76]	@ (8006008 <HAL_RCC_OscConfig+0x820>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a12      	ldr	r2, [pc, #72]	@ (8006008 <HAL_RCC_OscConfig+0x820>)
 8005fc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc6:	f7fc fccb 	bl	8002960 <HAL_GetTick>
 8005fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fce:	f7fc fcc7 	bl	8002960 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e00f      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fe0:	4b09      	ldr	r3, [pc, #36]	@ (8006008 <HAL_RCC_OscConfig+0x820>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f0      	bne.n	8005fce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005fec:	4b06      	ldr	r3, [pc, #24]	@ (8006008 <HAL_RCC_OscConfig+0x820>)
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	4905      	ldr	r1, [pc, #20]	@ (8006008 <HAL_RCC_OscConfig+0x820>)
 8005ff2:	4b06      	ldr	r3, [pc, #24]	@ (800600c <HAL_RCC_OscConfig+0x824>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	60cb      	str	r3, [r1, #12]
 8005ff8:	e001      	b.n	8005ffe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3720      	adds	r7, #32
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	40021000 	.word	0x40021000
 800600c:	feeefffc 	.word	0xfeeefffc

08006010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e0e7      	b.n	80061f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006024:	4b75      	ldr	r3, [pc, #468]	@ (80061fc <HAL_RCC_ClockConfig+0x1ec>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d910      	bls.n	8006054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006032:	4b72      	ldr	r3, [pc, #456]	@ (80061fc <HAL_RCC_ClockConfig+0x1ec>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f023 0207 	bic.w	r2, r3, #7
 800603a:	4970      	ldr	r1, [pc, #448]	@ (80061fc <HAL_RCC_ClockConfig+0x1ec>)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	4313      	orrs	r3, r2
 8006040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006042:	4b6e      	ldr	r3, [pc, #440]	@ (80061fc <HAL_RCC_ClockConfig+0x1ec>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d001      	beq.n	8006054 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e0cf      	b.n	80061f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d010      	beq.n	8006082 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	4b66      	ldr	r3, [pc, #408]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800606c:	429a      	cmp	r2, r3
 800606e:	d908      	bls.n	8006082 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006070:	4b63      	ldr	r3, [pc, #396]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	4960      	ldr	r1, [pc, #384]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 800607e:	4313      	orrs	r3, r2
 8006080:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d04c      	beq.n	8006128 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b03      	cmp	r3, #3
 8006094:	d107      	bne.n	80060a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006096:	4b5a      	ldr	r3, [pc, #360]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d121      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e0a6      	b.n	80061f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d107      	bne.n	80060be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060ae:	4b54      	ldr	r3, [pc, #336]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d115      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e09a      	b.n	80061f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d107      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80060c6:	4b4e      	ldr	r3, [pc, #312]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e08e      	b.n	80061f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e086      	b.n	80061f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060e6:	4b46      	ldr	r3, [pc, #280]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f023 0203 	bic.w	r2, r3, #3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	4943      	ldr	r1, [pc, #268]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060f8:	f7fc fc32 	bl	8002960 <HAL_GetTick>
 80060fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060fe:	e00a      	b.n	8006116 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006100:	f7fc fc2e 	bl	8002960 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800610e:	4293      	cmp	r3, r2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e06e      	b.n	80061f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006116:	4b3a      	ldr	r3, [pc, #232]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 020c 	and.w	r2, r3, #12
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	429a      	cmp	r2, r3
 8006126:	d1eb      	bne.n	8006100 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d010      	beq.n	8006156 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	4b31      	ldr	r3, [pc, #196]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006140:	429a      	cmp	r2, r3
 8006142:	d208      	bcs.n	8006156 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006144:	4b2e      	ldr	r3, [pc, #184]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	492b      	ldr	r1, [pc, #172]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 8006152:	4313      	orrs	r3, r2
 8006154:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006156:	4b29      	ldr	r3, [pc, #164]	@ (80061fc <HAL_RCC_ClockConfig+0x1ec>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d210      	bcs.n	8006186 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006164:	4b25      	ldr	r3, [pc, #148]	@ (80061fc <HAL_RCC_ClockConfig+0x1ec>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f023 0207 	bic.w	r2, r3, #7
 800616c:	4923      	ldr	r1, [pc, #140]	@ (80061fc <HAL_RCC_ClockConfig+0x1ec>)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	4313      	orrs	r3, r2
 8006172:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006174:	4b21      	ldr	r3, [pc, #132]	@ (80061fc <HAL_RCC_ClockConfig+0x1ec>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d001      	beq.n	8006186 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e036      	b.n	80061f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	d008      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006192:	4b1b      	ldr	r3, [pc, #108]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	4918      	ldr	r1, [pc, #96]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d009      	beq.n	80061c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061b0:	4b13      	ldr	r3, [pc, #76]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4910      	ldr	r1, [pc, #64]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061c4:	f000 f824 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 80061c8:	4602      	mov	r2, r0
 80061ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006200 <HAL_RCC_ClockConfig+0x1f0>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	091b      	lsrs	r3, r3, #4
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	490b      	ldr	r1, [pc, #44]	@ (8006204 <HAL_RCC_ClockConfig+0x1f4>)
 80061d6:	5ccb      	ldrb	r3, [r1, r3]
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	fa22 f303 	lsr.w	r3, r2, r3
 80061e0:	4a09      	ldr	r2, [pc, #36]	@ (8006208 <HAL_RCC_ClockConfig+0x1f8>)
 80061e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061e4:	4b09      	ldr	r3, [pc, #36]	@ (800620c <HAL_RCC_ClockConfig+0x1fc>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fc fb69 	bl	80028c0 <HAL_InitTick>
 80061ee:	4603      	mov	r3, r0
 80061f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80061f2:	7afb      	ldrb	r3, [r7, #11]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40022000 	.word	0x40022000
 8006200:	40021000 	.word	0x40021000
 8006204:	08009c7c 	.word	0x08009c7c
 8006208:	20000000 	.word	0x20000000
 800620c:	20000004 	.word	0x20000004

08006210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006210:	b480      	push	{r7}
 8006212:	b089      	sub	sp, #36	@ 0x24
 8006214:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	61fb      	str	r3, [r7, #28]
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800621e:	4b3e      	ldr	r3, [pc, #248]	@ (8006318 <HAL_RCC_GetSysClockFreq+0x108>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 030c 	and.w	r3, r3, #12
 8006226:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006228:	4b3b      	ldr	r3, [pc, #236]	@ (8006318 <HAL_RCC_GetSysClockFreq+0x108>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <HAL_RCC_GetSysClockFreq+0x34>
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b0c      	cmp	r3, #12
 800623c:	d121      	bne.n	8006282 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d11e      	bne.n	8006282 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006244:	4b34      	ldr	r3, [pc, #208]	@ (8006318 <HAL_RCC_GetSysClockFreq+0x108>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b00      	cmp	r3, #0
 800624e:	d107      	bne.n	8006260 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006250:	4b31      	ldr	r3, [pc, #196]	@ (8006318 <HAL_RCC_GetSysClockFreq+0x108>)
 8006252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006256:	0a1b      	lsrs	r3, r3, #8
 8006258:	f003 030f 	and.w	r3, r3, #15
 800625c:	61fb      	str	r3, [r7, #28]
 800625e:	e005      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006260:	4b2d      	ldr	r3, [pc, #180]	@ (8006318 <HAL_RCC_GetSysClockFreq+0x108>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	091b      	lsrs	r3, r3, #4
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800626c:	4a2b      	ldr	r2, [pc, #172]	@ (800631c <HAL_RCC_GetSysClockFreq+0x10c>)
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006274:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10d      	bne.n	8006298 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006280:	e00a      	b.n	8006298 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	2b04      	cmp	r3, #4
 8006286:	d102      	bne.n	800628e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006288:	4b25      	ldr	r3, [pc, #148]	@ (8006320 <HAL_RCC_GetSysClockFreq+0x110>)
 800628a:	61bb      	str	r3, [r7, #24]
 800628c:	e004      	b.n	8006298 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b08      	cmp	r3, #8
 8006292:	d101      	bne.n	8006298 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006294:	4b23      	ldr	r3, [pc, #140]	@ (8006324 <HAL_RCC_GetSysClockFreq+0x114>)
 8006296:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	2b0c      	cmp	r3, #12
 800629c:	d134      	bne.n	8006308 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800629e:	4b1e      	ldr	r3, [pc, #120]	@ (8006318 <HAL_RCC_GetSysClockFreq+0x108>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d003      	beq.n	80062b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d003      	beq.n	80062bc <HAL_RCC_GetSysClockFreq+0xac>
 80062b4:	e005      	b.n	80062c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80062b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006320 <HAL_RCC_GetSysClockFreq+0x110>)
 80062b8:	617b      	str	r3, [r7, #20]
      break;
 80062ba:	e005      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80062bc:	4b19      	ldr	r3, [pc, #100]	@ (8006324 <HAL_RCC_GetSysClockFreq+0x114>)
 80062be:	617b      	str	r3, [r7, #20]
      break;
 80062c0:	e002      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	617b      	str	r3, [r7, #20]
      break;
 80062c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062c8:	4b13      	ldr	r3, [pc, #76]	@ (8006318 <HAL_RCC_GetSysClockFreq+0x108>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	091b      	lsrs	r3, r3, #4
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	3301      	adds	r3, #1
 80062d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80062d6:	4b10      	ldr	r3, [pc, #64]	@ (8006318 <HAL_RCC_GetSysClockFreq+0x108>)
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	0a1b      	lsrs	r3, r3, #8
 80062dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	fb03 f202 	mul.w	r2, r3, r2
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006318 <HAL_RCC_GetSysClockFreq+0x108>)
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	0e5b      	lsrs	r3, r3, #25
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	3301      	adds	r3, #1
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	fbb2 f3f3 	udiv	r3, r2, r3
 8006306:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006308:	69bb      	ldr	r3, [r7, #24]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3724      	adds	r7, #36	@ 0x24
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40021000 	.word	0x40021000
 800631c:	08009c94 	.word	0x08009c94
 8006320:	00f42400 	.word	0x00f42400
 8006324:	007a1200 	.word	0x007a1200

08006328 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800632c:	4b03      	ldr	r3, [pc, #12]	@ (800633c <HAL_RCC_GetHCLKFreq+0x14>)
 800632e:	681b      	ldr	r3, [r3, #0]
}
 8006330:	4618      	mov	r0, r3
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000000 	.word	0x20000000

08006340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006344:	f7ff fff0 	bl	8006328 <HAL_RCC_GetHCLKFreq>
 8006348:	4602      	mov	r2, r0
 800634a:	4b06      	ldr	r3, [pc, #24]	@ (8006364 <HAL_RCC_GetPCLK1Freq+0x24>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	0a1b      	lsrs	r3, r3, #8
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	4904      	ldr	r1, [pc, #16]	@ (8006368 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006356:	5ccb      	ldrb	r3, [r1, r3]
 8006358:	f003 031f 	and.w	r3, r3, #31
 800635c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006360:	4618      	mov	r0, r3
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40021000 	.word	0x40021000
 8006368:	08009c8c 	.word	0x08009c8c

0800636c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006370:	f7ff ffda 	bl	8006328 <HAL_RCC_GetHCLKFreq>
 8006374:	4602      	mov	r2, r0
 8006376:	4b06      	ldr	r3, [pc, #24]	@ (8006390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	0adb      	lsrs	r3, r3, #11
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	4904      	ldr	r1, [pc, #16]	@ (8006394 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006382:	5ccb      	ldrb	r3, [r1, r3]
 8006384:	f003 031f 	and.w	r3, r3, #31
 8006388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800638c:	4618      	mov	r0, r3
 800638e:	bd80      	pop	{r7, pc}
 8006390:	40021000 	.word	0x40021000
 8006394:	08009c8c 	.word	0x08009c8c

08006398 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80063a0:	2300      	movs	r3, #0
 80063a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80063a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063b0:	f7ff f9b6 	bl	8005720 <HAL_PWREx_GetVoltageRange>
 80063b4:	6178      	str	r0, [r7, #20]
 80063b6:	e014      	b.n	80063e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063b8:	4b25      	ldr	r3, [pc, #148]	@ (8006450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063bc:	4a24      	ldr	r2, [pc, #144]	@ (8006450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80063c4:	4b22      	ldr	r3, [pc, #136]	@ (8006450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063d0:	f7ff f9a6 	bl	8005720 <HAL_PWREx_GetVoltageRange>
 80063d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063da:	4a1d      	ldr	r2, [pc, #116]	@ (8006450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e8:	d10b      	bne.n	8006402 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b80      	cmp	r3, #128	@ 0x80
 80063ee:	d919      	bls.n	8006424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80063f4:	d902      	bls.n	80063fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063f6:	2302      	movs	r3, #2
 80063f8:	613b      	str	r3, [r7, #16]
 80063fa:	e013      	b.n	8006424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063fc:	2301      	movs	r3, #1
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	e010      	b.n	8006424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b80      	cmp	r3, #128	@ 0x80
 8006406:	d902      	bls.n	800640e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006408:	2303      	movs	r3, #3
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	e00a      	b.n	8006424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b80      	cmp	r3, #128	@ 0x80
 8006412:	d102      	bne.n	800641a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006414:	2302      	movs	r3, #2
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	e004      	b.n	8006424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b70      	cmp	r3, #112	@ 0x70
 800641e:	d101      	bne.n	8006424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006420:	2301      	movs	r3, #1
 8006422:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006424:	4b0b      	ldr	r3, [pc, #44]	@ (8006454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f023 0207 	bic.w	r2, r3, #7
 800642c:	4909      	ldr	r1, [pc, #36]	@ (8006454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006434:	4b07      	ldr	r3, [pc, #28]	@ (8006454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	429a      	cmp	r2, r3
 8006440:	d001      	beq.n	8006446 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e000      	b.n	8006448 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	40021000 	.word	0x40021000
 8006454:	40022000 	.word	0x40022000

08006458 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006460:	2300      	movs	r3, #0
 8006462:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006464:	2300      	movs	r3, #0
 8006466:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006470:	2b00      	cmp	r3, #0
 8006472:	d031      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006478:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800647c:	d01a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800647e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006482:	d814      	bhi.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006484:	2b00      	cmp	r3, #0
 8006486:	d009      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006488:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800648c:	d10f      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800648e:	4b5d      	ldr	r3, [pc, #372]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	4a5c      	ldr	r2, [pc, #368]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006498:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800649a:	e00c      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3304      	adds	r3, #4
 80064a0:	2100      	movs	r1, #0
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fa44 	bl	8006930 <RCCEx_PLLSAI1_Config>
 80064a8:	4603      	mov	r3, r0
 80064aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064ac:	e003      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	74fb      	strb	r3, [r7, #19]
      break;
 80064b2:	e000      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80064b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064b6:	7cfb      	ldrb	r3, [r7, #19]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10b      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064bc:	4b51      	ldr	r3, [pc, #324]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ca:	494e      	ldr	r1, [pc, #312]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80064d2:	e001      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d4:	7cfb      	ldrb	r3, [r7, #19]
 80064d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 809e 	beq.w	8006622 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064e6:	2300      	movs	r3, #0
 80064e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80064ea:	4b46      	ldr	r3, [pc, #280]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80064fa:	2300      	movs	r3, #0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00d      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006500:	4b40      	ldr	r3, [pc, #256]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006504:	4a3f      	ldr	r2, [pc, #252]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006506:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800650a:	6593      	str	r3, [r2, #88]	@ 0x58
 800650c:	4b3d      	ldr	r3, [pc, #244]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800650e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006514:	60bb      	str	r3, [r7, #8]
 8006516:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006518:	2301      	movs	r3, #1
 800651a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800651c:	4b3a      	ldr	r3, [pc, #232]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a39      	ldr	r2, [pc, #228]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006526:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006528:	f7fc fa1a 	bl	8002960 <HAL_GetTick>
 800652c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800652e:	e009      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006530:	f7fc fa16 	bl	8002960 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d902      	bls.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	74fb      	strb	r3, [r7, #19]
        break;
 8006542:	e005      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006544:	4b30      	ldr	r3, [pc, #192]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0ef      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006550:	7cfb      	ldrb	r3, [r7, #19]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d15a      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006556:	4b2b      	ldr	r3, [pc, #172]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800655c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006560:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01e      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	429a      	cmp	r2, r3
 8006570:	d019      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006572:	4b24      	ldr	r3, [pc, #144]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800657c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800657e:	4b21      	ldr	r3, [pc, #132]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006584:	4a1f      	ldr	r2, [pc, #124]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800658a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800658e:	4b1d      	ldr	r3, [pc, #116]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006594:	4a1b      	ldr	r2, [pc, #108]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800659a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800659e:	4a19      	ldr	r2, [pc, #100]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d016      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b0:	f7fc f9d6 	bl	8002960 <HAL_GetTick>
 80065b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065b6:	e00b      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065b8:	f7fc f9d2 	bl	8002960 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d902      	bls.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	74fb      	strb	r3, [r7, #19]
            break;
 80065ce:	e006      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0ec      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80065de:	7cfb      	ldrb	r3, [r7, #19]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10b      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065e4:	4b07      	ldr	r3, [pc, #28]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065f2:	4904      	ldr	r1, [pc, #16]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80065fa:	e009      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065fc:	7cfb      	ldrb	r3, [r7, #19]
 80065fe:	74bb      	strb	r3, [r7, #18]
 8006600:	e006      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006602:	bf00      	nop
 8006604:	40021000 	.word	0x40021000
 8006608:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660c:	7cfb      	ldrb	r3, [r7, #19]
 800660e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006610:	7c7b      	ldrb	r3, [r7, #17]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d105      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006616:	4b9e      	ldr	r3, [pc, #632]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661a:	4a9d      	ldr	r2, [pc, #628]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800661c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006620:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800662e:	4b98      	ldr	r3, [pc, #608]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006634:	f023 0203 	bic.w	r2, r3, #3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	4994      	ldr	r1, [pc, #592]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800663e:	4313      	orrs	r3, r2
 8006640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006650:	4b8f      	ldr	r3, [pc, #572]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006656:	f023 020c 	bic.w	r2, r3, #12
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665e:	498c      	ldr	r1, [pc, #560]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006660:	4313      	orrs	r3, r2
 8006662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006672:	4b87      	ldr	r3, [pc, #540]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006678:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006680:	4983      	ldr	r1, [pc, #524]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006694:	4b7e      	ldr	r3, [pc, #504]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a2:	497b      	ldr	r1, [pc, #492]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066b6:	4b76      	ldr	r3, [pc, #472]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066bc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c4:	4972      	ldr	r1, [pc, #456]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00a      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066d8:	4b6d      	ldr	r3, [pc, #436]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80066da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066de:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e6:	496a      	ldr	r1, [pc, #424]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066fa:	4b65      	ldr	r3, [pc, #404]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006700:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006708:	4961      	ldr	r1, [pc, #388]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800670a:	4313      	orrs	r3, r2
 800670c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00a      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800671c:	4b5c      	ldr	r3, [pc, #368]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800671e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006722:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800672a:	4959      	ldr	r1, [pc, #356]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800673e:	4b54      	ldr	r3, [pc, #336]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006744:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674c:	4950      	ldr	r1, [pc, #320]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800674e:	4313      	orrs	r3, r2
 8006750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00a      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006760:	4b4b      	ldr	r3, [pc, #300]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006766:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676e:	4948      	ldr	r1, [pc, #288]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006770:	4313      	orrs	r3, r2
 8006772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006782:	4b43      	ldr	r3, [pc, #268]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006784:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006788:	f023 0203 	bic.w	r2, r3, #3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006790:	493f      	ldr	r1, [pc, #252]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006792:	4313      	orrs	r3, r2
 8006794:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d028      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067a4:	4b3a      	ldr	r3, [pc, #232]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80067a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067b2:	4937      	ldr	r1, [pc, #220]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067c2:	d106      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067c4:	4b32      	ldr	r3, [pc, #200]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	4a31      	ldr	r2, [pc, #196]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80067ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067ce:	60d3      	str	r3, [r2, #12]
 80067d0:	e011      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067da:	d10c      	bne.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3304      	adds	r3, #4
 80067e0:	2101      	movs	r1, #1
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f8a4 	bl	8006930 <RCCEx_PLLSAI1_Config>
 80067e8:	4603      	mov	r3, r0
 80067ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80067ec:	7cfb      	ldrb	r3, [r7, #19]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80067f2:	7cfb      	ldrb	r3, [r7, #19]
 80067f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d028      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006802:	4b23      	ldr	r3, [pc, #140]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006808:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006810:	491f      	ldr	r1, [pc, #124]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006812:	4313      	orrs	r3, r2
 8006814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006820:	d106      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006822:	4b1b      	ldr	r3, [pc, #108]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	4a1a      	ldr	r2, [pc, #104]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006828:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800682c:	60d3      	str	r3, [r2, #12]
 800682e:	e011      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006834:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006838:	d10c      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3304      	adds	r3, #4
 800683e:	2101      	movs	r1, #1
 8006840:	4618      	mov	r0, r3
 8006842:	f000 f875 	bl	8006930 <RCCEx_PLLSAI1_Config>
 8006846:	4603      	mov	r3, r0
 8006848:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800684a:	7cfb      	ldrb	r3, [r7, #19]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8006850:	7cfb      	ldrb	r3, [r7, #19]
 8006852:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d02b      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006860:	4b0b      	ldr	r3, [pc, #44]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006866:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800686e:	4908      	ldr	r1, [pc, #32]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800687a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800687e:	d109      	bne.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006880:	4b03      	ldr	r3, [pc, #12]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	4a02      	ldr	r2, [pc, #8]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800688a:	60d3      	str	r3, [r2, #12]
 800688c:	e014      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800688e:	bf00      	nop
 8006890:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006898:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800689c:	d10c      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3304      	adds	r3, #4
 80068a2:	2101      	movs	r1, #1
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 f843 	bl	8006930 <RCCEx_PLLSAI1_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068ae:	7cfb      	ldrb	r3, [r7, #19]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80068b4:	7cfb      	ldrb	r3, [r7, #19]
 80068b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d01c      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068c4:	4b19      	ldr	r3, [pc, #100]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80068c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d2:	4916      	ldr	r1, [pc, #88]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068e2:	d10c      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3304      	adds	r3, #4
 80068e8:	2102      	movs	r1, #2
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 f820 	bl	8006930 <RCCEx_PLLSAI1_Config>
 80068f0:	4603      	mov	r3, r0
 80068f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068f4:	7cfb      	ldrb	r3, [r7, #19]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80068fa:	7cfb      	ldrb	r3, [r7, #19]
 80068fc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800690a:	4b08      	ldr	r3, [pc, #32]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006910:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006918:	4904      	ldr	r1, [pc, #16]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006920:	7cbb      	ldrb	r3, [r7, #18]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40021000 	.word	0x40021000

08006930 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800693e:	4b74      	ldr	r3, [pc, #464]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d018      	beq.n	800697c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800694a:	4b71      	ldr	r3, [pc, #452]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f003 0203 	and.w	r2, r3, #3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d10d      	bne.n	8006976 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
       ||
 800695e:	2b00      	cmp	r3, #0
 8006960:	d009      	beq.n	8006976 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006962:	4b6b      	ldr	r3, [pc, #428]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	091b      	lsrs	r3, r3, #4
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
       ||
 8006972:	429a      	cmp	r2, r3
 8006974:	d047      	beq.n	8006a06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	73fb      	strb	r3, [r7, #15]
 800697a:	e044      	b.n	8006a06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b03      	cmp	r3, #3
 8006982:	d018      	beq.n	80069b6 <RCCEx_PLLSAI1_Config+0x86>
 8006984:	2b03      	cmp	r3, #3
 8006986:	d825      	bhi.n	80069d4 <RCCEx_PLLSAI1_Config+0xa4>
 8006988:	2b01      	cmp	r3, #1
 800698a:	d002      	beq.n	8006992 <RCCEx_PLLSAI1_Config+0x62>
 800698c:	2b02      	cmp	r3, #2
 800698e:	d009      	beq.n	80069a4 <RCCEx_PLLSAI1_Config+0x74>
 8006990:	e020      	b.n	80069d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006992:	4b5f      	ldr	r3, [pc, #380]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d11d      	bne.n	80069da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069a2:	e01a      	b.n	80069da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069a4:	4b5a      	ldr	r3, [pc, #360]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d116      	bne.n	80069de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069b4:	e013      	b.n	80069de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069b6:	4b56      	ldr	r3, [pc, #344]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10f      	bne.n	80069e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069c2:	4b53      	ldr	r3, [pc, #332]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069d2:	e006      	b.n	80069e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
      break;
 80069d8:	e004      	b.n	80069e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069da:	bf00      	nop
 80069dc:	e002      	b.n	80069e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069de:	bf00      	nop
 80069e0:	e000      	b.n	80069e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10d      	bne.n	8006a06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80069ea:	4b49      	ldr	r3, [pc, #292]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6819      	ldr	r1, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	430b      	orrs	r3, r1
 8006a00:	4943      	ldr	r1, [pc, #268]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d17c      	bne.n	8006b06 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006a0c:	4b40      	ldr	r3, [pc, #256]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a3f      	ldr	r2, [pc, #252]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a18:	f7fb ffa2 	bl	8002960 <HAL_GetTick>
 8006a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a1e:	e009      	b.n	8006a34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a20:	f7fb ff9e 	bl	8002960 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d902      	bls.n	8006a34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	73fb      	strb	r3, [r7, #15]
        break;
 8006a32:	e005      	b.n	8006a40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a34:	4b36      	ldr	r3, [pc, #216]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1ef      	bne.n	8006a20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d15f      	bne.n	8006b06 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d110      	bne.n	8006a6e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a4c:	4b30      	ldr	r3, [pc, #192]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006a54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6892      	ldr	r2, [r2, #8]
 8006a5c:	0211      	lsls	r1, r2, #8
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	68d2      	ldr	r2, [r2, #12]
 8006a62:	06d2      	lsls	r2, r2, #27
 8006a64:	430a      	orrs	r2, r1
 8006a66:	492a      	ldr	r1, [pc, #168]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	610b      	str	r3, [r1, #16]
 8006a6c:	e027      	b.n	8006abe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d112      	bne.n	8006a9a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a74:	4b26      	ldr	r3, [pc, #152]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006a7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6892      	ldr	r2, [r2, #8]
 8006a84:	0211      	lsls	r1, r2, #8
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6912      	ldr	r2, [r2, #16]
 8006a8a:	0852      	lsrs	r2, r2, #1
 8006a8c:	3a01      	subs	r2, #1
 8006a8e:	0552      	lsls	r2, r2, #21
 8006a90:	430a      	orrs	r2, r1
 8006a92:	491f      	ldr	r1, [pc, #124]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	610b      	str	r3, [r1, #16]
 8006a98:	e011      	b.n	8006abe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006aa2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6892      	ldr	r2, [r2, #8]
 8006aaa:	0211      	lsls	r1, r2, #8
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6952      	ldr	r2, [r2, #20]
 8006ab0:	0852      	lsrs	r2, r2, #1
 8006ab2:	3a01      	subs	r2, #1
 8006ab4:	0652      	lsls	r2, r2, #25
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	4915      	ldr	r1, [pc, #84]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006abe:	4b14      	ldr	r3, [pc, #80]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a13      	ldr	r2, [pc, #76]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ac4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ac8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aca:	f7fb ff49 	bl	8002960 <HAL_GetTick>
 8006ace:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ad0:	e009      	b.n	8006ae6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ad2:	f7fb ff45 	bl	8002960 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d902      	bls.n	8006ae6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	73fb      	strb	r3, [r7, #15]
          break;
 8006ae4:	e005      	b.n	8006af2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0ef      	beq.n	8006ad2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d106      	bne.n	8006b06 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006af8:	4b05      	ldr	r3, [pc, #20]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	4903      	ldr	r1, [pc, #12]	@ (8006b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	40021000 	.word	0x40021000

08006b14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e095      	b.n	8006c52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d108      	bne.n	8006b40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b36:	d009      	beq.n	8006b4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	61da      	str	r2, [r3, #28]
 8006b3e:	e005      	b.n	8006b4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fb fcfe 	bl	8002568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b8c:	d902      	bls.n	8006b94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	e002      	b.n	8006b9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006ba2:	d007      	beq.n	8006bb4 <HAL_SPI_Init+0xa0>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bac:	d002      	beq.n	8006bb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf6:	ea42 0103 	orr.w	r1, r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	0c1b      	lsrs	r3, r3, #16
 8006c10:	f003 0204 	and.w	r2, r3, #4
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c18:	f003 0310 	and.w	r3, r3, #16
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c22:	f003 0308 	and.w	r3, r3, #8
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c30:	ea42 0103 	orr.w	r1, r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b088      	sub	sp, #32
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	603b      	str	r3, [r7, #0]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c6a:	f7fb fe79 	bl	8002960 <HAL_GetTick>
 8006c6e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006c70:	88fb      	ldrh	r3, [r7, #6]
 8006c72:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d001      	beq.n	8006c84 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006c80:	2302      	movs	r3, #2
 8006c82:	e15c      	b.n	8006f3e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <HAL_SPI_Transmit+0x36>
 8006c8a:	88fb      	ldrh	r3, [r7, #6]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e154      	b.n	8006f3e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d101      	bne.n	8006ca2 <HAL_SPI_Transmit+0x48>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	e14d      	b.n	8006f3e <HAL_SPI_Transmit+0x2e4>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2203      	movs	r2, #3
 8006cae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	88fa      	ldrh	r2, [r7, #6]
 8006cc2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	88fa      	ldrh	r2, [r7, #6]
 8006cc8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cf4:	d10f      	bne.n	8006d16 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d20:	2b40      	cmp	r3, #64	@ 0x40
 8006d22:	d007      	beq.n	8006d34 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d3c:	d952      	bls.n	8006de4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <HAL_SPI_Transmit+0xf2>
 8006d46:	8b7b      	ldrh	r3, [r7, #26]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d145      	bne.n	8006dd8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d50:	881a      	ldrh	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5c:	1c9a      	adds	r2, r3, #2
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d70:	e032      	b.n	8006dd8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d112      	bne.n	8006da6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	881a      	ldrh	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d90:	1c9a      	adds	r2, r3, #2
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006da4:	e018      	b.n	8006dd8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006da6:	f7fb fddb 	bl	8002960 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d803      	bhi.n	8006dbe <HAL_SPI_Transmit+0x164>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dbc:	d102      	bne.n	8006dc4 <HAL_SPI_Transmit+0x16a>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d109      	bne.n	8006dd8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e0b2      	b.n	8006f3e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1c7      	bne.n	8006d72 <HAL_SPI_Transmit+0x118>
 8006de2:	e083      	b.n	8006eec <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <HAL_SPI_Transmit+0x198>
 8006dec:	8b7b      	ldrh	r3, [r7, #26]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d177      	bne.n	8006ee2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d912      	bls.n	8006e22 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e00:	881a      	ldrh	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0c:	1c9a      	adds	r2, r3, #2
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b02      	subs	r3, #2
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e20:	e05f      	b.n	8006ee2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	330c      	adds	r3, #12
 8006e2c:	7812      	ldrb	r2, [r2, #0]
 8006e2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006e48:	e04b      	b.n	8006ee2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d12b      	bne.n	8006eb0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d912      	bls.n	8006e88 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e66:	881a      	ldrh	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	1c9a      	adds	r2, r3, #2
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b02      	subs	r3, #2
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e86:	e02c      	b.n	8006ee2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	330c      	adds	r3, #12
 8006e92:	7812      	ldrb	r2, [r2, #0]
 8006e94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006eae:	e018      	b.n	8006ee2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eb0:	f7fb fd56 	bl	8002960 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d803      	bhi.n	8006ec8 <HAL_SPI_Transmit+0x26e>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec6:	d102      	bne.n	8006ece <HAL_SPI_Transmit+0x274>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d109      	bne.n	8006ee2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e02d      	b.n	8006f3e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1ae      	bne.n	8006e4a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 fb65 	bl	80075c0 <SPI_EndRxTxTransaction>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2220      	movs	r2, #32
 8006f00:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10a      	bne.n	8006f20 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	617b      	str	r3, [r7, #20]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
  }
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3720      	adds	r7, #32
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b08a      	sub	sp, #40	@ 0x28
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	607a      	str	r2, [r7, #4]
 8006f52:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f54:	2301      	movs	r3, #1
 8006f56:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f58:	f7fb fd02 	bl	8002960 <HAL_GetTick>
 8006f5c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f64:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006f6c:	887b      	ldrh	r3, [r7, #2]
 8006f6e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006f70:	887b      	ldrh	r3, [r7, #2]
 8006f72:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f74:	7ffb      	ldrb	r3, [r7, #31]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d00c      	beq.n	8006f94 <HAL_SPI_TransmitReceive+0x4e>
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f80:	d106      	bne.n	8006f90 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d102      	bne.n	8006f90 <HAL_SPI_TransmitReceive+0x4a>
 8006f8a:	7ffb      	ldrb	r3, [r7, #31]
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	d001      	beq.n	8006f94 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006f90:	2302      	movs	r3, #2
 8006f92:	e1f3      	b.n	800737c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d005      	beq.n	8006fa6 <HAL_SPI_TransmitReceive+0x60>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <HAL_SPI_TransmitReceive+0x60>
 8006fa0:	887b      	ldrh	r3, [r7, #2]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e1e8      	b.n	800737c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_SPI_TransmitReceive+0x72>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e1e1      	b.n	800737c <HAL_SPI_TransmitReceive+0x436>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d003      	beq.n	8006fd4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2205      	movs	r2, #5
 8006fd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	887a      	ldrh	r2, [r7, #2]
 8006fe4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	887a      	ldrh	r2, [r7, #2]
 8006fec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	887a      	ldrh	r2, [r7, #2]
 8006ffa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	887a      	ldrh	r2, [r7, #2]
 8007000:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007016:	d802      	bhi.n	800701e <HAL_SPI_TransmitReceive+0xd8>
 8007018:	8abb      	ldrh	r3, [r7, #20]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d908      	bls.n	8007030 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800702c:	605a      	str	r2, [r3, #4]
 800702e:	e007      	b.n	8007040 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800703e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704a:	2b40      	cmp	r3, #64	@ 0x40
 800704c:	d007      	beq.n	800705e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800705c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007066:	f240 8083 	bls.w	8007170 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <HAL_SPI_TransmitReceive+0x132>
 8007072:	8afb      	ldrh	r3, [r7, #22]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d16f      	bne.n	8007158 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707c:	881a      	ldrh	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007088:	1c9a      	adds	r2, r3, #2
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800709c:	e05c      	b.n	8007158 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d11b      	bne.n	80070e4 <HAL_SPI_TransmitReceive+0x19e>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d016      	beq.n	80070e4 <HAL_SPI_TransmitReceive+0x19e>
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d113      	bne.n	80070e4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c0:	881a      	ldrh	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070cc:	1c9a      	adds	r2, r3, #2
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	3b01      	subs	r3, #1
 80070da:	b29a      	uxth	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d11c      	bne.n	800712c <HAL_SPI_TransmitReceive+0x1e6>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d016      	beq.n	800712c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68da      	ldr	r2, [r3, #12]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007108:	b292      	uxth	r2, r2
 800710a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007110:	1c9a      	adds	r2, r3, #2
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	b29a      	uxth	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007128:	2301      	movs	r3, #1
 800712a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800712c:	f7fb fc18 	bl	8002960 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007138:	429a      	cmp	r2, r3
 800713a:	d80d      	bhi.n	8007158 <HAL_SPI_TransmitReceive+0x212>
 800713c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007142:	d009      	beq.n	8007158 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e111      	b.n	800737c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800715c:	b29b      	uxth	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d19d      	bne.n	800709e <HAL_SPI_TransmitReceive+0x158>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d197      	bne.n	800709e <HAL_SPI_TransmitReceive+0x158>
 800716e:	e0e5      	b.n	800733c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <HAL_SPI_TransmitReceive+0x23a>
 8007178:	8afb      	ldrh	r3, [r7, #22]
 800717a:	2b01      	cmp	r3, #1
 800717c:	f040 80d1 	bne.w	8007322 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b01      	cmp	r3, #1
 8007188:	d912      	bls.n	80071b0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718e:	881a      	ldrh	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719a:	1c9a      	adds	r2, r3, #2
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b02      	subs	r3, #2
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071ae:	e0b8      	b.n	8007322 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	7812      	ldrb	r2, [r2, #0]
 80071bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071d6:	e0a4      	b.n	8007322 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d134      	bne.n	8007250 <HAL_SPI_TransmitReceive+0x30a>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d02f      	beq.n	8007250 <HAL_SPI_TransmitReceive+0x30a>
 80071f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d12c      	bne.n	8007250 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d912      	bls.n	8007226 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007204:	881a      	ldrh	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007210:	1c9a      	adds	r2, r3, #2
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800721a:	b29b      	uxth	r3, r3
 800721c:	3b02      	subs	r3, #2
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007224:	e012      	b.n	800724c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	330c      	adds	r3, #12
 8007230:	7812      	ldrb	r2, [r2, #0]
 8007232:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007242:	b29b      	uxth	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	b29a      	uxth	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b01      	cmp	r3, #1
 800725c:	d148      	bne.n	80072f0 <HAL_SPI_TransmitReceive+0x3aa>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d042      	beq.n	80072f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007270:	b29b      	uxth	r3, r3
 8007272:	2b01      	cmp	r3, #1
 8007274:	d923      	bls.n	80072be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007280:	b292      	uxth	r2, r2
 8007282:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007288:	1c9a      	adds	r2, r3, #2
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007294:	b29b      	uxth	r3, r3
 8007296:	3b02      	subs	r3, #2
 8007298:	b29a      	uxth	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d81f      	bhi.n	80072ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072ba:	605a      	str	r2, [r3, #4]
 80072bc:	e016      	b.n	80072ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f103 020c 	add.w	r2, r3, #12
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ca:	7812      	ldrb	r2, [r2, #0]
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072ec:	2301      	movs	r3, #1
 80072ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072f0:	f7fb fb36 	bl	8002960 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d803      	bhi.n	8007308 <HAL_SPI_TransmitReceive+0x3c2>
 8007300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007306:	d102      	bne.n	800730e <HAL_SPI_TransmitReceive+0x3c8>
 8007308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730a:	2b00      	cmp	r3, #0
 800730c:	d109      	bne.n	8007322 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e02c      	b.n	800737c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007326:	b29b      	uxth	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	f47f af55 	bne.w	80071d8 <HAL_SPI_TransmitReceive+0x292>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007334:	b29b      	uxth	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	f47f af4e 	bne.w	80071d8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800733c:	6a3a      	ldr	r2, [r7, #32]
 800733e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 f93d 	bl	80075c0 <SPI_EndRxTxTransaction>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d008      	beq.n	800735e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2220      	movs	r2, #32
 8007350:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e00e      	b.n	800737c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800737a:	2300      	movs	r3, #0
  }
}
 800737c:	4618      	mov	r0, r3
 800737e:	3728      	adds	r7, #40	@ 0x28
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b088      	sub	sp, #32
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	4613      	mov	r3, r2
 8007392:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007394:	f7fb fae4 	bl	8002960 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739c:	1a9b      	subs	r3, r3, r2
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	4413      	add	r3, r2
 80073a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073a4:	f7fb fadc 	bl	8002960 <HAL_GetTick>
 80073a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073aa:	4b39      	ldr	r3, [pc, #228]	@ (8007490 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	015b      	lsls	r3, r3, #5
 80073b0:	0d1b      	lsrs	r3, r3, #20
 80073b2:	69fa      	ldr	r2, [r7, #28]
 80073b4:	fb02 f303 	mul.w	r3, r2, r3
 80073b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073ba:	e054      	b.n	8007466 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c2:	d050      	beq.n	8007466 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073c4:	f7fb facc 	bl	8002960 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	69fa      	ldr	r2, [r7, #28]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d902      	bls.n	80073da <SPI_WaitFlagStateUntilTimeout+0x56>
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d13d      	bne.n	8007456 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80073e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073f2:	d111      	bne.n	8007418 <SPI_WaitFlagStateUntilTimeout+0x94>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073fc:	d004      	beq.n	8007408 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007406:	d107      	bne.n	8007418 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007416:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007420:	d10f      	bne.n	8007442 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007440:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e017      	b.n	8007486 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	3b01      	subs	r3, #1
 8007464:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4013      	ands	r3, r2
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	429a      	cmp	r2, r3
 8007474:	bf0c      	ite	eq
 8007476:	2301      	moveq	r3, #1
 8007478:	2300      	movne	r3, #0
 800747a:	b2db      	uxtb	r3, r3
 800747c:	461a      	mov	r2, r3
 800747e:	79fb      	ldrb	r3, [r7, #7]
 8007480:	429a      	cmp	r2, r3
 8007482:	d19b      	bne.n	80073bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3720      	adds	r7, #32
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20000000 	.word	0x20000000

08007494 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b08a      	sub	sp, #40	@ 0x28
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80074a6:	f7fb fa5b 	bl	8002960 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ae:	1a9b      	subs	r3, r3, r2
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	4413      	add	r3, r2
 80074b4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80074b6:	f7fb fa53 	bl	8002960 <HAL_GetTick>
 80074ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	330c      	adds	r3, #12
 80074c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80074c4:	4b3d      	ldr	r3, [pc, #244]	@ (80075bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	4613      	mov	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	00da      	lsls	r2, r3, #3
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	0d1b      	lsrs	r3, r3, #20
 80074d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d6:	fb02 f303 	mul.w	r3, r2, r3
 80074da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80074dc:	e060      	b.n	80075a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80074e4:	d107      	bne.n	80074f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d104      	bne.n	80074f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fc:	d050      	beq.n	80075a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074fe:	f7fb fa2f 	bl	8002960 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800750a:	429a      	cmp	r2, r3
 800750c:	d902      	bls.n	8007514 <SPI_WaitFifoStateUntilTimeout+0x80>
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	2b00      	cmp	r3, #0
 8007512:	d13d      	bne.n	8007590 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007522:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800752c:	d111      	bne.n	8007552 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007536:	d004      	beq.n	8007542 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007540:	d107      	bne.n	8007552 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007550:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800755a:	d10f      	bne.n	800757c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800757a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e010      	b.n	80075b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	3b01      	subs	r3, #1
 800759e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	4013      	ands	r3, r2
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d196      	bne.n	80074de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3728      	adds	r7, #40	@ 0x28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	20000000 	.word	0x20000000

080075c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f7ff ff5b 	bl	8007494 <SPI_WaitFifoStateUntilTimeout>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d007      	beq.n	80075f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075e8:	f043 0220 	orr.w	r2, r3, #32
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e027      	b.n	8007644 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2200      	movs	r2, #0
 80075fc:	2180      	movs	r1, #128	@ 0x80
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff fec0 	bl	8007384 <SPI_WaitFlagStateUntilTimeout>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d007      	beq.n	800761a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800760e:	f043 0220 	orr.w	r2, r3, #32
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e014      	b.n	8007644 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2200      	movs	r2, #0
 8007622:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f7ff ff34 	bl	8007494 <SPI_WaitFifoStateUntilTimeout>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d007      	beq.n	8007642 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007636:	f043 0220 	orr.w	r2, r3, #32
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e000      	b.n	8007644 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e049      	b.n	80076f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d106      	bne.n	8007678 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fa ffbc 	bl	80025f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3304      	adds	r3, #4
 8007688:	4619      	mov	r1, r3
 800768a:	4610      	mov	r0, r2
 800768c:	f000 fab8 	bl	8007c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d109      	bne.n	8007720 <HAL_TIM_PWM_Start+0x24>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b01      	cmp	r3, #1
 8007716:	bf14      	ite	ne
 8007718:	2301      	movne	r3, #1
 800771a:	2300      	moveq	r3, #0
 800771c:	b2db      	uxtb	r3, r3
 800771e:	e03c      	b.n	800779a <HAL_TIM_PWM_Start+0x9e>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b04      	cmp	r3, #4
 8007724:	d109      	bne.n	800773a <HAL_TIM_PWM_Start+0x3e>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b01      	cmp	r3, #1
 8007730:	bf14      	ite	ne
 8007732:	2301      	movne	r3, #1
 8007734:	2300      	moveq	r3, #0
 8007736:	b2db      	uxtb	r3, r3
 8007738:	e02f      	b.n	800779a <HAL_TIM_PWM_Start+0x9e>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b08      	cmp	r3, #8
 800773e:	d109      	bne.n	8007754 <HAL_TIM_PWM_Start+0x58>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b01      	cmp	r3, #1
 800774a:	bf14      	ite	ne
 800774c:	2301      	movne	r3, #1
 800774e:	2300      	moveq	r3, #0
 8007750:	b2db      	uxtb	r3, r3
 8007752:	e022      	b.n	800779a <HAL_TIM_PWM_Start+0x9e>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b0c      	cmp	r3, #12
 8007758:	d109      	bne.n	800776e <HAL_TIM_PWM_Start+0x72>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b01      	cmp	r3, #1
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	e015      	b.n	800779a <HAL_TIM_PWM_Start+0x9e>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b10      	cmp	r3, #16
 8007772:	d109      	bne.n	8007788 <HAL_TIM_PWM_Start+0x8c>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b01      	cmp	r3, #1
 800777e:	bf14      	ite	ne
 8007780:	2301      	movne	r3, #1
 8007782:	2300      	moveq	r3, #0
 8007784:	b2db      	uxtb	r3, r3
 8007786:	e008      	b.n	800779a <HAL_TIM_PWM_Start+0x9e>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	bf14      	ite	ne
 8007794:	2301      	movne	r3, #1
 8007796:	2300      	moveq	r3, #0
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e083      	b.n	80078aa <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d104      	bne.n	80077b2 <HAL_TIM_PWM_Start+0xb6>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077b0:	e023      	b.n	80077fa <HAL_TIM_PWM_Start+0xfe>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	d104      	bne.n	80077c2 <HAL_TIM_PWM_Start+0xc6>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077c0:	e01b      	b.n	80077fa <HAL_TIM_PWM_Start+0xfe>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	d104      	bne.n	80077d2 <HAL_TIM_PWM_Start+0xd6>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077d0:	e013      	b.n	80077fa <HAL_TIM_PWM_Start+0xfe>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b0c      	cmp	r3, #12
 80077d6:	d104      	bne.n	80077e2 <HAL_TIM_PWM_Start+0xe6>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077e0:	e00b      	b.n	80077fa <HAL_TIM_PWM_Start+0xfe>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b10      	cmp	r3, #16
 80077e6:	d104      	bne.n	80077f2 <HAL_TIM_PWM_Start+0xf6>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077f0:	e003      	b.n	80077fa <HAL_TIM_PWM_Start+0xfe>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2202      	movs	r2, #2
 80077f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2201      	movs	r2, #1
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fcf4 	bl	80081f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a29      	ldr	r2, [pc, #164]	@ (80078b4 <HAL_TIM_PWM_Start+0x1b8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d009      	beq.n	8007826 <HAL_TIM_PWM_Start+0x12a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a28      	ldr	r2, [pc, #160]	@ (80078b8 <HAL_TIM_PWM_Start+0x1bc>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d004      	beq.n	8007826 <HAL_TIM_PWM_Start+0x12a>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a26      	ldr	r2, [pc, #152]	@ (80078bc <HAL_TIM_PWM_Start+0x1c0>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d101      	bne.n	800782a <HAL_TIM_PWM_Start+0x12e>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <HAL_TIM_PWM_Start+0x130>
 800782a:	2300      	movs	r3, #0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d007      	beq.n	8007840 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800783e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a1b      	ldr	r2, [pc, #108]	@ (80078b4 <HAL_TIM_PWM_Start+0x1b8>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d00e      	beq.n	8007868 <HAL_TIM_PWM_Start+0x16c>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007852:	d009      	beq.n	8007868 <HAL_TIM_PWM_Start+0x16c>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a19      	ldr	r2, [pc, #100]	@ (80078c0 <HAL_TIM_PWM_Start+0x1c4>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d004      	beq.n	8007868 <HAL_TIM_PWM_Start+0x16c>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a15      	ldr	r2, [pc, #84]	@ (80078b8 <HAL_TIM_PWM_Start+0x1bc>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d115      	bne.n	8007894 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	4b15      	ldr	r3, [pc, #84]	@ (80078c4 <HAL_TIM_PWM_Start+0x1c8>)
 8007870:	4013      	ands	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2b06      	cmp	r3, #6
 8007878:	d015      	beq.n	80078a6 <HAL_TIM_PWM_Start+0x1aa>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007880:	d011      	beq.n	80078a6 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f042 0201 	orr.w	r2, r2, #1
 8007890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007892:	e008      	b.n	80078a6 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0201 	orr.w	r2, r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	e000      	b.n	80078a8 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	40012c00 	.word	0x40012c00
 80078b8:	40014000 	.word	0x40014000
 80078bc:	40014400 	.word	0x40014400
 80078c0:	40000400 	.word	0x40000400
 80078c4:	00010007 	.word	0x00010007

080078c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2200      	movs	r2, #0
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 fc88 	bl	80081f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a39      	ldr	r2, [pc, #228]	@ (80079cc <HAL_TIM_PWM_Stop+0x104>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d009      	beq.n	80078fe <HAL_TIM_PWM_Stop+0x36>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a38      	ldr	r2, [pc, #224]	@ (80079d0 <HAL_TIM_PWM_Stop+0x108>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d004      	beq.n	80078fe <HAL_TIM_PWM_Stop+0x36>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a36      	ldr	r2, [pc, #216]	@ (80079d4 <HAL_TIM_PWM_Stop+0x10c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d101      	bne.n	8007902 <HAL_TIM_PWM_Stop+0x3a>
 80078fe:	2301      	movs	r3, #1
 8007900:	e000      	b.n	8007904 <HAL_TIM_PWM_Stop+0x3c>
 8007902:	2300      	movs	r3, #0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d017      	beq.n	8007938 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6a1a      	ldr	r2, [r3, #32]
 800790e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007912:	4013      	ands	r3, r2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10f      	bne.n	8007938 <HAL_TIM_PWM_Stop+0x70>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6a1a      	ldr	r2, [r3, #32]
 800791e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007922:	4013      	ands	r3, r2
 8007924:	2b00      	cmp	r3, #0
 8007926:	d107      	bne.n	8007938 <HAL_TIM_PWM_Stop+0x70>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007936:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6a1a      	ldr	r2, [r3, #32]
 800793e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007942:	4013      	ands	r3, r2
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10f      	bne.n	8007968 <HAL_TIM_PWM_Stop+0xa0>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6a1a      	ldr	r2, [r3, #32]
 800794e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007952:	4013      	ands	r3, r2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d107      	bne.n	8007968 <HAL_TIM_PWM_Stop+0xa0>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 0201 	bic.w	r2, r2, #1
 8007966:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d104      	bne.n	8007978 <HAL_TIM_PWM_Stop+0xb0>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007976:	e023      	b.n	80079c0 <HAL_TIM_PWM_Stop+0xf8>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b04      	cmp	r3, #4
 800797c:	d104      	bne.n	8007988 <HAL_TIM_PWM_Stop+0xc0>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007986:	e01b      	b.n	80079c0 <HAL_TIM_PWM_Stop+0xf8>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b08      	cmp	r3, #8
 800798c:	d104      	bne.n	8007998 <HAL_TIM_PWM_Stop+0xd0>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007996:	e013      	b.n	80079c0 <HAL_TIM_PWM_Stop+0xf8>
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2b0c      	cmp	r3, #12
 800799c:	d104      	bne.n	80079a8 <HAL_TIM_PWM_Stop+0xe0>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079a6:	e00b      	b.n	80079c0 <HAL_TIM_PWM_Stop+0xf8>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b10      	cmp	r3, #16
 80079ac:	d104      	bne.n	80079b8 <HAL_TIM_PWM_Stop+0xf0>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079b6:	e003      	b.n	80079c0 <HAL_TIM_PWM_Stop+0xf8>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	40012c00 	.word	0x40012c00
 80079d0:	40014000 	.word	0x40014000
 80079d4:	40014400 	.word	0x40014400

080079d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d101      	bne.n	80079f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079f2:	2302      	movs	r3, #2
 80079f4:	e0ff      	b.n	8007bf6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b14      	cmp	r3, #20
 8007a02:	f200 80f0 	bhi.w	8007be6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a06:	a201      	add	r2, pc, #4	@ (adr r2, 8007a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a61 	.word	0x08007a61
 8007a10:	08007be7 	.word	0x08007be7
 8007a14:	08007be7 	.word	0x08007be7
 8007a18:	08007be7 	.word	0x08007be7
 8007a1c:	08007aa1 	.word	0x08007aa1
 8007a20:	08007be7 	.word	0x08007be7
 8007a24:	08007be7 	.word	0x08007be7
 8007a28:	08007be7 	.word	0x08007be7
 8007a2c:	08007ae3 	.word	0x08007ae3
 8007a30:	08007be7 	.word	0x08007be7
 8007a34:	08007be7 	.word	0x08007be7
 8007a38:	08007be7 	.word	0x08007be7
 8007a3c:	08007b23 	.word	0x08007b23
 8007a40:	08007be7 	.word	0x08007be7
 8007a44:	08007be7 	.word	0x08007be7
 8007a48:	08007be7 	.word	0x08007be7
 8007a4c:	08007b65 	.word	0x08007b65
 8007a50:	08007be7 	.word	0x08007be7
 8007a54:	08007be7 	.word	0x08007be7
 8007a58:	08007be7 	.word	0x08007be7
 8007a5c:	08007ba5 	.word	0x08007ba5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68b9      	ldr	r1, [r7, #8]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 f944 	bl	8007cf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0208 	orr.w	r2, r2, #8
 8007a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699a      	ldr	r2, [r3, #24]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0204 	bic.w	r2, r2, #4
 8007a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6999      	ldr	r1, [r3, #24]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	691a      	ldr	r2, [r3, #16]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	619a      	str	r2, [r3, #24]
      break;
 8007a9e:	e0a5      	b.n	8007bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68b9      	ldr	r1, [r7, #8]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 f9a0 	bl	8007dec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	699a      	ldr	r2, [r3, #24]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699a      	ldr	r2, [r3, #24]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6999      	ldr	r1, [r3, #24]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	021a      	lsls	r2, r3, #8
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	619a      	str	r2, [r3, #24]
      break;
 8007ae0:	e084      	b.n	8007bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 f9f9 	bl	8007ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	69da      	ldr	r2, [r3, #28]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f042 0208 	orr.w	r2, r2, #8
 8007afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	69da      	ldr	r2, [r3, #28]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0204 	bic.w	r2, r2, #4
 8007b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69d9      	ldr	r1, [r3, #28]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	61da      	str	r2, [r3, #28]
      break;
 8007b20:	e064      	b.n	8007bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fa51 	bl	8007fd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69da      	ldr	r2, [r3, #28]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	69da      	ldr	r2, [r3, #28]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69d9      	ldr	r1, [r3, #28]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	021a      	lsls	r2, r3, #8
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	61da      	str	r2, [r3, #28]
      break;
 8007b62:	e043      	b.n	8007bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68b9      	ldr	r1, [r7, #8]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fa8e 	bl	800808c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0208 	orr.w	r2, r2, #8
 8007b7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0204 	bic.w	r2, r2, #4
 8007b8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	691a      	ldr	r2, [r3, #16]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ba2:	e023      	b.n	8007bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68b9      	ldr	r1, [r7, #8]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fac6 	bl	800813c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bbe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	021a      	lsls	r2, r3, #8
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007be4:	e002      	b.n	8007bec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop

08007c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a34      	ldr	r2, [pc, #208]	@ (8007ce4 <TIM_Base_SetConfig+0xe4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d007      	beq.n	8007c28 <TIM_Base_SetConfig+0x28>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c1e:	d003      	beq.n	8007c28 <TIM_Base_SetConfig+0x28>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a31      	ldr	r2, [pc, #196]	@ (8007ce8 <TIM_Base_SetConfig+0xe8>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d108      	bne.n	8007c3a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a29      	ldr	r2, [pc, #164]	@ (8007ce4 <TIM_Base_SetConfig+0xe4>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d00f      	beq.n	8007c62 <TIM_Base_SetConfig+0x62>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c48:	d00b      	beq.n	8007c62 <TIM_Base_SetConfig+0x62>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a26      	ldr	r2, [pc, #152]	@ (8007ce8 <TIM_Base_SetConfig+0xe8>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d007      	beq.n	8007c62 <TIM_Base_SetConfig+0x62>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a25      	ldr	r2, [pc, #148]	@ (8007cec <TIM_Base_SetConfig+0xec>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d003      	beq.n	8007c62 <TIM_Base_SetConfig+0x62>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a24      	ldr	r2, [pc, #144]	@ (8007cf0 <TIM_Base_SetConfig+0xf0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d108      	bne.n	8007c74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a12      	ldr	r2, [pc, #72]	@ (8007ce4 <TIM_Base_SetConfig+0xe4>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d007      	beq.n	8007cb0 <TIM_Base_SetConfig+0xb0>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a12      	ldr	r2, [pc, #72]	@ (8007cec <TIM_Base_SetConfig+0xec>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d003      	beq.n	8007cb0 <TIM_Base_SetConfig+0xb0>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a11      	ldr	r2, [pc, #68]	@ (8007cf0 <TIM_Base_SetConfig+0xf0>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d103      	bne.n	8007cb8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	691a      	ldr	r2, [r3, #16]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d105      	bne.n	8007cd6 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f023 0201 	bic.w	r2, r3, #1
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	611a      	str	r2, [r3, #16]
  }
}
 8007cd6:	bf00      	nop
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	40012c00 	.word	0x40012c00
 8007ce8:	40000400 	.word	0x40000400
 8007cec:	40014000 	.word	0x40014000
 8007cf0:	40014400 	.word	0x40014400

08007cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	f023 0201 	bic.w	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 0303 	bic.w	r3, r3, #3
 8007d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f023 0302 	bic.w	r3, r3, #2
 8007d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a24      	ldr	r2, [pc, #144]	@ (8007de0 <TIM_OC1_SetConfig+0xec>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d007      	beq.n	8007d64 <TIM_OC1_SetConfig+0x70>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a23      	ldr	r2, [pc, #140]	@ (8007de4 <TIM_OC1_SetConfig+0xf0>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d003      	beq.n	8007d64 <TIM_OC1_SetConfig+0x70>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a22      	ldr	r2, [pc, #136]	@ (8007de8 <TIM_OC1_SetConfig+0xf4>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d10c      	bne.n	8007d7e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f023 0308 	bic.w	r3, r3, #8
 8007d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f023 0304 	bic.w	r3, r3, #4
 8007d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a17      	ldr	r2, [pc, #92]	@ (8007de0 <TIM_OC1_SetConfig+0xec>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d007      	beq.n	8007d96 <TIM_OC1_SetConfig+0xa2>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a16      	ldr	r2, [pc, #88]	@ (8007de4 <TIM_OC1_SetConfig+0xf0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d003      	beq.n	8007d96 <TIM_OC1_SetConfig+0xa2>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a15      	ldr	r2, [pc, #84]	@ (8007de8 <TIM_OC1_SetConfig+0xf4>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d111      	bne.n	8007dba <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	621a      	str	r2, [r3, #32]
}
 8007dd4:	bf00      	nop
 8007dd6:	371c      	adds	r7, #28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	40012c00 	.word	0x40012c00
 8007de4:	40014000 	.word	0x40014000
 8007de8:	40014400 	.word	0x40014400

08007dec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	f023 0210 	bic.w	r2, r3, #16
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	021b      	lsls	r3, r3, #8
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f023 0320 	bic.w	r3, r3, #32
 8007e3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	011b      	lsls	r3, r3, #4
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a22      	ldr	r2, [pc, #136]	@ (8007ed4 <TIM_OC2_SetConfig+0xe8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d10d      	bne.n	8007e6c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	011b      	lsls	r3, r3, #4
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a19      	ldr	r2, [pc, #100]	@ (8007ed4 <TIM_OC2_SetConfig+0xe8>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d007      	beq.n	8007e84 <TIM_OC2_SetConfig+0x98>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a18      	ldr	r2, [pc, #96]	@ (8007ed8 <TIM_OC2_SetConfig+0xec>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d003      	beq.n	8007e84 <TIM_OC2_SetConfig+0x98>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a17      	ldr	r2, [pc, #92]	@ (8007edc <TIM_OC2_SetConfig+0xf0>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d113      	bne.n	8007eac <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	621a      	str	r2, [r3, #32]
}
 8007ec6:	bf00      	nop
 8007ec8:	371c      	adds	r7, #28
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	40012c00 	.word	0x40012c00
 8007ed8:	40014000 	.word	0x40014000
 8007edc:	40014400 	.word	0x40014400

08007ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a1b      	ldr	r3, [r3, #32]
 8007ef4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 0303 	bic.w	r3, r3, #3
 8007f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	021b      	lsls	r3, r3, #8
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a21      	ldr	r2, [pc, #132]	@ (8007fc4 <TIM_OC3_SetConfig+0xe4>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d10d      	bne.n	8007f5e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	021b      	lsls	r3, r3, #8
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a18      	ldr	r2, [pc, #96]	@ (8007fc4 <TIM_OC3_SetConfig+0xe4>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d007      	beq.n	8007f76 <TIM_OC3_SetConfig+0x96>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a17      	ldr	r2, [pc, #92]	@ (8007fc8 <TIM_OC3_SetConfig+0xe8>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d003      	beq.n	8007f76 <TIM_OC3_SetConfig+0x96>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a16      	ldr	r2, [pc, #88]	@ (8007fcc <TIM_OC3_SetConfig+0xec>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d113      	bne.n	8007f9e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	621a      	str	r2, [r3, #32]
}
 8007fb8:	bf00      	nop
 8007fba:	371c      	adds	r7, #28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	40012c00 	.word	0x40012c00
 8007fc8:	40014000 	.word	0x40014000
 8007fcc:	40014400 	.word	0x40014400

08007fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a1b      	ldr	r3, [r3, #32]
 8007fe4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ffe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800800a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	021b      	lsls	r3, r3, #8
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	4313      	orrs	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800801e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	031b      	lsls	r3, r3, #12
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a14      	ldr	r2, [pc, #80]	@ (8008080 <TIM_OC4_SetConfig+0xb0>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d007      	beq.n	8008044 <TIM_OC4_SetConfig+0x74>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a13      	ldr	r2, [pc, #76]	@ (8008084 <TIM_OC4_SetConfig+0xb4>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d003      	beq.n	8008044 <TIM_OC4_SetConfig+0x74>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a12      	ldr	r2, [pc, #72]	@ (8008088 <TIM_OC4_SetConfig+0xb8>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d109      	bne.n	8008058 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800804a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	019b      	lsls	r3, r3, #6
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	621a      	str	r2, [r3, #32]
}
 8008072:	bf00      	nop
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	40012c00 	.word	0x40012c00
 8008084:	40014000 	.word	0x40014000
 8008088:	40014400 	.word	0x40014400

0800808c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80080d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	041b      	lsls	r3, r3, #16
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	4313      	orrs	r3, r2
 80080dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a13      	ldr	r2, [pc, #76]	@ (8008130 <TIM_OC5_SetConfig+0xa4>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d007      	beq.n	80080f6 <TIM_OC5_SetConfig+0x6a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a12      	ldr	r2, [pc, #72]	@ (8008134 <TIM_OC5_SetConfig+0xa8>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d003      	beq.n	80080f6 <TIM_OC5_SetConfig+0x6a>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a11      	ldr	r2, [pc, #68]	@ (8008138 <TIM_OC5_SetConfig+0xac>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d109      	bne.n	800810a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	021b      	lsls	r3, r3, #8
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	4313      	orrs	r3, r2
 8008108:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	621a      	str	r2, [r3, #32]
}
 8008124:	bf00      	nop
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	40012c00 	.word	0x40012c00
 8008134:	40014000 	.word	0x40014000
 8008138:	40014400 	.word	0x40014400

0800813c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800816a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800816e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	4313      	orrs	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	051b      	lsls	r3, r3, #20
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4313      	orrs	r3, r2
 800818e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a14      	ldr	r2, [pc, #80]	@ (80081e4 <TIM_OC6_SetConfig+0xa8>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d007      	beq.n	80081a8 <TIM_OC6_SetConfig+0x6c>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a13      	ldr	r2, [pc, #76]	@ (80081e8 <TIM_OC6_SetConfig+0xac>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d003      	beq.n	80081a8 <TIM_OC6_SetConfig+0x6c>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a12      	ldr	r2, [pc, #72]	@ (80081ec <TIM_OC6_SetConfig+0xb0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d109      	bne.n	80081bc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80081ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	029b      	lsls	r3, r3, #10
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	621a      	str	r2, [r3, #32]
}
 80081d6:	bf00      	nop
 80081d8:	371c      	adds	r7, #28
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	40012c00 	.word	0x40012c00
 80081e8:	40014000 	.word	0x40014000
 80081ec:	40014400 	.word	0x40014400

080081f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f003 031f 	and.w	r3, r3, #31
 8008202:	2201      	movs	r2, #1
 8008204:	fa02 f303 	lsl.w	r3, r2, r3
 8008208:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6a1a      	ldr	r2, [r3, #32]
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	43db      	mvns	r3, r3
 8008212:	401a      	ands	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6a1a      	ldr	r2, [r3, #32]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f003 031f 	and.w	r3, r3, #31
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	fa01 f303 	lsl.w	r3, r1, r3
 8008228:	431a      	orrs	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	621a      	str	r2, [r3, #32]
}
 800822e:	bf00      	nop
 8008230:	371c      	adds	r7, #28
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
	...

0800823c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800824c:	2b01      	cmp	r3, #1
 800824e:	d101      	bne.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008250:	2302      	movs	r3, #2
 8008252:	e054      	b.n	80082fe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a24      	ldr	r2, [pc, #144]	@ (800830c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d108      	bne.n	8008290 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008284:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	4313      	orrs	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a17      	ldr	r2, [pc, #92]	@ (800830c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00e      	beq.n	80082d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082bc:	d009      	beq.n	80082d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a13      	ldr	r2, [pc, #76]	@ (8008310 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d004      	beq.n	80082d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a11      	ldr	r2, [pc, #68]	@ (8008314 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d10c      	bne.n	80082ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	40012c00 	.word	0x40012c00
 8008310:	40000400 	.word	0x40000400
 8008314:	40014000 	.word	0x40014000

08008318 <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e05f      	b.n	80083ec <HAL_LIN_Init+0xd4>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008334:	d101      	bne.n	800833a <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e058      	b.n	80083ec <HAL_LIN_Init+0xd4>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e052      	b.n	80083ec <HAL_LIN_Init+0xd4>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d106      	bne.n	800835c <HAL_LIN_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7fa f99c 	bl	8002694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2224      	movs	r2, #36	@ 0x24
 8008360:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0201 	bic.w	r2, r2, #1
 8008370:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <HAL_LIN_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fb74 	bl	8008a68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f8eb 	bl	800855c <UART_SetConfig>
 8008386:	4603      	mov	r3, r0
 8008388:	2b01      	cmp	r3, #1
 800838a:	d101      	bne.n	8008390 <HAL_LIN_Init+0x78>
  {
    return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e02d      	b.n	80083ec <HAL_LIN_Init+0xd4>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800839e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689a      	ldr	r2, [r3, #8]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083ae:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083be:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f023 0120 	bic.w	r1, r3, #32
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f042 0201 	orr.w	r2, r2, #1
 80083e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fbe1 	bl	8008bac <UART_CheckIdleState>
 80083ea:	4603      	mov	r3, r0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08a      	sub	sp, #40	@ 0x28
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	4613      	mov	r3, r2
 8008402:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008408:	2b20      	cmp	r3, #32
 800840a:	d177      	bne.n	80084fc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <HAL_UART_Transmit+0x24>
 8008412:	88fb      	ldrh	r3, [r7, #6]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e070      	b.n	80084fe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2221      	movs	r2, #33	@ 0x21
 8008428:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800842a:	f7fa fa99 	bl	8002960 <HAL_GetTick>
 800842e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	88fa      	ldrh	r2, [r7, #6]
 8008434:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	88fa      	ldrh	r2, [r7, #6]
 800843c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008448:	d108      	bne.n	800845c <HAL_UART_Transmit+0x68>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d104      	bne.n	800845c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008452:	2300      	movs	r3, #0
 8008454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	61bb      	str	r3, [r7, #24]
 800845a:	e003      	b.n	8008464 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008460:	2300      	movs	r3, #0
 8008462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008464:	e02f      	b.n	80084c6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2200      	movs	r2, #0
 800846e:	2180      	movs	r1, #128	@ 0x80
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 fc43 	bl	8008cfc <UART_WaitOnFlagUntilTimeout>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2220      	movs	r2, #32
 8008480:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e03b      	b.n	80084fe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10b      	bne.n	80084a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	881a      	ldrh	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008498:	b292      	uxth	r2, r2
 800849a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	3302      	adds	r3, #2
 80084a0:	61bb      	str	r3, [r7, #24]
 80084a2:	e007      	b.n	80084b4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	781a      	ldrb	r2, [r3, #0]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	3301      	adds	r3, #1
 80084b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	3b01      	subs	r3, #1
 80084be:	b29a      	uxth	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1c9      	bne.n	8008466 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2200      	movs	r2, #0
 80084da:	2140      	movs	r1, #64	@ 0x40
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 fc0d 	bl	8008cfc <UART_WaitOnFlagUntilTimeout>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d004      	beq.n	80084f2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2220      	movs	r2, #32
 80084ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e005      	b.n	80084fe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2220      	movs	r2, #32
 80084f6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	e000      	b.n	80084fe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80084fc:	2302      	movs	r3, #2
  }
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3720      	adds	r7, #32
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_LIN_SendBreak>:
  * @brief  Transmit break characters.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));

  __HAL_LOCK(huart);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_LIN_SendBreak+0x16>
 8008518:	2302      	movs	r3, #2
 800851a:	e018      	b.n	800854e <HAL_LIN_SendBreak+0x48>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  huart->gState = HAL_UART_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2224      	movs	r2, #36	@ 0x24
 8008528:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Send break characters */
  __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	8b1b      	ldrh	r3, [r3, #24]
 8008530:	b29a      	uxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 0202 	orr.w	r2, r2, #2
 800853a:	b292      	uxth	r2, r2
 800853c:	831a      	strh	r2, [r3, #24]

  huart->gState = HAL_UART_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2220      	movs	r2, #32
 8008542:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UNLOCK(huart);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
	...

0800855c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800855c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008560:	b08a      	sub	sp, #40	@ 0x28
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	689a      	ldr	r2, [r3, #8]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	431a      	orrs	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	431a      	orrs	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	4313      	orrs	r3, r2
 8008582:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	4ba5      	ldr	r3, [pc, #660]	@ (8008820 <UART_SetConfig+0x2c4>)
 800858c:	4013      	ands	r3, r2
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008594:	430b      	orrs	r3, r1
 8008596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a9a      	ldr	r2, [pc, #616]	@ (8008824 <UART_SetConfig+0x2c8>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d004      	beq.n	80085c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085c4:	4313      	orrs	r3, r2
 80085c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085d8:	430a      	orrs	r2, r1
 80085da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a91      	ldr	r2, [pc, #580]	@ (8008828 <UART_SetConfig+0x2cc>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d126      	bne.n	8008634 <UART_SetConfig+0xd8>
 80085e6:	4b91      	ldr	r3, [pc, #580]	@ (800882c <UART_SetConfig+0x2d0>)
 80085e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ec:	f003 0303 	and.w	r3, r3, #3
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d81b      	bhi.n	800862c <UART_SetConfig+0xd0>
 80085f4:	a201      	add	r2, pc, #4	@ (adr r2, 80085fc <UART_SetConfig+0xa0>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	0800860d 	.word	0x0800860d
 8008600:	0800861d 	.word	0x0800861d
 8008604:	08008615 	.word	0x08008615
 8008608:	08008625 	.word	0x08008625
 800860c:	2301      	movs	r3, #1
 800860e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008612:	e0d6      	b.n	80087c2 <UART_SetConfig+0x266>
 8008614:	2302      	movs	r3, #2
 8008616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800861a:	e0d2      	b.n	80087c2 <UART_SetConfig+0x266>
 800861c:	2304      	movs	r3, #4
 800861e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008622:	e0ce      	b.n	80087c2 <UART_SetConfig+0x266>
 8008624:	2308      	movs	r3, #8
 8008626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800862a:	e0ca      	b.n	80087c2 <UART_SetConfig+0x266>
 800862c:	2310      	movs	r3, #16
 800862e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008632:	e0c6      	b.n	80087c2 <UART_SetConfig+0x266>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a7d      	ldr	r2, [pc, #500]	@ (8008830 <UART_SetConfig+0x2d4>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d138      	bne.n	80086b0 <UART_SetConfig+0x154>
 800863e:	4b7b      	ldr	r3, [pc, #492]	@ (800882c <UART_SetConfig+0x2d0>)
 8008640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008644:	f003 030c 	and.w	r3, r3, #12
 8008648:	2b0c      	cmp	r3, #12
 800864a:	d82d      	bhi.n	80086a8 <UART_SetConfig+0x14c>
 800864c:	a201      	add	r2, pc, #4	@ (adr r2, 8008654 <UART_SetConfig+0xf8>)
 800864e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008652:	bf00      	nop
 8008654:	08008689 	.word	0x08008689
 8008658:	080086a9 	.word	0x080086a9
 800865c:	080086a9 	.word	0x080086a9
 8008660:	080086a9 	.word	0x080086a9
 8008664:	08008699 	.word	0x08008699
 8008668:	080086a9 	.word	0x080086a9
 800866c:	080086a9 	.word	0x080086a9
 8008670:	080086a9 	.word	0x080086a9
 8008674:	08008691 	.word	0x08008691
 8008678:	080086a9 	.word	0x080086a9
 800867c:	080086a9 	.word	0x080086a9
 8008680:	080086a9 	.word	0x080086a9
 8008684:	080086a1 	.word	0x080086a1
 8008688:	2300      	movs	r3, #0
 800868a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800868e:	e098      	b.n	80087c2 <UART_SetConfig+0x266>
 8008690:	2302      	movs	r3, #2
 8008692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008696:	e094      	b.n	80087c2 <UART_SetConfig+0x266>
 8008698:	2304      	movs	r3, #4
 800869a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800869e:	e090      	b.n	80087c2 <UART_SetConfig+0x266>
 80086a0:	2308      	movs	r3, #8
 80086a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086a6:	e08c      	b.n	80087c2 <UART_SetConfig+0x266>
 80086a8:	2310      	movs	r3, #16
 80086aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086ae:	e088      	b.n	80087c2 <UART_SetConfig+0x266>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a5f      	ldr	r2, [pc, #380]	@ (8008834 <UART_SetConfig+0x2d8>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d125      	bne.n	8008706 <UART_SetConfig+0x1aa>
 80086ba:	4b5c      	ldr	r3, [pc, #368]	@ (800882c <UART_SetConfig+0x2d0>)
 80086bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80086c4:	2b30      	cmp	r3, #48	@ 0x30
 80086c6:	d016      	beq.n	80086f6 <UART_SetConfig+0x19a>
 80086c8:	2b30      	cmp	r3, #48	@ 0x30
 80086ca:	d818      	bhi.n	80086fe <UART_SetConfig+0x1a2>
 80086cc:	2b20      	cmp	r3, #32
 80086ce:	d00a      	beq.n	80086e6 <UART_SetConfig+0x18a>
 80086d0:	2b20      	cmp	r3, #32
 80086d2:	d814      	bhi.n	80086fe <UART_SetConfig+0x1a2>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <UART_SetConfig+0x182>
 80086d8:	2b10      	cmp	r3, #16
 80086da:	d008      	beq.n	80086ee <UART_SetConfig+0x192>
 80086dc:	e00f      	b.n	80086fe <UART_SetConfig+0x1a2>
 80086de:	2300      	movs	r3, #0
 80086e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086e4:	e06d      	b.n	80087c2 <UART_SetConfig+0x266>
 80086e6:	2302      	movs	r3, #2
 80086e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086ec:	e069      	b.n	80087c2 <UART_SetConfig+0x266>
 80086ee:	2304      	movs	r3, #4
 80086f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086f4:	e065      	b.n	80087c2 <UART_SetConfig+0x266>
 80086f6:	2308      	movs	r3, #8
 80086f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086fc:	e061      	b.n	80087c2 <UART_SetConfig+0x266>
 80086fe:	2310      	movs	r3, #16
 8008700:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008704:	e05d      	b.n	80087c2 <UART_SetConfig+0x266>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a4b      	ldr	r2, [pc, #300]	@ (8008838 <UART_SetConfig+0x2dc>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d125      	bne.n	800875c <UART_SetConfig+0x200>
 8008710:	4b46      	ldr	r3, [pc, #280]	@ (800882c <UART_SetConfig+0x2d0>)
 8008712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008716:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800871a:	2bc0      	cmp	r3, #192	@ 0xc0
 800871c:	d016      	beq.n	800874c <UART_SetConfig+0x1f0>
 800871e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008720:	d818      	bhi.n	8008754 <UART_SetConfig+0x1f8>
 8008722:	2b80      	cmp	r3, #128	@ 0x80
 8008724:	d00a      	beq.n	800873c <UART_SetConfig+0x1e0>
 8008726:	2b80      	cmp	r3, #128	@ 0x80
 8008728:	d814      	bhi.n	8008754 <UART_SetConfig+0x1f8>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <UART_SetConfig+0x1d8>
 800872e:	2b40      	cmp	r3, #64	@ 0x40
 8008730:	d008      	beq.n	8008744 <UART_SetConfig+0x1e8>
 8008732:	e00f      	b.n	8008754 <UART_SetConfig+0x1f8>
 8008734:	2300      	movs	r3, #0
 8008736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800873a:	e042      	b.n	80087c2 <UART_SetConfig+0x266>
 800873c:	2302      	movs	r3, #2
 800873e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008742:	e03e      	b.n	80087c2 <UART_SetConfig+0x266>
 8008744:	2304      	movs	r3, #4
 8008746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800874a:	e03a      	b.n	80087c2 <UART_SetConfig+0x266>
 800874c:	2308      	movs	r3, #8
 800874e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008752:	e036      	b.n	80087c2 <UART_SetConfig+0x266>
 8008754:	2310      	movs	r3, #16
 8008756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800875a:	e032      	b.n	80087c2 <UART_SetConfig+0x266>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a30      	ldr	r2, [pc, #192]	@ (8008824 <UART_SetConfig+0x2c8>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d12a      	bne.n	80087bc <UART_SetConfig+0x260>
 8008766:	4b31      	ldr	r3, [pc, #196]	@ (800882c <UART_SetConfig+0x2d0>)
 8008768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800876c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008770:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008774:	d01a      	beq.n	80087ac <UART_SetConfig+0x250>
 8008776:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800877a:	d81b      	bhi.n	80087b4 <UART_SetConfig+0x258>
 800877c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008780:	d00c      	beq.n	800879c <UART_SetConfig+0x240>
 8008782:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008786:	d815      	bhi.n	80087b4 <UART_SetConfig+0x258>
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <UART_SetConfig+0x238>
 800878c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008790:	d008      	beq.n	80087a4 <UART_SetConfig+0x248>
 8008792:	e00f      	b.n	80087b4 <UART_SetConfig+0x258>
 8008794:	2300      	movs	r3, #0
 8008796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800879a:	e012      	b.n	80087c2 <UART_SetConfig+0x266>
 800879c:	2302      	movs	r3, #2
 800879e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087a2:	e00e      	b.n	80087c2 <UART_SetConfig+0x266>
 80087a4:	2304      	movs	r3, #4
 80087a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087aa:	e00a      	b.n	80087c2 <UART_SetConfig+0x266>
 80087ac:	2308      	movs	r3, #8
 80087ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087b2:	e006      	b.n	80087c2 <UART_SetConfig+0x266>
 80087b4:	2310      	movs	r3, #16
 80087b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087ba:	e002      	b.n	80087c2 <UART_SetConfig+0x266>
 80087bc:	2310      	movs	r3, #16
 80087be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a17      	ldr	r2, [pc, #92]	@ (8008824 <UART_SetConfig+0x2c8>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	f040 808b 	bne.w	80088e4 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80087d2:	2b08      	cmp	r3, #8
 80087d4:	d834      	bhi.n	8008840 <UART_SetConfig+0x2e4>
 80087d6:	a201      	add	r2, pc, #4	@ (adr r2, 80087dc <UART_SetConfig+0x280>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	08008801 	.word	0x08008801
 80087e0:	08008841 	.word	0x08008841
 80087e4:	08008809 	.word	0x08008809
 80087e8:	08008841 	.word	0x08008841
 80087ec:	0800880f 	.word	0x0800880f
 80087f0:	08008841 	.word	0x08008841
 80087f4:	08008841 	.word	0x08008841
 80087f8:	08008841 	.word	0x08008841
 80087fc:	08008817 	.word	0x08008817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008800:	f7fd fd9e 	bl	8006340 <HAL_RCC_GetPCLK1Freq>
 8008804:	61f8      	str	r0, [r7, #28]
        break;
 8008806:	e021      	b.n	800884c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008808:	4b0c      	ldr	r3, [pc, #48]	@ (800883c <UART_SetConfig+0x2e0>)
 800880a:	61fb      	str	r3, [r7, #28]
        break;
 800880c:	e01e      	b.n	800884c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800880e:	f7fd fcff 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 8008812:	61f8      	str	r0, [r7, #28]
        break;
 8008814:	e01a      	b.n	800884c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800881a:	61fb      	str	r3, [r7, #28]
        break;
 800881c:	e016      	b.n	800884c <UART_SetConfig+0x2f0>
 800881e:	bf00      	nop
 8008820:	efff69f3 	.word	0xefff69f3
 8008824:	40008000 	.word	0x40008000
 8008828:	40013800 	.word	0x40013800
 800882c:	40021000 	.word	0x40021000
 8008830:	40004400 	.word	0x40004400
 8008834:	40004800 	.word	0x40004800
 8008838:	40004c00 	.word	0x40004c00
 800883c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800884a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 80fa 	beq.w	8008a48 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	4613      	mov	r3, r2
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	4413      	add	r3, r2
 800885e:	69fa      	ldr	r2, [r7, #28]
 8008860:	429a      	cmp	r2, r3
 8008862:	d305      	bcc.n	8008870 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800886a:	69fa      	ldr	r2, [r7, #28]
 800886c:	429a      	cmp	r2, r3
 800886e:	d903      	bls.n	8008878 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008876:	e0e7      	b.n	8008a48 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	2200      	movs	r2, #0
 800887c:	461c      	mov	r4, r3
 800887e:	4615      	mov	r5, r2
 8008880:	f04f 0200 	mov.w	r2, #0
 8008884:	f04f 0300 	mov.w	r3, #0
 8008888:	022b      	lsls	r3, r5, #8
 800888a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800888e:	0222      	lsls	r2, r4, #8
 8008890:	68f9      	ldr	r1, [r7, #12]
 8008892:	6849      	ldr	r1, [r1, #4]
 8008894:	0849      	lsrs	r1, r1, #1
 8008896:	2000      	movs	r0, #0
 8008898:	4688      	mov	r8, r1
 800889a:	4681      	mov	r9, r0
 800889c:	eb12 0a08 	adds.w	sl, r2, r8
 80088a0:	eb43 0b09 	adc.w	fp, r3, r9
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	603b      	str	r3, [r7, #0]
 80088ac:	607a      	str	r2, [r7, #4]
 80088ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b2:	4650      	mov	r0, sl
 80088b4:	4659      	mov	r1, fp
 80088b6:	f7f8 f9a7 	bl	8000c08 <__aeabi_uldivmod>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	4613      	mov	r3, r2
 80088c0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088c8:	d308      	bcc.n	80088dc <UART_SetConfig+0x380>
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088d0:	d204      	bcs.n	80088dc <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	60da      	str	r2, [r3, #12]
 80088da:	e0b5      	b.n	8008a48 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80088e2:	e0b1      	b.n	8008a48 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	69db      	ldr	r3, [r3, #28]
 80088e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088ec:	d15d      	bne.n	80089aa <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80088ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80088f2:	2b08      	cmp	r3, #8
 80088f4:	d827      	bhi.n	8008946 <UART_SetConfig+0x3ea>
 80088f6:	a201      	add	r2, pc, #4	@ (adr r2, 80088fc <UART_SetConfig+0x3a0>)
 80088f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fc:	08008921 	.word	0x08008921
 8008900:	08008929 	.word	0x08008929
 8008904:	08008931 	.word	0x08008931
 8008908:	08008947 	.word	0x08008947
 800890c:	08008937 	.word	0x08008937
 8008910:	08008947 	.word	0x08008947
 8008914:	08008947 	.word	0x08008947
 8008918:	08008947 	.word	0x08008947
 800891c:	0800893f 	.word	0x0800893f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008920:	f7fd fd0e 	bl	8006340 <HAL_RCC_GetPCLK1Freq>
 8008924:	61f8      	str	r0, [r7, #28]
        break;
 8008926:	e014      	b.n	8008952 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008928:	f7fd fd20 	bl	800636c <HAL_RCC_GetPCLK2Freq>
 800892c:	61f8      	str	r0, [r7, #28]
        break;
 800892e:	e010      	b.n	8008952 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008930:	4b4c      	ldr	r3, [pc, #304]	@ (8008a64 <UART_SetConfig+0x508>)
 8008932:	61fb      	str	r3, [r7, #28]
        break;
 8008934:	e00d      	b.n	8008952 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008936:	f7fd fc6b 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 800893a:	61f8      	str	r0, [r7, #28]
        break;
 800893c:	e009      	b.n	8008952 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800893e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008942:	61fb      	str	r3, [r7, #28]
        break;
 8008944:	e005      	b.n	8008952 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008950:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d077      	beq.n	8008a48 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	005a      	lsls	r2, r3, #1
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	085b      	lsrs	r3, r3, #1
 8008962:	441a      	add	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	fbb2 f3f3 	udiv	r3, r2, r3
 800896c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	2b0f      	cmp	r3, #15
 8008972:	d916      	bls.n	80089a2 <UART_SetConfig+0x446>
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800897a:	d212      	bcs.n	80089a2 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	b29b      	uxth	r3, r3
 8008980:	f023 030f 	bic.w	r3, r3, #15
 8008984:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	085b      	lsrs	r3, r3, #1
 800898a:	b29b      	uxth	r3, r3
 800898c:	f003 0307 	and.w	r3, r3, #7
 8008990:	b29a      	uxth	r2, r3
 8008992:	8afb      	ldrh	r3, [r7, #22]
 8008994:	4313      	orrs	r3, r2
 8008996:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	8afa      	ldrh	r2, [r7, #22]
 800899e:	60da      	str	r2, [r3, #12]
 80089a0:	e052      	b.n	8008a48 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80089a8:	e04e      	b.n	8008a48 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80089ae:	2b08      	cmp	r3, #8
 80089b0:	d827      	bhi.n	8008a02 <UART_SetConfig+0x4a6>
 80089b2:	a201      	add	r2, pc, #4	@ (adr r2, 80089b8 <UART_SetConfig+0x45c>)
 80089b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b8:	080089dd 	.word	0x080089dd
 80089bc:	080089e5 	.word	0x080089e5
 80089c0:	080089ed 	.word	0x080089ed
 80089c4:	08008a03 	.word	0x08008a03
 80089c8:	080089f3 	.word	0x080089f3
 80089cc:	08008a03 	.word	0x08008a03
 80089d0:	08008a03 	.word	0x08008a03
 80089d4:	08008a03 	.word	0x08008a03
 80089d8:	080089fb 	.word	0x080089fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089dc:	f7fd fcb0 	bl	8006340 <HAL_RCC_GetPCLK1Freq>
 80089e0:	61f8      	str	r0, [r7, #28]
        break;
 80089e2:	e014      	b.n	8008a0e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089e4:	f7fd fcc2 	bl	800636c <HAL_RCC_GetPCLK2Freq>
 80089e8:	61f8      	str	r0, [r7, #28]
        break;
 80089ea:	e010      	b.n	8008a0e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008a64 <UART_SetConfig+0x508>)
 80089ee:	61fb      	str	r3, [r7, #28]
        break;
 80089f0:	e00d      	b.n	8008a0e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089f2:	f7fd fc0d 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 80089f6:	61f8      	str	r0, [r7, #28]
        break;
 80089f8:	e009      	b.n	8008a0e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089fe:	61fb      	str	r3, [r7, #28]
        break;
 8008a00:	e005      	b.n	8008a0e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8008a02:	2300      	movs	r3, #0
 8008a04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008a0c:	bf00      	nop
    }

    if (pclk != 0U)
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d019      	beq.n	8008a48 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	085a      	lsrs	r2, r3, #1
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	441a      	add	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	2b0f      	cmp	r3, #15
 8008a2c:	d909      	bls.n	8008a42 <UART_SetConfig+0x4e6>
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a34:	d205      	bcs.n	8008a42 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60da      	str	r2, [r3, #12]
 8008a40:	e002      	b.n	8008a48 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008a54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3728      	adds	r7, #40	@ 0x28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a62:	bf00      	nop
 8008a64:	00f42400 	.word	0x00f42400

08008a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a74:	f003 0308 	and.w	r3, r3, #8
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00a      	beq.n	8008a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00a      	beq.n	8008ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab8:	f003 0302 	and.w	r3, r3, #2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00a      	beq.n	8008ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ada:	f003 0304 	and.w	r3, r3, #4
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00a      	beq.n	8008af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	430a      	orrs	r2, r1
 8008af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008afc:	f003 0310 	and.w	r3, r3, #16
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00a      	beq.n	8008b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1e:	f003 0320 	and.w	r3, r3, #32
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00a      	beq.n	8008b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d01a      	beq.n	8008b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b66:	d10a      	bne.n	8008b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	605a      	str	r2, [r3, #4]
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b098      	sub	sp, #96	@ 0x60
 8008bb0:	af02      	add	r7, sp, #8
 8008bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bbc:	f7f9 fed0 	bl	8002960 <HAL_GetTick>
 8008bc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0308 	and.w	r3, r3, #8
 8008bcc:	2b08      	cmp	r3, #8
 8008bce:	d12e      	bne.n	8008c2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f88c 	bl	8008cfc <UART_WaitOnFlagUntilTimeout>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d021      	beq.n	8008c2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	461a      	mov	r2, r3
 8008c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e6      	bne.n	8008bea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e062      	b.n	8008cf4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b04      	cmp	r3, #4
 8008c3a:	d149      	bne.n	8008cd0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c44:	2200      	movs	r2, #0
 8008c46:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f856 	bl	8008cfc <UART_WaitOnFlagUntilTimeout>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d03c      	beq.n	8008cd0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5e:	e853 3f00 	ldrex	r3, [r3]
 8008c62:	623b      	str	r3, [r7, #32]
   return(result);
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	461a      	mov	r2, r3
 8008c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c7c:	e841 2300 	strex	r3, r2, [r1]
 8008c80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1e6      	bne.n	8008c56 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3308      	adds	r3, #8
 8008c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0301 	bic.w	r3, r3, #1
 8008c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ca8:	61fa      	str	r2, [r7, #28]
 8008caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	69b9      	ldr	r1, [r7, #24]
 8008cae:	69fa      	ldr	r2, [r7, #28]
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e5      	bne.n	8008c88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e011      	b.n	8008cf4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3758      	adds	r7, #88	@ 0x58
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d0c:	e04f      	b.n	8008dae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d14:	d04b      	beq.n	8008dae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d16:	f7f9 fe23 	bl	8002960 <HAL_GetTick>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d302      	bcc.n	8008d2c <UART_WaitOnFlagUntilTimeout+0x30>
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e04e      	b.n	8008dce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0304 	and.w	r3, r3, #4
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d037      	beq.n	8008dae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2b80      	cmp	r3, #128	@ 0x80
 8008d42:	d034      	beq.n	8008dae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2b40      	cmp	r3, #64	@ 0x40
 8008d48:	d031      	beq.n	8008dae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	f003 0308 	and.w	r3, r3, #8
 8008d54:	2b08      	cmp	r3, #8
 8008d56:	d110      	bne.n	8008d7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2208      	movs	r2, #8
 8008d5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 f838 	bl	8008dd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2208      	movs	r2, #8
 8008d6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e029      	b.n	8008dce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d88:	d111      	bne.n	8008dae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 f81e 	bl	8008dd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e00f      	b.n	8008dce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	69da      	ldr	r2, [r3, #28]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	4013      	ands	r3, r2
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	bf0c      	ite	eq
 8008dbe:	2301      	moveq	r3, #1
 8008dc0:	2300      	movne	r3, #0
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d0a0      	beq.n	8008d0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b095      	sub	sp, #84	@ 0x54
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de6:	e853 3f00 	ldrex	r3, [r3]
 8008dea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dfe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e04:	e841 2300 	strex	r3, r2, [r1]
 8008e08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1e6      	bne.n	8008dde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3308      	adds	r3, #8
 8008e16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e18:	6a3b      	ldr	r3, [r7, #32]
 8008e1a:	e853 3f00 	ldrex	r3, [r3]
 8008e1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	f023 0301 	bic.w	r3, r3, #1
 8008e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e38:	e841 2300 	strex	r3, r2, [r1]
 8008e3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1e5      	bne.n	8008e10 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d118      	bne.n	8008e7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f023 0310 	bic.w	r3, r3, #16
 8008e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e6a:	61bb      	str	r3, [r7, #24]
 8008e6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6979      	ldr	r1, [r7, #20]
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	613b      	str	r3, [r7, #16]
   return(result);
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e6      	bne.n	8008e4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008e92:	bf00      	nop
 8008e94:	3754      	adds	r7, #84	@ 0x54
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
	...

08008ea0 <sniprintf>:
 8008ea0:	b40c      	push	{r2, r3}
 8008ea2:	b530      	push	{r4, r5, lr}
 8008ea4:	4b18      	ldr	r3, [pc, #96]	@ (8008f08 <sniprintf+0x68>)
 8008ea6:	1e0c      	subs	r4, r1, #0
 8008ea8:	681d      	ldr	r5, [r3, #0]
 8008eaa:	b09d      	sub	sp, #116	@ 0x74
 8008eac:	da08      	bge.n	8008ec0 <sniprintf+0x20>
 8008eae:	238b      	movs	r3, #139	@ 0x8b
 8008eb0:	602b      	str	r3, [r5, #0]
 8008eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb6:	b01d      	add	sp, #116	@ 0x74
 8008eb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ebc:	b002      	add	sp, #8
 8008ebe:	4770      	bx	lr
 8008ec0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008ec4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008ec8:	f04f 0300 	mov.w	r3, #0
 8008ecc:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008ece:	bf14      	ite	ne
 8008ed0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ed4:	4623      	moveq	r3, r4
 8008ed6:	9304      	str	r3, [sp, #16]
 8008ed8:	9307      	str	r3, [sp, #28]
 8008eda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ede:	9002      	str	r0, [sp, #8]
 8008ee0:	9006      	str	r0, [sp, #24]
 8008ee2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ee6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008ee8:	ab21      	add	r3, sp, #132	@ 0x84
 8008eea:	a902      	add	r1, sp, #8
 8008eec:	4628      	mov	r0, r5
 8008eee:	9301      	str	r3, [sp, #4]
 8008ef0:	f000 f9a2 	bl	8009238 <_svfiprintf_r>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	bfbc      	itt	lt
 8008ef8:	238b      	movlt	r3, #139	@ 0x8b
 8008efa:	602b      	strlt	r3, [r5, #0]
 8008efc:	2c00      	cmp	r4, #0
 8008efe:	d0da      	beq.n	8008eb6 <sniprintf+0x16>
 8008f00:	9b02      	ldr	r3, [sp, #8]
 8008f02:	2200      	movs	r2, #0
 8008f04:	701a      	strb	r2, [r3, #0]
 8008f06:	e7d6      	b.n	8008eb6 <sniprintf+0x16>
 8008f08:	2000000c 	.word	0x2000000c

08008f0c <memset>:
 8008f0c:	4402      	add	r2, r0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d100      	bne.n	8008f16 <memset+0xa>
 8008f14:	4770      	bx	lr
 8008f16:	f803 1b01 	strb.w	r1, [r3], #1
 8008f1a:	e7f9      	b.n	8008f10 <memset+0x4>

08008f1c <__errno>:
 8008f1c:	4b01      	ldr	r3, [pc, #4]	@ (8008f24 <__errno+0x8>)
 8008f1e:	6818      	ldr	r0, [r3, #0]
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	2000000c 	.word	0x2000000c

08008f28 <__libc_init_array>:
 8008f28:	b570      	push	{r4, r5, r6, lr}
 8008f2a:	4d0d      	ldr	r5, [pc, #52]	@ (8008f60 <__libc_init_array+0x38>)
 8008f2c:	4c0d      	ldr	r4, [pc, #52]	@ (8008f64 <__libc_init_array+0x3c>)
 8008f2e:	1b64      	subs	r4, r4, r5
 8008f30:	10a4      	asrs	r4, r4, #2
 8008f32:	2600      	movs	r6, #0
 8008f34:	42a6      	cmp	r6, r4
 8008f36:	d109      	bne.n	8008f4c <__libc_init_array+0x24>
 8008f38:	4d0b      	ldr	r5, [pc, #44]	@ (8008f68 <__libc_init_array+0x40>)
 8008f3a:	4c0c      	ldr	r4, [pc, #48]	@ (8008f6c <__libc_init_array+0x44>)
 8008f3c:	f000 fe62 	bl	8009c04 <_init>
 8008f40:	1b64      	subs	r4, r4, r5
 8008f42:	10a4      	asrs	r4, r4, #2
 8008f44:	2600      	movs	r6, #0
 8008f46:	42a6      	cmp	r6, r4
 8008f48:	d105      	bne.n	8008f56 <__libc_init_array+0x2e>
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}
 8008f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f50:	4798      	blx	r3
 8008f52:	3601      	adds	r6, #1
 8008f54:	e7ee      	b.n	8008f34 <__libc_init_array+0xc>
 8008f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f5a:	4798      	blx	r3
 8008f5c:	3601      	adds	r6, #1
 8008f5e:	e7f2      	b.n	8008f46 <__libc_init_array+0x1e>
 8008f60:	08009d00 	.word	0x08009d00
 8008f64:	08009d00 	.word	0x08009d00
 8008f68:	08009d00 	.word	0x08009d00
 8008f6c:	08009d04 	.word	0x08009d04

08008f70 <__retarget_lock_acquire_recursive>:
 8008f70:	4770      	bx	lr

08008f72 <__retarget_lock_release_recursive>:
 8008f72:	4770      	bx	lr

08008f74 <memcpy>:
 8008f74:	440a      	add	r2, r1
 8008f76:	4291      	cmp	r1, r2
 8008f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f7c:	d100      	bne.n	8008f80 <memcpy+0xc>
 8008f7e:	4770      	bx	lr
 8008f80:	b510      	push	{r4, lr}
 8008f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f8a:	4291      	cmp	r1, r2
 8008f8c:	d1f9      	bne.n	8008f82 <memcpy+0xe>
 8008f8e:	bd10      	pop	{r4, pc}

08008f90 <_free_r>:
 8008f90:	b538      	push	{r3, r4, r5, lr}
 8008f92:	4605      	mov	r5, r0
 8008f94:	2900      	cmp	r1, #0
 8008f96:	d041      	beq.n	800901c <_free_r+0x8c>
 8008f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f9c:	1f0c      	subs	r4, r1, #4
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	bfb8      	it	lt
 8008fa2:	18e4      	addlt	r4, r4, r3
 8008fa4:	f000 f8e0 	bl	8009168 <__malloc_lock>
 8008fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8009020 <_free_r+0x90>)
 8008faa:	6813      	ldr	r3, [r2, #0]
 8008fac:	b933      	cbnz	r3, 8008fbc <_free_r+0x2c>
 8008fae:	6063      	str	r3, [r4, #4]
 8008fb0:	6014      	str	r4, [r2, #0]
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fb8:	f000 b8dc 	b.w	8009174 <__malloc_unlock>
 8008fbc:	42a3      	cmp	r3, r4
 8008fbe:	d908      	bls.n	8008fd2 <_free_r+0x42>
 8008fc0:	6820      	ldr	r0, [r4, #0]
 8008fc2:	1821      	adds	r1, r4, r0
 8008fc4:	428b      	cmp	r3, r1
 8008fc6:	bf01      	itttt	eq
 8008fc8:	6819      	ldreq	r1, [r3, #0]
 8008fca:	685b      	ldreq	r3, [r3, #4]
 8008fcc:	1809      	addeq	r1, r1, r0
 8008fce:	6021      	streq	r1, [r4, #0]
 8008fd0:	e7ed      	b.n	8008fae <_free_r+0x1e>
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	b10b      	cbz	r3, 8008fdc <_free_r+0x4c>
 8008fd8:	42a3      	cmp	r3, r4
 8008fda:	d9fa      	bls.n	8008fd2 <_free_r+0x42>
 8008fdc:	6811      	ldr	r1, [r2, #0]
 8008fde:	1850      	adds	r0, r2, r1
 8008fe0:	42a0      	cmp	r0, r4
 8008fe2:	d10b      	bne.n	8008ffc <_free_r+0x6c>
 8008fe4:	6820      	ldr	r0, [r4, #0]
 8008fe6:	4401      	add	r1, r0
 8008fe8:	1850      	adds	r0, r2, r1
 8008fea:	4283      	cmp	r3, r0
 8008fec:	6011      	str	r1, [r2, #0]
 8008fee:	d1e0      	bne.n	8008fb2 <_free_r+0x22>
 8008ff0:	6818      	ldr	r0, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	6053      	str	r3, [r2, #4]
 8008ff6:	4408      	add	r0, r1
 8008ff8:	6010      	str	r0, [r2, #0]
 8008ffa:	e7da      	b.n	8008fb2 <_free_r+0x22>
 8008ffc:	d902      	bls.n	8009004 <_free_r+0x74>
 8008ffe:	230c      	movs	r3, #12
 8009000:	602b      	str	r3, [r5, #0]
 8009002:	e7d6      	b.n	8008fb2 <_free_r+0x22>
 8009004:	6820      	ldr	r0, [r4, #0]
 8009006:	1821      	adds	r1, r4, r0
 8009008:	428b      	cmp	r3, r1
 800900a:	bf04      	itt	eq
 800900c:	6819      	ldreq	r1, [r3, #0]
 800900e:	685b      	ldreq	r3, [r3, #4]
 8009010:	6063      	str	r3, [r4, #4]
 8009012:	bf04      	itt	eq
 8009014:	1809      	addeq	r1, r1, r0
 8009016:	6021      	streq	r1, [r4, #0]
 8009018:	6054      	str	r4, [r2, #4]
 800901a:	e7ca      	b.n	8008fb2 <_free_r+0x22>
 800901c:	bd38      	pop	{r3, r4, r5, pc}
 800901e:	bf00      	nop
 8009020:	20000410 	.word	0x20000410

08009024 <sbrk_aligned>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	4e0f      	ldr	r6, [pc, #60]	@ (8009064 <sbrk_aligned+0x40>)
 8009028:	460c      	mov	r4, r1
 800902a:	6831      	ldr	r1, [r6, #0]
 800902c:	4605      	mov	r5, r0
 800902e:	b911      	cbnz	r1, 8009036 <sbrk_aligned+0x12>
 8009030:	f000 fba4 	bl	800977c <_sbrk_r>
 8009034:	6030      	str	r0, [r6, #0]
 8009036:	4621      	mov	r1, r4
 8009038:	4628      	mov	r0, r5
 800903a:	f000 fb9f 	bl	800977c <_sbrk_r>
 800903e:	1c43      	adds	r3, r0, #1
 8009040:	d103      	bne.n	800904a <sbrk_aligned+0x26>
 8009042:	f04f 34ff 	mov.w	r4, #4294967295
 8009046:	4620      	mov	r0, r4
 8009048:	bd70      	pop	{r4, r5, r6, pc}
 800904a:	1cc4      	adds	r4, r0, #3
 800904c:	f024 0403 	bic.w	r4, r4, #3
 8009050:	42a0      	cmp	r0, r4
 8009052:	d0f8      	beq.n	8009046 <sbrk_aligned+0x22>
 8009054:	1a21      	subs	r1, r4, r0
 8009056:	4628      	mov	r0, r5
 8009058:	f000 fb90 	bl	800977c <_sbrk_r>
 800905c:	3001      	adds	r0, #1
 800905e:	d1f2      	bne.n	8009046 <sbrk_aligned+0x22>
 8009060:	e7ef      	b.n	8009042 <sbrk_aligned+0x1e>
 8009062:	bf00      	nop
 8009064:	2000040c 	.word	0x2000040c

08009068 <_malloc_r>:
 8009068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800906c:	1ccd      	adds	r5, r1, #3
 800906e:	f025 0503 	bic.w	r5, r5, #3
 8009072:	3508      	adds	r5, #8
 8009074:	2d0c      	cmp	r5, #12
 8009076:	bf38      	it	cc
 8009078:	250c      	movcc	r5, #12
 800907a:	2d00      	cmp	r5, #0
 800907c:	4606      	mov	r6, r0
 800907e:	db01      	blt.n	8009084 <_malloc_r+0x1c>
 8009080:	42a9      	cmp	r1, r5
 8009082:	d904      	bls.n	800908e <_malloc_r+0x26>
 8009084:	230c      	movs	r3, #12
 8009086:	6033      	str	r3, [r6, #0]
 8009088:	2000      	movs	r0, #0
 800908a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800908e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009164 <_malloc_r+0xfc>
 8009092:	f000 f869 	bl	8009168 <__malloc_lock>
 8009096:	f8d8 3000 	ldr.w	r3, [r8]
 800909a:	461c      	mov	r4, r3
 800909c:	bb44      	cbnz	r4, 80090f0 <_malloc_r+0x88>
 800909e:	4629      	mov	r1, r5
 80090a0:	4630      	mov	r0, r6
 80090a2:	f7ff ffbf 	bl	8009024 <sbrk_aligned>
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	4604      	mov	r4, r0
 80090aa:	d158      	bne.n	800915e <_malloc_r+0xf6>
 80090ac:	f8d8 4000 	ldr.w	r4, [r8]
 80090b0:	4627      	mov	r7, r4
 80090b2:	2f00      	cmp	r7, #0
 80090b4:	d143      	bne.n	800913e <_malloc_r+0xd6>
 80090b6:	2c00      	cmp	r4, #0
 80090b8:	d04b      	beq.n	8009152 <_malloc_r+0xea>
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	4639      	mov	r1, r7
 80090be:	4630      	mov	r0, r6
 80090c0:	eb04 0903 	add.w	r9, r4, r3
 80090c4:	f000 fb5a 	bl	800977c <_sbrk_r>
 80090c8:	4581      	cmp	r9, r0
 80090ca:	d142      	bne.n	8009152 <_malloc_r+0xea>
 80090cc:	6821      	ldr	r1, [r4, #0]
 80090ce:	1a6d      	subs	r5, r5, r1
 80090d0:	4629      	mov	r1, r5
 80090d2:	4630      	mov	r0, r6
 80090d4:	f7ff ffa6 	bl	8009024 <sbrk_aligned>
 80090d8:	3001      	adds	r0, #1
 80090da:	d03a      	beq.n	8009152 <_malloc_r+0xea>
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	442b      	add	r3, r5
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	f8d8 3000 	ldr.w	r3, [r8]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	bb62      	cbnz	r2, 8009144 <_malloc_r+0xdc>
 80090ea:	f8c8 7000 	str.w	r7, [r8]
 80090ee:	e00f      	b.n	8009110 <_malloc_r+0xa8>
 80090f0:	6822      	ldr	r2, [r4, #0]
 80090f2:	1b52      	subs	r2, r2, r5
 80090f4:	d420      	bmi.n	8009138 <_malloc_r+0xd0>
 80090f6:	2a0b      	cmp	r2, #11
 80090f8:	d917      	bls.n	800912a <_malloc_r+0xc2>
 80090fa:	1961      	adds	r1, r4, r5
 80090fc:	42a3      	cmp	r3, r4
 80090fe:	6025      	str	r5, [r4, #0]
 8009100:	bf18      	it	ne
 8009102:	6059      	strne	r1, [r3, #4]
 8009104:	6863      	ldr	r3, [r4, #4]
 8009106:	bf08      	it	eq
 8009108:	f8c8 1000 	streq.w	r1, [r8]
 800910c:	5162      	str	r2, [r4, r5]
 800910e:	604b      	str	r3, [r1, #4]
 8009110:	4630      	mov	r0, r6
 8009112:	f000 f82f 	bl	8009174 <__malloc_unlock>
 8009116:	f104 000b 	add.w	r0, r4, #11
 800911a:	1d23      	adds	r3, r4, #4
 800911c:	f020 0007 	bic.w	r0, r0, #7
 8009120:	1ac2      	subs	r2, r0, r3
 8009122:	bf1c      	itt	ne
 8009124:	1a1b      	subne	r3, r3, r0
 8009126:	50a3      	strne	r3, [r4, r2]
 8009128:	e7af      	b.n	800908a <_malloc_r+0x22>
 800912a:	6862      	ldr	r2, [r4, #4]
 800912c:	42a3      	cmp	r3, r4
 800912e:	bf0c      	ite	eq
 8009130:	f8c8 2000 	streq.w	r2, [r8]
 8009134:	605a      	strne	r2, [r3, #4]
 8009136:	e7eb      	b.n	8009110 <_malloc_r+0xa8>
 8009138:	4623      	mov	r3, r4
 800913a:	6864      	ldr	r4, [r4, #4]
 800913c:	e7ae      	b.n	800909c <_malloc_r+0x34>
 800913e:	463c      	mov	r4, r7
 8009140:	687f      	ldr	r7, [r7, #4]
 8009142:	e7b6      	b.n	80090b2 <_malloc_r+0x4a>
 8009144:	461a      	mov	r2, r3
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	42a3      	cmp	r3, r4
 800914a:	d1fb      	bne.n	8009144 <_malloc_r+0xdc>
 800914c:	2300      	movs	r3, #0
 800914e:	6053      	str	r3, [r2, #4]
 8009150:	e7de      	b.n	8009110 <_malloc_r+0xa8>
 8009152:	230c      	movs	r3, #12
 8009154:	6033      	str	r3, [r6, #0]
 8009156:	4630      	mov	r0, r6
 8009158:	f000 f80c 	bl	8009174 <__malloc_unlock>
 800915c:	e794      	b.n	8009088 <_malloc_r+0x20>
 800915e:	6005      	str	r5, [r0, #0]
 8009160:	e7d6      	b.n	8009110 <_malloc_r+0xa8>
 8009162:	bf00      	nop
 8009164:	20000410 	.word	0x20000410

08009168 <__malloc_lock>:
 8009168:	4801      	ldr	r0, [pc, #4]	@ (8009170 <__malloc_lock+0x8>)
 800916a:	f7ff bf01 	b.w	8008f70 <__retarget_lock_acquire_recursive>
 800916e:	bf00      	nop
 8009170:	20000408 	.word	0x20000408

08009174 <__malloc_unlock>:
 8009174:	4801      	ldr	r0, [pc, #4]	@ (800917c <__malloc_unlock+0x8>)
 8009176:	f7ff befc 	b.w	8008f72 <__retarget_lock_release_recursive>
 800917a:	bf00      	nop
 800917c:	20000408 	.word	0x20000408

08009180 <__ssputs_r>:
 8009180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009184:	688e      	ldr	r6, [r1, #8]
 8009186:	461f      	mov	r7, r3
 8009188:	42be      	cmp	r6, r7
 800918a:	680b      	ldr	r3, [r1, #0]
 800918c:	4682      	mov	sl, r0
 800918e:	460c      	mov	r4, r1
 8009190:	4690      	mov	r8, r2
 8009192:	d82d      	bhi.n	80091f0 <__ssputs_r+0x70>
 8009194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009198:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800919c:	d026      	beq.n	80091ec <__ssputs_r+0x6c>
 800919e:	6965      	ldr	r5, [r4, #20]
 80091a0:	6909      	ldr	r1, [r1, #16]
 80091a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091a6:	eba3 0901 	sub.w	r9, r3, r1
 80091aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091ae:	1c7b      	adds	r3, r7, #1
 80091b0:	444b      	add	r3, r9
 80091b2:	106d      	asrs	r5, r5, #1
 80091b4:	429d      	cmp	r5, r3
 80091b6:	bf38      	it	cc
 80091b8:	461d      	movcc	r5, r3
 80091ba:	0553      	lsls	r3, r2, #21
 80091bc:	d527      	bpl.n	800920e <__ssputs_r+0x8e>
 80091be:	4629      	mov	r1, r5
 80091c0:	f7ff ff52 	bl	8009068 <_malloc_r>
 80091c4:	4606      	mov	r6, r0
 80091c6:	b360      	cbz	r0, 8009222 <__ssputs_r+0xa2>
 80091c8:	6921      	ldr	r1, [r4, #16]
 80091ca:	464a      	mov	r2, r9
 80091cc:	f7ff fed2 	bl	8008f74 <memcpy>
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80091d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091da:	81a3      	strh	r3, [r4, #12]
 80091dc:	6126      	str	r6, [r4, #16]
 80091de:	6165      	str	r5, [r4, #20]
 80091e0:	444e      	add	r6, r9
 80091e2:	eba5 0509 	sub.w	r5, r5, r9
 80091e6:	6026      	str	r6, [r4, #0]
 80091e8:	60a5      	str	r5, [r4, #8]
 80091ea:	463e      	mov	r6, r7
 80091ec:	42be      	cmp	r6, r7
 80091ee:	d900      	bls.n	80091f2 <__ssputs_r+0x72>
 80091f0:	463e      	mov	r6, r7
 80091f2:	6820      	ldr	r0, [r4, #0]
 80091f4:	4632      	mov	r2, r6
 80091f6:	4641      	mov	r1, r8
 80091f8:	f000 faa6 	bl	8009748 <memmove>
 80091fc:	68a3      	ldr	r3, [r4, #8]
 80091fe:	1b9b      	subs	r3, r3, r6
 8009200:	60a3      	str	r3, [r4, #8]
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	4433      	add	r3, r6
 8009206:	6023      	str	r3, [r4, #0]
 8009208:	2000      	movs	r0, #0
 800920a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800920e:	462a      	mov	r2, r5
 8009210:	f000 fac4 	bl	800979c <_realloc_r>
 8009214:	4606      	mov	r6, r0
 8009216:	2800      	cmp	r0, #0
 8009218:	d1e0      	bne.n	80091dc <__ssputs_r+0x5c>
 800921a:	6921      	ldr	r1, [r4, #16]
 800921c:	4650      	mov	r0, sl
 800921e:	f7ff feb7 	bl	8008f90 <_free_r>
 8009222:	230c      	movs	r3, #12
 8009224:	f8ca 3000 	str.w	r3, [sl]
 8009228:	89a3      	ldrh	r3, [r4, #12]
 800922a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800922e:	81a3      	strh	r3, [r4, #12]
 8009230:	f04f 30ff 	mov.w	r0, #4294967295
 8009234:	e7e9      	b.n	800920a <__ssputs_r+0x8a>
	...

08009238 <_svfiprintf_r>:
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	4698      	mov	r8, r3
 800923e:	898b      	ldrh	r3, [r1, #12]
 8009240:	061b      	lsls	r3, r3, #24
 8009242:	b09d      	sub	sp, #116	@ 0x74
 8009244:	4607      	mov	r7, r0
 8009246:	460d      	mov	r5, r1
 8009248:	4614      	mov	r4, r2
 800924a:	d510      	bpl.n	800926e <_svfiprintf_r+0x36>
 800924c:	690b      	ldr	r3, [r1, #16]
 800924e:	b973      	cbnz	r3, 800926e <_svfiprintf_r+0x36>
 8009250:	2140      	movs	r1, #64	@ 0x40
 8009252:	f7ff ff09 	bl	8009068 <_malloc_r>
 8009256:	6028      	str	r0, [r5, #0]
 8009258:	6128      	str	r0, [r5, #16]
 800925a:	b930      	cbnz	r0, 800926a <_svfiprintf_r+0x32>
 800925c:	230c      	movs	r3, #12
 800925e:	603b      	str	r3, [r7, #0]
 8009260:	f04f 30ff 	mov.w	r0, #4294967295
 8009264:	b01d      	add	sp, #116	@ 0x74
 8009266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926a:	2340      	movs	r3, #64	@ 0x40
 800926c:	616b      	str	r3, [r5, #20]
 800926e:	2300      	movs	r3, #0
 8009270:	9309      	str	r3, [sp, #36]	@ 0x24
 8009272:	2320      	movs	r3, #32
 8009274:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009278:	f8cd 800c 	str.w	r8, [sp, #12]
 800927c:	2330      	movs	r3, #48	@ 0x30
 800927e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800941c <_svfiprintf_r+0x1e4>
 8009282:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009286:	f04f 0901 	mov.w	r9, #1
 800928a:	4623      	mov	r3, r4
 800928c:	469a      	mov	sl, r3
 800928e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009292:	b10a      	cbz	r2, 8009298 <_svfiprintf_r+0x60>
 8009294:	2a25      	cmp	r2, #37	@ 0x25
 8009296:	d1f9      	bne.n	800928c <_svfiprintf_r+0x54>
 8009298:	ebba 0b04 	subs.w	fp, sl, r4
 800929c:	d00b      	beq.n	80092b6 <_svfiprintf_r+0x7e>
 800929e:	465b      	mov	r3, fp
 80092a0:	4622      	mov	r2, r4
 80092a2:	4629      	mov	r1, r5
 80092a4:	4638      	mov	r0, r7
 80092a6:	f7ff ff6b 	bl	8009180 <__ssputs_r>
 80092aa:	3001      	adds	r0, #1
 80092ac:	f000 80a7 	beq.w	80093fe <_svfiprintf_r+0x1c6>
 80092b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092b2:	445a      	add	r2, fp
 80092b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80092b6:	f89a 3000 	ldrb.w	r3, [sl]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 809f 	beq.w	80093fe <_svfiprintf_r+0x1c6>
 80092c0:	2300      	movs	r3, #0
 80092c2:	f04f 32ff 	mov.w	r2, #4294967295
 80092c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092ca:	f10a 0a01 	add.w	sl, sl, #1
 80092ce:	9304      	str	r3, [sp, #16]
 80092d0:	9307      	str	r3, [sp, #28]
 80092d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80092d8:	4654      	mov	r4, sl
 80092da:	2205      	movs	r2, #5
 80092dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e0:	484e      	ldr	r0, [pc, #312]	@ (800941c <_svfiprintf_r+0x1e4>)
 80092e2:	f7f6 ff85 	bl	80001f0 <memchr>
 80092e6:	9a04      	ldr	r2, [sp, #16]
 80092e8:	b9d8      	cbnz	r0, 8009322 <_svfiprintf_r+0xea>
 80092ea:	06d0      	lsls	r0, r2, #27
 80092ec:	bf44      	itt	mi
 80092ee:	2320      	movmi	r3, #32
 80092f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092f4:	0711      	lsls	r1, r2, #28
 80092f6:	bf44      	itt	mi
 80092f8:	232b      	movmi	r3, #43	@ 0x2b
 80092fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009302:	2b2a      	cmp	r3, #42	@ 0x2a
 8009304:	d015      	beq.n	8009332 <_svfiprintf_r+0xfa>
 8009306:	9a07      	ldr	r2, [sp, #28]
 8009308:	4654      	mov	r4, sl
 800930a:	2000      	movs	r0, #0
 800930c:	f04f 0c0a 	mov.w	ip, #10
 8009310:	4621      	mov	r1, r4
 8009312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009316:	3b30      	subs	r3, #48	@ 0x30
 8009318:	2b09      	cmp	r3, #9
 800931a:	d94b      	bls.n	80093b4 <_svfiprintf_r+0x17c>
 800931c:	b1b0      	cbz	r0, 800934c <_svfiprintf_r+0x114>
 800931e:	9207      	str	r2, [sp, #28]
 8009320:	e014      	b.n	800934c <_svfiprintf_r+0x114>
 8009322:	eba0 0308 	sub.w	r3, r0, r8
 8009326:	fa09 f303 	lsl.w	r3, r9, r3
 800932a:	4313      	orrs	r3, r2
 800932c:	9304      	str	r3, [sp, #16]
 800932e:	46a2      	mov	sl, r4
 8009330:	e7d2      	b.n	80092d8 <_svfiprintf_r+0xa0>
 8009332:	9b03      	ldr	r3, [sp, #12]
 8009334:	1d19      	adds	r1, r3, #4
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	9103      	str	r1, [sp, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	bfbb      	ittet	lt
 800933e:	425b      	neglt	r3, r3
 8009340:	f042 0202 	orrlt.w	r2, r2, #2
 8009344:	9307      	strge	r3, [sp, #28]
 8009346:	9307      	strlt	r3, [sp, #28]
 8009348:	bfb8      	it	lt
 800934a:	9204      	strlt	r2, [sp, #16]
 800934c:	7823      	ldrb	r3, [r4, #0]
 800934e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009350:	d10a      	bne.n	8009368 <_svfiprintf_r+0x130>
 8009352:	7863      	ldrb	r3, [r4, #1]
 8009354:	2b2a      	cmp	r3, #42	@ 0x2a
 8009356:	d132      	bne.n	80093be <_svfiprintf_r+0x186>
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	1d1a      	adds	r2, r3, #4
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	9203      	str	r2, [sp, #12]
 8009360:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009364:	3402      	adds	r4, #2
 8009366:	9305      	str	r3, [sp, #20]
 8009368:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800942c <_svfiprintf_r+0x1f4>
 800936c:	7821      	ldrb	r1, [r4, #0]
 800936e:	2203      	movs	r2, #3
 8009370:	4650      	mov	r0, sl
 8009372:	f7f6 ff3d 	bl	80001f0 <memchr>
 8009376:	b138      	cbz	r0, 8009388 <_svfiprintf_r+0x150>
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	eba0 000a 	sub.w	r0, r0, sl
 800937e:	2240      	movs	r2, #64	@ 0x40
 8009380:	4082      	lsls	r2, r0
 8009382:	4313      	orrs	r3, r2
 8009384:	3401      	adds	r4, #1
 8009386:	9304      	str	r3, [sp, #16]
 8009388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938c:	4824      	ldr	r0, [pc, #144]	@ (8009420 <_svfiprintf_r+0x1e8>)
 800938e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009392:	2206      	movs	r2, #6
 8009394:	f7f6 ff2c 	bl	80001f0 <memchr>
 8009398:	2800      	cmp	r0, #0
 800939a:	d036      	beq.n	800940a <_svfiprintf_r+0x1d2>
 800939c:	4b21      	ldr	r3, [pc, #132]	@ (8009424 <_svfiprintf_r+0x1ec>)
 800939e:	bb1b      	cbnz	r3, 80093e8 <_svfiprintf_r+0x1b0>
 80093a0:	9b03      	ldr	r3, [sp, #12]
 80093a2:	3307      	adds	r3, #7
 80093a4:	f023 0307 	bic.w	r3, r3, #7
 80093a8:	3308      	adds	r3, #8
 80093aa:	9303      	str	r3, [sp, #12]
 80093ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ae:	4433      	add	r3, r6
 80093b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80093b2:	e76a      	b.n	800928a <_svfiprintf_r+0x52>
 80093b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093b8:	460c      	mov	r4, r1
 80093ba:	2001      	movs	r0, #1
 80093bc:	e7a8      	b.n	8009310 <_svfiprintf_r+0xd8>
 80093be:	2300      	movs	r3, #0
 80093c0:	3401      	adds	r4, #1
 80093c2:	9305      	str	r3, [sp, #20]
 80093c4:	4619      	mov	r1, r3
 80093c6:	f04f 0c0a 	mov.w	ip, #10
 80093ca:	4620      	mov	r0, r4
 80093cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093d0:	3a30      	subs	r2, #48	@ 0x30
 80093d2:	2a09      	cmp	r2, #9
 80093d4:	d903      	bls.n	80093de <_svfiprintf_r+0x1a6>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0c6      	beq.n	8009368 <_svfiprintf_r+0x130>
 80093da:	9105      	str	r1, [sp, #20]
 80093dc:	e7c4      	b.n	8009368 <_svfiprintf_r+0x130>
 80093de:	fb0c 2101 	mla	r1, ip, r1, r2
 80093e2:	4604      	mov	r4, r0
 80093e4:	2301      	movs	r3, #1
 80093e6:	e7f0      	b.n	80093ca <_svfiprintf_r+0x192>
 80093e8:	ab03      	add	r3, sp, #12
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	462a      	mov	r2, r5
 80093ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009428 <_svfiprintf_r+0x1f0>)
 80093f0:	a904      	add	r1, sp, #16
 80093f2:	4638      	mov	r0, r7
 80093f4:	f3af 8000 	nop.w
 80093f8:	1c42      	adds	r2, r0, #1
 80093fa:	4606      	mov	r6, r0
 80093fc:	d1d6      	bne.n	80093ac <_svfiprintf_r+0x174>
 80093fe:	89ab      	ldrh	r3, [r5, #12]
 8009400:	065b      	lsls	r3, r3, #25
 8009402:	f53f af2d 	bmi.w	8009260 <_svfiprintf_r+0x28>
 8009406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009408:	e72c      	b.n	8009264 <_svfiprintf_r+0x2c>
 800940a:	ab03      	add	r3, sp, #12
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	462a      	mov	r2, r5
 8009410:	4b05      	ldr	r3, [pc, #20]	@ (8009428 <_svfiprintf_r+0x1f0>)
 8009412:	a904      	add	r1, sp, #16
 8009414:	4638      	mov	r0, r7
 8009416:	f000 f879 	bl	800950c <_printf_i>
 800941a:	e7ed      	b.n	80093f8 <_svfiprintf_r+0x1c0>
 800941c:	08009cc4 	.word	0x08009cc4
 8009420:	08009cce 	.word	0x08009cce
 8009424:	00000000 	.word	0x00000000
 8009428:	08009181 	.word	0x08009181
 800942c:	08009cca 	.word	0x08009cca

08009430 <_printf_common>:
 8009430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009434:	4616      	mov	r6, r2
 8009436:	4698      	mov	r8, r3
 8009438:	688a      	ldr	r2, [r1, #8]
 800943a:	690b      	ldr	r3, [r1, #16]
 800943c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009440:	4293      	cmp	r3, r2
 8009442:	bfb8      	it	lt
 8009444:	4613      	movlt	r3, r2
 8009446:	6033      	str	r3, [r6, #0]
 8009448:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800944c:	4607      	mov	r7, r0
 800944e:	460c      	mov	r4, r1
 8009450:	b10a      	cbz	r2, 8009456 <_printf_common+0x26>
 8009452:	3301      	adds	r3, #1
 8009454:	6033      	str	r3, [r6, #0]
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	0699      	lsls	r1, r3, #26
 800945a:	bf42      	ittt	mi
 800945c:	6833      	ldrmi	r3, [r6, #0]
 800945e:	3302      	addmi	r3, #2
 8009460:	6033      	strmi	r3, [r6, #0]
 8009462:	6825      	ldr	r5, [r4, #0]
 8009464:	f015 0506 	ands.w	r5, r5, #6
 8009468:	d106      	bne.n	8009478 <_printf_common+0x48>
 800946a:	f104 0a19 	add.w	sl, r4, #25
 800946e:	68e3      	ldr	r3, [r4, #12]
 8009470:	6832      	ldr	r2, [r6, #0]
 8009472:	1a9b      	subs	r3, r3, r2
 8009474:	42ab      	cmp	r3, r5
 8009476:	dc26      	bgt.n	80094c6 <_printf_common+0x96>
 8009478:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800947c:	6822      	ldr	r2, [r4, #0]
 800947e:	3b00      	subs	r3, #0
 8009480:	bf18      	it	ne
 8009482:	2301      	movne	r3, #1
 8009484:	0692      	lsls	r2, r2, #26
 8009486:	d42b      	bmi.n	80094e0 <_printf_common+0xb0>
 8009488:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800948c:	4641      	mov	r1, r8
 800948e:	4638      	mov	r0, r7
 8009490:	47c8      	blx	r9
 8009492:	3001      	adds	r0, #1
 8009494:	d01e      	beq.n	80094d4 <_printf_common+0xa4>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	6922      	ldr	r2, [r4, #16]
 800949a:	f003 0306 	and.w	r3, r3, #6
 800949e:	2b04      	cmp	r3, #4
 80094a0:	bf02      	ittt	eq
 80094a2:	68e5      	ldreq	r5, [r4, #12]
 80094a4:	6833      	ldreq	r3, [r6, #0]
 80094a6:	1aed      	subeq	r5, r5, r3
 80094a8:	68a3      	ldr	r3, [r4, #8]
 80094aa:	bf0c      	ite	eq
 80094ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094b0:	2500      	movne	r5, #0
 80094b2:	4293      	cmp	r3, r2
 80094b4:	bfc4      	itt	gt
 80094b6:	1a9b      	subgt	r3, r3, r2
 80094b8:	18ed      	addgt	r5, r5, r3
 80094ba:	2600      	movs	r6, #0
 80094bc:	341a      	adds	r4, #26
 80094be:	42b5      	cmp	r5, r6
 80094c0:	d11a      	bne.n	80094f8 <_printf_common+0xc8>
 80094c2:	2000      	movs	r0, #0
 80094c4:	e008      	b.n	80094d8 <_printf_common+0xa8>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4652      	mov	r2, sl
 80094ca:	4641      	mov	r1, r8
 80094cc:	4638      	mov	r0, r7
 80094ce:	47c8      	blx	r9
 80094d0:	3001      	adds	r0, #1
 80094d2:	d103      	bne.n	80094dc <_printf_common+0xac>
 80094d4:	f04f 30ff 	mov.w	r0, #4294967295
 80094d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094dc:	3501      	adds	r5, #1
 80094de:	e7c6      	b.n	800946e <_printf_common+0x3e>
 80094e0:	18e1      	adds	r1, r4, r3
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	2030      	movs	r0, #48	@ 0x30
 80094e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094ea:	4422      	add	r2, r4
 80094ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094f4:	3302      	adds	r3, #2
 80094f6:	e7c7      	b.n	8009488 <_printf_common+0x58>
 80094f8:	2301      	movs	r3, #1
 80094fa:	4622      	mov	r2, r4
 80094fc:	4641      	mov	r1, r8
 80094fe:	4638      	mov	r0, r7
 8009500:	47c8      	blx	r9
 8009502:	3001      	adds	r0, #1
 8009504:	d0e6      	beq.n	80094d4 <_printf_common+0xa4>
 8009506:	3601      	adds	r6, #1
 8009508:	e7d9      	b.n	80094be <_printf_common+0x8e>
	...

0800950c <_printf_i>:
 800950c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009510:	7e0f      	ldrb	r7, [r1, #24]
 8009512:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009514:	2f78      	cmp	r7, #120	@ 0x78
 8009516:	4691      	mov	r9, r2
 8009518:	4680      	mov	r8, r0
 800951a:	460c      	mov	r4, r1
 800951c:	469a      	mov	sl, r3
 800951e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009522:	d807      	bhi.n	8009534 <_printf_i+0x28>
 8009524:	2f62      	cmp	r7, #98	@ 0x62
 8009526:	d80a      	bhi.n	800953e <_printf_i+0x32>
 8009528:	2f00      	cmp	r7, #0
 800952a:	f000 80d1 	beq.w	80096d0 <_printf_i+0x1c4>
 800952e:	2f58      	cmp	r7, #88	@ 0x58
 8009530:	f000 80b8 	beq.w	80096a4 <_printf_i+0x198>
 8009534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009538:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800953c:	e03a      	b.n	80095b4 <_printf_i+0xa8>
 800953e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009542:	2b15      	cmp	r3, #21
 8009544:	d8f6      	bhi.n	8009534 <_printf_i+0x28>
 8009546:	a101      	add	r1, pc, #4	@ (adr r1, 800954c <_printf_i+0x40>)
 8009548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800954c:	080095a5 	.word	0x080095a5
 8009550:	080095b9 	.word	0x080095b9
 8009554:	08009535 	.word	0x08009535
 8009558:	08009535 	.word	0x08009535
 800955c:	08009535 	.word	0x08009535
 8009560:	08009535 	.word	0x08009535
 8009564:	080095b9 	.word	0x080095b9
 8009568:	08009535 	.word	0x08009535
 800956c:	08009535 	.word	0x08009535
 8009570:	08009535 	.word	0x08009535
 8009574:	08009535 	.word	0x08009535
 8009578:	080096b7 	.word	0x080096b7
 800957c:	080095e3 	.word	0x080095e3
 8009580:	08009671 	.word	0x08009671
 8009584:	08009535 	.word	0x08009535
 8009588:	08009535 	.word	0x08009535
 800958c:	080096d9 	.word	0x080096d9
 8009590:	08009535 	.word	0x08009535
 8009594:	080095e3 	.word	0x080095e3
 8009598:	08009535 	.word	0x08009535
 800959c:	08009535 	.word	0x08009535
 80095a0:	08009679 	.word	0x08009679
 80095a4:	6833      	ldr	r3, [r6, #0]
 80095a6:	1d1a      	adds	r2, r3, #4
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6032      	str	r2, [r6, #0]
 80095ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095b4:	2301      	movs	r3, #1
 80095b6:	e09c      	b.n	80096f2 <_printf_i+0x1e6>
 80095b8:	6833      	ldr	r3, [r6, #0]
 80095ba:	6820      	ldr	r0, [r4, #0]
 80095bc:	1d19      	adds	r1, r3, #4
 80095be:	6031      	str	r1, [r6, #0]
 80095c0:	0606      	lsls	r6, r0, #24
 80095c2:	d501      	bpl.n	80095c8 <_printf_i+0xbc>
 80095c4:	681d      	ldr	r5, [r3, #0]
 80095c6:	e003      	b.n	80095d0 <_printf_i+0xc4>
 80095c8:	0645      	lsls	r5, r0, #25
 80095ca:	d5fb      	bpl.n	80095c4 <_printf_i+0xb8>
 80095cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095d0:	2d00      	cmp	r5, #0
 80095d2:	da03      	bge.n	80095dc <_printf_i+0xd0>
 80095d4:	232d      	movs	r3, #45	@ 0x2d
 80095d6:	426d      	negs	r5, r5
 80095d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095dc:	4858      	ldr	r0, [pc, #352]	@ (8009740 <_printf_i+0x234>)
 80095de:	230a      	movs	r3, #10
 80095e0:	e011      	b.n	8009606 <_printf_i+0xfa>
 80095e2:	6821      	ldr	r1, [r4, #0]
 80095e4:	6833      	ldr	r3, [r6, #0]
 80095e6:	0608      	lsls	r0, r1, #24
 80095e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80095ec:	d402      	bmi.n	80095f4 <_printf_i+0xe8>
 80095ee:	0649      	lsls	r1, r1, #25
 80095f0:	bf48      	it	mi
 80095f2:	b2ad      	uxthmi	r5, r5
 80095f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80095f6:	4852      	ldr	r0, [pc, #328]	@ (8009740 <_printf_i+0x234>)
 80095f8:	6033      	str	r3, [r6, #0]
 80095fa:	bf14      	ite	ne
 80095fc:	230a      	movne	r3, #10
 80095fe:	2308      	moveq	r3, #8
 8009600:	2100      	movs	r1, #0
 8009602:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009606:	6866      	ldr	r6, [r4, #4]
 8009608:	60a6      	str	r6, [r4, #8]
 800960a:	2e00      	cmp	r6, #0
 800960c:	db05      	blt.n	800961a <_printf_i+0x10e>
 800960e:	6821      	ldr	r1, [r4, #0]
 8009610:	432e      	orrs	r6, r5
 8009612:	f021 0104 	bic.w	r1, r1, #4
 8009616:	6021      	str	r1, [r4, #0]
 8009618:	d04b      	beq.n	80096b2 <_printf_i+0x1a6>
 800961a:	4616      	mov	r6, r2
 800961c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009620:	fb03 5711 	mls	r7, r3, r1, r5
 8009624:	5dc7      	ldrb	r7, [r0, r7]
 8009626:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800962a:	462f      	mov	r7, r5
 800962c:	42bb      	cmp	r3, r7
 800962e:	460d      	mov	r5, r1
 8009630:	d9f4      	bls.n	800961c <_printf_i+0x110>
 8009632:	2b08      	cmp	r3, #8
 8009634:	d10b      	bne.n	800964e <_printf_i+0x142>
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	07df      	lsls	r7, r3, #31
 800963a:	d508      	bpl.n	800964e <_printf_i+0x142>
 800963c:	6923      	ldr	r3, [r4, #16]
 800963e:	6861      	ldr	r1, [r4, #4]
 8009640:	4299      	cmp	r1, r3
 8009642:	bfde      	ittt	le
 8009644:	2330      	movle	r3, #48	@ 0x30
 8009646:	f806 3c01 	strble.w	r3, [r6, #-1]
 800964a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800964e:	1b92      	subs	r2, r2, r6
 8009650:	6122      	str	r2, [r4, #16]
 8009652:	f8cd a000 	str.w	sl, [sp]
 8009656:	464b      	mov	r3, r9
 8009658:	aa03      	add	r2, sp, #12
 800965a:	4621      	mov	r1, r4
 800965c:	4640      	mov	r0, r8
 800965e:	f7ff fee7 	bl	8009430 <_printf_common>
 8009662:	3001      	adds	r0, #1
 8009664:	d14a      	bne.n	80096fc <_printf_i+0x1f0>
 8009666:	f04f 30ff 	mov.w	r0, #4294967295
 800966a:	b004      	add	sp, #16
 800966c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	f043 0320 	orr.w	r3, r3, #32
 8009676:	6023      	str	r3, [r4, #0]
 8009678:	4832      	ldr	r0, [pc, #200]	@ (8009744 <_printf_i+0x238>)
 800967a:	2778      	movs	r7, #120	@ 0x78
 800967c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	6831      	ldr	r1, [r6, #0]
 8009684:	061f      	lsls	r7, r3, #24
 8009686:	f851 5b04 	ldr.w	r5, [r1], #4
 800968a:	d402      	bmi.n	8009692 <_printf_i+0x186>
 800968c:	065f      	lsls	r7, r3, #25
 800968e:	bf48      	it	mi
 8009690:	b2ad      	uxthmi	r5, r5
 8009692:	6031      	str	r1, [r6, #0]
 8009694:	07d9      	lsls	r1, r3, #31
 8009696:	bf44      	itt	mi
 8009698:	f043 0320 	orrmi.w	r3, r3, #32
 800969c:	6023      	strmi	r3, [r4, #0]
 800969e:	b11d      	cbz	r5, 80096a8 <_printf_i+0x19c>
 80096a0:	2310      	movs	r3, #16
 80096a2:	e7ad      	b.n	8009600 <_printf_i+0xf4>
 80096a4:	4826      	ldr	r0, [pc, #152]	@ (8009740 <_printf_i+0x234>)
 80096a6:	e7e9      	b.n	800967c <_printf_i+0x170>
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	f023 0320 	bic.w	r3, r3, #32
 80096ae:	6023      	str	r3, [r4, #0]
 80096b0:	e7f6      	b.n	80096a0 <_printf_i+0x194>
 80096b2:	4616      	mov	r6, r2
 80096b4:	e7bd      	b.n	8009632 <_printf_i+0x126>
 80096b6:	6833      	ldr	r3, [r6, #0]
 80096b8:	6825      	ldr	r5, [r4, #0]
 80096ba:	6961      	ldr	r1, [r4, #20]
 80096bc:	1d18      	adds	r0, r3, #4
 80096be:	6030      	str	r0, [r6, #0]
 80096c0:	062e      	lsls	r6, r5, #24
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	d501      	bpl.n	80096ca <_printf_i+0x1be>
 80096c6:	6019      	str	r1, [r3, #0]
 80096c8:	e002      	b.n	80096d0 <_printf_i+0x1c4>
 80096ca:	0668      	lsls	r0, r5, #25
 80096cc:	d5fb      	bpl.n	80096c6 <_printf_i+0x1ba>
 80096ce:	8019      	strh	r1, [r3, #0]
 80096d0:	2300      	movs	r3, #0
 80096d2:	6123      	str	r3, [r4, #16]
 80096d4:	4616      	mov	r6, r2
 80096d6:	e7bc      	b.n	8009652 <_printf_i+0x146>
 80096d8:	6833      	ldr	r3, [r6, #0]
 80096da:	1d1a      	adds	r2, r3, #4
 80096dc:	6032      	str	r2, [r6, #0]
 80096de:	681e      	ldr	r6, [r3, #0]
 80096e0:	6862      	ldr	r2, [r4, #4]
 80096e2:	2100      	movs	r1, #0
 80096e4:	4630      	mov	r0, r6
 80096e6:	f7f6 fd83 	bl	80001f0 <memchr>
 80096ea:	b108      	cbz	r0, 80096f0 <_printf_i+0x1e4>
 80096ec:	1b80      	subs	r0, r0, r6
 80096ee:	6060      	str	r0, [r4, #4]
 80096f0:	6863      	ldr	r3, [r4, #4]
 80096f2:	6123      	str	r3, [r4, #16]
 80096f4:	2300      	movs	r3, #0
 80096f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096fa:	e7aa      	b.n	8009652 <_printf_i+0x146>
 80096fc:	6923      	ldr	r3, [r4, #16]
 80096fe:	4632      	mov	r2, r6
 8009700:	4649      	mov	r1, r9
 8009702:	4640      	mov	r0, r8
 8009704:	47d0      	blx	sl
 8009706:	3001      	adds	r0, #1
 8009708:	d0ad      	beq.n	8009666 <_printf_i+0x15a>
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	079b      	lsls	r3, r3, #30
 800970e:	d413      	bmi.n	8009738 <_printf_i+0x22c>
 8009710:	68e0      	ldr	r0, [r4, #12]
 8009712:	9b03      	ldr	r3, [sp, #12]
 8009714:	4298      	cmp	r0, r3
 8009716:	bfb8      	it	lt
 8009718:	4618      	movlt	r0, r3
 800971a:	e7a6      	b.n	800966a <_printf_i+0x15e>
 800971c:	2301      	movs	r3, #1
 800971e:	4632      	mov	r2, r6
 8009720:	4649      	mov	r1, r9
 8009722:	4640      	mov	r0, r8
 8009724:	47d0      	blx	sl
 8009726:	3001      	adds	r0, #1
 8009728:	d09d      	beq.n	8009666 <_printf_i+0x15a>
 800972a:	3501      	adds	r5, #1
 800972c:	68e3      	ldr	r3, [r4, #12]
 800972e:	9903      	ldr	r1, [sp, #12]
 8009730:	1a5b      	subs	r3, r3, r1
 8009732:	42ab      	cmp	r3, r5
 8009734:	dcf2      	bgt.n	800971c <_printf_i+0x210>
 8009736:	e7eb      	b.n	8009710 <_printf_i+0x204>
 8009738:	2500      	movs	r5, #0
 800973a:	f104 0619 	add.w	r6, r4, #25
 800973e:	e7f5      	b.n	800972c <_printf_i+0x220>
 8009740:	08009cd5 	.word	0x08009cd5
 8009744:	08009ce6 	.word	0x08009ce6

08009748 <memmove>:
 8009748:	4288      	cmp	r0, r1
 800974a:	b510      	push	{r4, lr}
 800974c:	eb01 0402 	add.w	r4, r1, r2
 8009750:	d902      	bls.n	8009758 <memmove+0x10>
 8009752:	4284      	cmp	r4, r0
 8009754:	4623      	mov	r3, r4
 8009756:	d807      	bhi.n	8009768 <memmove+0x20>
 8009758:	1e43      	subs	r3, r0, #1
 800975a:	42a1      	cmp	r1, r4
 800975c:	d008      	beq.n	8009770 <memmove+0x28>
 800975e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009762:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009766:	e7f8      	b.n	800975a <memmove+0x12>
 8009768:	4402      	add	r2, r0
 800976a:	4601      	mov	r1, r0
 800976c:	428a      	cmp	r2, r1
 800976e:	d100      	bne.n	8009772 <memmove+0x2a>
 8009770:	bd10      	pop	{r4, pc}
 8009772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800977a:	e7f7      	b.n	800976c <memmove+0x24>

0800977c <_sbrk_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4d06      	ldr	r5, [pc, #24]	@ (8009798 <_sbrk_r+0x1c>)
 8009780:	2300      	movs	r3, #0
 8009782:	4604      	mov	r4, r0
 8009784:	4608      	mov	r0, r1
 8009786:	602b      	str	r3, [r5, #0]
 8009788:	f7f9 f810 	bl	80027ac <_sbrk>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d102      	bne.n	8009796 <_sbrk_r+0x1a>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	b103      	cbz	r3, 8009796 <_sbrk_r+0x1a>
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	bd38      	pop	{r3, r4, r5, pc}
 8009798:	20000404 	.word	0x20000404

0800979c <_realloc_r>:
 800979c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a0:	4607      	mov	r7, r0
 80097a2:	4614      	mov	r4, r2
 80097a4:	460d      	mov	r5, r1
 80097a6:	b921      	cbnz	r1, 80097b2 <_realloc_r+0x16>
 80097a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ac:	4611      	mov	r1, r2
 80097ae:	f7ff bc5b 	b.w	8009068 <_malloc_r>
 80097b2:	b92a      	cbnz	r2, 80097c0 <_realloc_r+0x24>
 80097b4:	f7ff fbec 	bl	8008f90 <_free_r>
 80097b8:	4625      	mov	r5, r4
 80097ba:	4628      	mov	r0, r5
 80097bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c0:	f000 f81a 	bl	80097f8 <_malloc_usable_size_r>
 80097c4:	4284      	cmp	r4, r0
 80097c6:	4606      	mov	r6, r0
 80097c8:	d802      	bhi.n	80097d0 <_realloc_r+0x34>
 80097ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097ce:	d8f4      	bhi.n	80097ba <_realloc_r+0x1e>
 80097d0:	4621      	mov	r1, r4
 80097d2:	4638      	mov	r0, r7
 80097d4:	f7ff fc48 	bl	8009068 <_malloc_r>
 80097d8:	4680      	mov	r8, r0
 80097da:	b908      	cbnz	r0, 80097e0 <_realloc_r+0x44>
 80097dc:	4645      	mov	r5, r8
 80097de:	e7ec      	b.n	80097ba <_realloc_r+0x1e>
 80097e0:	42b4      	cmp	r4, r6
 80097e2:	4622      	mov	r2, r4
 80097e4:	4629      	mov	r1, r5
 80097e6:	bf28      	it	cs
 80097e8:	4632      	movcs	r2, r6
 80097ea:	f7ff fbc3 	bl	8008f74 <memcpy>
 80097ee:	4629      	mov	r1, r5
 80097f0:	4638      	mov	r0, r7
 80097f2:	f7ff fbcd 	bl	8008f90 <_free_r>
 80097f6:	e7f1      	b.n	80097dc <_realloc_r+0x40>

080097f8 <_malloc_usable_size_r>:
 80097f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097fc:	1f18      	subs	r0, r3, #4
 80097fe:	2b00      	cmp	r3, #0
 8009800:	bfbc      	itt	lt
 8009802:	580b      	ldrlt	r3, [r1, r0]
 8009804:	18c0      	addlt	r0, r0, r3
 8009806:	4770      	bx	lr

08009808 <log>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	ed2d 8b02 	vpush	{d8}
 800980e:	ec55 4b10 	vmov	r4, r5, d0
 8009812:	f000 f841 	bl	8009898 <__ieee754_log>
 8009816:	4622      	mov	r2, r4
 8009818:	462b      	mov	r3, r5
 800981a:	4620      	mov	r0, r4
 800981c:	4629      	mov	r1, r5
 800981e:	eeb0 8a40 	vmov.f32	s16, s0
 8009822:	eef0 8a60 	vmov.f32	s17, s1
 8009826:	f7f7 f989 	bl	8000b3c <__aeabi_dcmpun>
 800982a:	b998      	cbnz	r0, 8009854 <log+0x4c>
 800982c:	2200      	movs	r2, #0
 800982e:	2300      	movs	r3, #0
 8009830:	4620      	mov	r0, r4
 8009832:	4629      	mov	r1, r5
 8009834:	f7f7 f978 	bl	8000b28 <__aeabi_dcmpgt>
 8009838:	b960      	cbnz	r0, 8009854 <log+0x4c>
 800983a:	2200      	movs	r2, #0
 800983c:	2300      	movs	r3, #0
 800983e:	4620      	mov	r0, r4
 8009840:	4629      	mov	r1, r5
 8009842:	f7f7 f949 	bl	8000ad8 <__aeabi_dcmpeq>
 8009846:	b160      	cbz	r0, 8009862 <log+0x5a>
 8009848:	f7ff fb68 	bl	8008f1c <__errno>
 800984c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8009878 <log+0x70>
 8009850:	2322      	movs	r3, #34	@ 0x22
 8009852:	6003      	str	r3, [r0, #0]
 8009854:	eeb0 0a48 	vmov.f32	s0, s16
 8009858:	eef0 0a68 	vmov.f32	s1, s17
 800985c:	ecbd 8b02 	vpop	{d8}
 8009860:	bd38      	pop	{r3, r4, r5, pc}
 8009862:	f7ff fb5b 	bl	8008f1c <__errno>
 8009866:	ecbd 8b02 	vpop	{d8}
 800986a:	2321      	movs	r3, #33	@ 0x21
 800986c:	6003      	str	r3, [r0, #0]
 800986e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009872:	4803      	ldr	r0, [pc, #12]	@ (8009880 <log+0x78>)
 8009874:	f000 b808 	b.w	8009888 <nan>
 8009878:	00000000 	.word	0x00000000
 800987c:	fff00000 	.word	0xfff00000
 8009880:	08009cc9 	.word	0x08009cc9
 8009884:	00000000 	.word	0x00000000

08009888 <nan>:
 8009888:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009890 <nan+0x8>
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	00000000 	.word	0x00000000
 8009894:	7ff80000 	.word	0x7ff80000

08009898 <__ieee754_log>:
 8009898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989c:	ec51 0b10 	vmov	r0, r1, d0
 80098a0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80098a4:	b087      	sub	sp, #28
 80098a6:	460d      	mov	r5, r1
 80098a8:	da26      	bge.n	80098f8 <__ieee754_log+0x60>
 80098aa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80098ae:	4303      	orrs	r3, r0
 80098b0:	4602      	mov	r2, r0
 80098b2:	d10a      	bne.n	80098ca <__ieee754_log+0x32>
 80098b4:	49ce      	ldr	r1, [pc, #824]	@ (8009bf0 <__ieee754_log+0x358>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	2300      	movs	r3, #0
 80098ba:	2000      	movs	r0, #0
 80098bc:	f7f6 ffce 	bl	800085c <__aeabi_ddiv>
 80098c0:	ec41 0b10 	vmov	d0, r0, r1
 80098c4:	b007      	add	sp, #28
 80098c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ca:	2900      	cmp	r1, #0
 80098cc:	da05      	bge.n	80098da <__ieee754_log+0x42>
 80098ce:	460b      	mov	r3, r1
 80098d0:	f7f6 fce2 	bl	8000298 <__aeabi_dsub>
 80098d4:	2200      	movs	r2, #0
 80098d6:	2300      	movs	r3, #0
 80098d8:	e7f0      	b.n	80098bc <__ieee754_log+0x24>
 80098da:	4bc6      	ldr	r3, [pc, #792]	@ (8009bf4 <__ieee754_log+0x35c>)
 80098dc:	2200      	movs	r2, #0
 80098de:	f7f6 fe93 	bl	8000608 <__aeabi_dmul>
 80098e2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 80098e6:	460d      	mov	r5, r1
 80098e8:	4ac3      	ldr	r2, [pc, #780]	@ (8009bf8 <__ieee754_log+0x360>)
 80098ea:	4295      	cmp	r5, r2
 80098ec:	dd06      	ble.n	80098fc <__ieee754_log+0x64>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	f7f6 fcd3 	bl	800029c <__adddf3>
 80098f6:	e7e3      	b.n	80098c0 <__ieee754_log+0x28>
 80098f8:	2300      	movs	r3, #0
 80098fa:	e7f5      	b.n	80098e8 <__ieee754_log+0x50>
 80098fc:	152c      	asrs	r4, r5, #20
 80098fe:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8009902:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009906:	441c      	add	r4, r3
 8009908:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800990c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8009910:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009914:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8009918:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800991c:	ea42 0105 	orr.w	r1, r2, r5
 8009920:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009924:	2200      	movs	r2, #0
 8009926:	4bb5      	ldr	r3, [pc, #724]	@ (8009bfc <__ieee754_log+0x364>)
 8009928:	f7f6 fcb6 	bl	8000298 <__aeabi_dsub>
 800992c:	1cab      	adds	r3, r5, #2
 800992e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009932:	2b02      	cmp	r3, #2
 8009934:	4682      	mov	sl, r0
 8009936:	468b      	mov	fp, r1
 8009938:	f04f 0200 	mov.w	r2, #0
 800993c:	dc53      	bgt.n	80099e6 <__ieee754_log+0x14e>
 800993e:	2300      	movs	r3, #0
 8009940:	f7f7 f8ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8009944:	b1d0      	cbz	r0, 800997c <__ieee754_log+0xe4>
 8009946:	2c00      	cmp	r4, #0
 8009948:	f000 8120 	beq.w	8009b8c <__ieee754_log+0x2f4>
 800994c:	4620      	mov	r0, r4
 800994e:	f7f6 fdf1 	bl	8000534 <__aeabi_i2d>
 8009952:	a391      	add	r3, pc, #580	@ (adr r3, 8009b98 <__ieee754_log+0x300>)
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	4606      	mov	r6, r0
 800995a:	460f      	mov	r7, r1
 800995c:	f7f6 fe54 	bl	8000608 <__aeabi_dmul>
 8009960:	a38f      	add	r3, pc, #572	@ (adr r3, 8009ba0 <__ieee754_log+0x308>)
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	4604      	mov	r4, r0
 8009968:	460d      	mov	r5, r1
 800996a:	4630      	mov	r0, r6
 800996c:	4639      	mov	r1, r7
 800996e:	f7f6 fe4b 	bl	8000608 <__aeabi_dmul>
 8009972:	4602      	mov	r2, r0
 8009974:	460b      	mov	r3, r1
 8009976:	4620      	mov	r0, r4
 8009978:	4629      	mov	r1, r5
 800997a:	e7ba      	b.n	80098f2 <__ieee754_log+0x5a>
 800997c:	a38a      	add	r3, pc, #552	@ (adr r3, 8009ba8 <__ieee754_log+0x310>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	4650      	mov	r0, sl
 8009984:	4659      	mov	r1, fp
 8009986:	f7f6 fe3f 	bl	8000608 <__aeabi_dmul>
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	2000      	movs	r0, #0
 8009990:	499b      	ldr	r1, [pc, #620]	@ (8009c00 <__ieee754_log+0x368>)
 8009992:	f7f6 fc81 	bl	8000298 <__aeabi_dsub>
 8009996:	4652      	mov	r2, sl
 8009998:	4606      	mov	r6, r0
 800999a:	460f      	mov	r7, r1
 800999c:	465b      	mov	r3, fp
 800999e:	4650      	mov	r0, sl
 80099a0:	4659      	mov	r1, fp
 80099a2:	f7f6 fe31 	bl	8000608 <__aeabi_dmul>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4630      	mov	r0, r6
 80099ac:	4639      	mov	r1, r7
 80099ae:	f7f6 fe2b 	bl	8000608 <__aeabi_dmul>
 80099b2:	4606      	mov	r6, r0
 80099b4:	460f      	mov	r7, r1
 80099b6:	b914      	cbnz	r4, 80099be <__ieee754_log+0x126>
 80099b8:	4632      	mov	r2, r6
 80099ba:	463b      	mov	r3, r7
 80099bc:	e0a0      	b.n	8009b00 <__ieee754_log+0x268>
 80099be:	4620      	mov	r0, r4
 80099c0:	f7f6 fdb8 	bl	8000534 <__aeabi_i2d>
 80099c4:	a374      	add	r3, pc, #464	@ (adr r3, 8009b98 <__ieee754_log+0x300>)
 80099c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ca:	4680      	mov	r8, r0
 80099cc:	4689      	mov	r9, r1
 80099ce:	f7f6 fe1b 	bl	8000608 <__aeabi_dmul>
 80099d2:	a373      	add	r3, pc, #460	@ (adr r3, 8009ba0 <__ieee754_log+0x308>)
 80099d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d8:	4604      	mov	r4, r0
 80099da:	460d      	mov	r5, r1
 80099dc:	4640      	mov	r0, r8
 80099de:	4649      	mov	r1, r9
 80099e0:	f7f6 fe12 	bl	8000608 <__aeabi_dmul>
 80099e4:	e0a5      	b.n	8009b32 <__ieee754_log+0x29a>
 80099e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80099ea:	f7f6 fc57 	bl	800029c <__adddf3>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	4650      	mov	r0, sl
 80099f4:	4659      	mov	r1, fp
 80099f6:	f7f6 ff31 	bl	800085c <__aeabi_ddiv>
 80099fa:	e9cd 0100 	strd	r0, r1, [sp]
 80099fe:	4620      	mov	r0, r4
 8009a00:	f7f6 fd98 	bl	8000534 <__aeabi_i2d>
 8009a04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4619      	mov	r1, r3
 8009a10:	f7f6 fdfa 	bl	8000608 <__aeabi_dmul>
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a1c:	f7f6 fdf4 	bl	8000608 <__aeabi_dmul>
 8009a20:	a363      	add	r3, pc, #396	@ (adr r3, 8009bb0 <__ieee754_log+0x318>)
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	4680      	mov	r8, r0
 8009a28:	4689      	mov	r9, r1
 8009a2a:	f7f6 fded 	bl	8000608 <__aeabi_dmul>
 8009a2e:	a362      	add	r3, pc, #392	@ (adr r3, 8009bb8 <__ieee754_log+0x320>)
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	f7f6 fc32 	bl	800029c <__adddf3>
 8009a38:	4642      	mov	r2, r8
 8009a3a:	464b      	mov	r3, r9
 8009a3c:	f7f6 fde4 	bl	8000608 <__aeabi_dmul>
 8009a40:	a35f      	add	r3, pc, #380	@ (adr r3, 8009bc0 <__ieee754_log+0x328>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	f7f6 fc29 	bl	800029c <__adddf3>
 8009a4a:	4642      	mov	r2, r8
 8009a4c:	464b      	mov	r3, r9
 8009a4e:	f7f6 fddb 	bl	8000608 <__aeabi_dmul>
 8009a52:	a35d      	add	r3, pc, #372	@ (adr r3, 8009bc8 <__ieee754_log+0x330>)
 8009a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a58:	f7f6 fc20 	bl	800029c <__adddf3>
 8009a5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a60:	f7f6 fdd2 	bl	8000608 <__aeabi_dmul>
 8009a64:	a35a      	add	r3, pc, #360	@ (adr r3, 8009bd0 <__ieee754_log+0x338>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a6e:	4640      	mov	r0, r8
 8009a70:	4649      	mov	r1, r9
 8009a72:	f7f6 fdc9 	bl	8000608 <__aeabi_dmul>
 8009a76:	a358      	add	r3, pc, #352	@ (adr r3, 8009bd8 <__ieee754_log+0x340>)
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	f7f6 fc0e 	bl	800029c <__adddf3>
 8009a80:	4642      	mov	r2, r8
 8009a82:	464b      	mov	r3, r9
 8009a84:	f7f6 fdc0 	bl	8000608 <__aeabi_dmul>
 8009a88:	a355      	add	r3, pc, #340	@ (adr r3, 8009be0 <__ieee754_log+0x348>)
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	f7f6 fc05 	bl	800029c <__adddf3>
 8009a92:	4642      	mov	r2, r8
 8009a94:	464b      	mov	r3, r9
 8009a96:	f7f6 fdb7 	bl	8000608 <__aeabi_dmul>
 8009a9a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8009aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009aaa:	f7f6 fbf7 	bl	800029c <__adddf3>
 8009aae:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8009ab2:	3551      	adds	r5, #81	@ 0x51
 8009ab4:	4335      	orrs	r5, r6
 8009ab6:	2d00      	cmp	r5, #0
 8009ab8:	4680      	mov	r8, r0
 8009aba:	4689      	mov	r9, r1
 8009abc:	dd48      	ble.n	8009b50 <__ieee754_log+0x2b8>
 8009abe:	4b50      	ldr	r3, [pc, #320]	@ (8009c00 <__ieee754_log+0x368>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	4650      	mov	r0, sl
 8009ac4:	4659      	mov	r1, fp
 8009ac6:	f7f6 fd9f 	bl	8000608 <__aeabi_dmul>
 8009aca:	4652      	mov	r2, sl
 8009acc:	465b      	mov	r3, fp
 8009ace:	f7f6 fd9b 	bl	8000608 <__aeabi_dmul>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4606      	mov	r6, r0
 8009ad8:	460f      	mov	r7, r1
 8009ada:	4640      	mov	r0, r8
 8009adc:	4649      	mov	r1, r9
 8009ade:	f7f6 fbdd 	bl	800029c <__adddf3>
 8009ae2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ae6:	f7f6 fd8f 	bl	8000608 <__aeabi_dmul>
 8009aea:	4680      	mov	r8, r0
 8009aec:	4689      	mov	r9, r1
 8009aee:	b964      	cbnz	r4, 8009b0a <__ieee754_log+0x272>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	4630      	mov	r0, r6
 8009af6:	4639      	mov	r1, r7
 8009af8:	f7f6 fbce 	bl	8000298 <__aeabi_dsub>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4650      	mov	r0, sl
 8009b02:	4659      	mov	r1, fp
 8009b04:	f7f6 fbc8 	bl	8000298 <__aeabi_dsub>
 8009b08:	e6da      	b.n	80098c0 <__ieee754_log+0x28>
 8009b0a:	a323      	add	r3, pc, #140	@ (adr r3, 8009b98 <__ieee754_log+0x300>)
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b14:	f7f6 fd78 	bl	8000608 <__aeabi_dmul>
 8009b18:	a321      	add	r3, pc, #132	@ (adr r3, 8009ba0 <__ieee754_log+0x308>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	4604      	mov	r4, r0
 8009b20:	460d      	mov	r5, r1
 8009b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b26:	f7f6 fd6f 	bl	8000608 <__aeabi_dmul>
 8009b2a:	4642      	mov	r2, r8
 8009b2c:	464b      	mov	r3, r9
 8009b2e:	f7f6 fbb5 	bl	800029c <__adddf3>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4630      	mov	r0, r6
 8009b38:	4639      	mov	r1, r7
 8009b3a:	f7f6 fbad 	bl	8000298 <__aeabi_dsub>
 8009b3e:	4652      	mov	r2, sl
 8009b40:	465b      	mov	r3, fp
 8009b42:	f7f6 fba9 	bl	8000298 <__aeabi_dsub>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	e7d9      	b.n	8009b04 <__ieee754_log+0x26c>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4650      	mov	r0, sl
 8009b56:	4659      	mov	r1, fp
 8009b58:	f7f6 fb9e 	bl	8000298 <__aeabi_dsub>
 8009b5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b60:	f7f6 fd52 	bl	8000608 <__aeabi_dmul>
 8009b64:	4606      	mov	r6, r0
 8009b66:	460f      	mov	r7, r1
 8009b68:	2c00      	cmp	r4, #0
 8009b6a:	f43f af25 	beq.w	80099b8 <__ieee754_log+0x120>
 8009b6e:	a30a      	add	r3, pc, #40	@ (adr r3, 8009b98 <__ieee754_log+0x300>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b78:	f7f6 fd46 	bl	8000608 <__aeabi_dmul>
 8009b7c:	a308      	add	r3, pc, #32	@ (adr r3, 8009ba0 <__ieee754_log+0x308>)
 8009b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b82:	4604      	mov	r4, r0
 8009b84:	460d      	mov	r5, r1
 8009b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b8a:	e729      	b.n	80099e0 <__ieee754_log+0x148>
 8009b8c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009be8 <__ieee754_log+0x350>
 8009b90:	e698      	b.n	80098c4 <__ieee754_log+0x2c>
 8009b92:	bf00      	nop
 8009b94:	f3af 8000 	nop.w
 8009b98:	fee00000 	.word	0xfee00000
 8009b9c:	3fe62e42 	.word	0x3fe62e42
 8009ba0:	35793c76 	.word	0x35793c76
 8009ba4:	3dea39ef 	.word	0x3dea39ef
 8009ba8:	55555555 	.word	0x55555555
 8009bac:	3fd55555 	.word	0x3fd55555
 8009bb0:	df3e5244 	.word	0xdf3e5244
 8009bb4:	3fc2f112 	.word	0x3fc2f112
 8009bb8:	96cb03de 	.word	0x96cb03de
 8009bbc:	3fc74664 	.word	0x3fc74664
 8009bc0:	94229359 	.word	0x94229359
 8009bc4:	3fd24924 	.word	0x3fd24924
 8009bc8:	55555593 	.word	0x55555593
 8009bcc:	3fe55555 	.word	0x3fe55555
 8009bd0:	d078c69f 	.word	0xd078c69f
 8009bd4:	3fc39a09 	.word	0x3fc39a09
 8009bd8:	1d8e78af 	.word	0x1d8e78af
 8009bdc:	3fcc71c5 	.word	0x3fcc71c5
 8009be0:	9997fa04 	.word	0x9997fa04
 8009be4:	3fd99999 	.word	0x3fd99999
	...
 8009bf0:	c3500000 	.word	0xc3500000
 8009bf4:	43500000 	.word	0x43500000
 8009bf8:	7fefffff 	.word	0x7fefffff
 8009bfc:	3ff00000 	.word	0x3ff00000
 8009c00:	3fe00000 	.word	0x3fe00000

08009c04 <_init>:
 8009c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c06:	bf00      	nop
 8009c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0a:	bc08      	pop	{r3}
 8009c0c:	469e      	mov	lr, r3
 8009c0e:	4770      	bx	lr

08009c10 <_fini>:
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c12:	bf00      	nop
 8009c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c16:	bc08      	pop	{r3}
 8009c18:	469e      	mov	lr, r3
 8009c1a:	4770      	bx	lr
